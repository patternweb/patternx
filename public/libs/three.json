[
  {
    "name": "AnimationAction",
    "documentation": "",
    "type": "typeof AnimationAction",
    "constructors": [
      {
        "parameters": [],
        "returnType": "AnimationAction",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "time",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "timeScale",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "weight",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "repetitions",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "paused",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "enabled",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "clampWhenFinished",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "zeroSlopeAtStart",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "zeroSlopeAtEnd",
        "documentation": "",
        "type": "boolean"
      }
    ],
    "methods": [
      {
        "name": "play",
        "documentation": "",
        "type": "() => AnimationAction"
      },
      {
        "name": "stop",
        "documentation": "",
        "type": "() => AnimationAction"
      },
      {
        "name": "reset",
        "documentation": "",
        "type": "() => AnimationAction"
      },
      {
        "name": "isRunning",
        "documentation": "",
        "type": "() => boolean"
      },
      {
        "name": "startAt",
        "documentation": "",
        "type": "(time: number) => AnimationAction"
      },
      {
        "name": "setLoop",
        "documentation": "",
        "type": "(mode: AnimationActionLoopStyles, repetitions: number) => AnimationAction"
      },
      {
        "name": "setEffectiveWeight",
        "documentation": "",
        "type": "(weight: number) => AnimationAction"
      },
      {
        "name": "getEffectiveWeight",
        "documentation": "",
        "type": "() => number"
      },
      {
        "name": "fadeIn",
        "documentation": "",
        "type": "(duration: number) => AnimationAction"
      },
      {
        "name": "fadeOut",
        "documentation": "",
        "type": "(duration: number) => AnimationAction"
      },
      {
        "name": "crossFadeFrom",
        "documentation": "",
        "type": "(fadeOutAction: AnimationAction, duration: number, warp: boolean) => AnimationAction"
      },
      {
        "name": "crossFadeTo",
        "documentation": "",
        "type": "(fadeInAction: AnimationAction, duration: number, warp: boolean) => AnimationAction"
      },
      {
        "name": "stopFading",
        "documentation": "",
        "type": "() => AnimationAction"
      },
      {
        "name": "setEffectiveTimeScale",
        "documentation": "",
        "type": "(timeScale: number) => AnimationAction"
      },
      {
        "name": "getEffectiveTimeScale",
        "documentation": "",
        "type": "() => number"
      },
      {
        "name": "setDuration",
        "documentation": "",
        "type": "(duration: number) => AnimationAction"
      },
      {
        "name": "syncWith",
        "documentation": "",
        "type": "(action: AnimationAction) => AnimationAction"
      },
      {
        "name": "halt",
        "documentation": "",
        "type": "(duration: number) => AnimationAction"
      },
      {
        "name": "warp",
        "documentation": "",
        "type": "(statTimeScale: number, endTimeScale: number, duration: number) => AnimationAction"
      },
      {
        "name": "stopWarping",
        "documentation": "",
        "type": "() => AnimationAction"
      },
      {
        "name": "getMixer",
        "documentation": "",
        "type": "() => AnimationMixer"
      },
      {
        "name": "getClip",
        "documentation": "",
        "type": "() => AnimationClip"
      },
      {
        "name": "getRoot",
        "documentation": "",
        "type": "() => any"
      }
    ]
  },
  {
    "name": "AnimationClip",
    "documentation": "",
    "type": "typeof AnimationClip",
    "constructors": [
      {
        "parameters": [
          {
            "name": "name",
            "documentation": "",
            "type": "string"
          },
          {
            "name": "duration",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "tracks",
            "documentation": "",
            "type": "KeyframeTrack[]"
          }
        ],
        "returnType": "AnimationClip",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "name",
        "documentation": "",
        "type": "string"
      },
      {
        "name": "tracks",
        "documentation": "",
        "type": "KeyframeTrack[]"
      },
      {
        "name": "duration",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "uuid",
        "documentation": "",
        "type": "string"
      },
      {
        "name": "results",
        "documentation": "",
        "type": "any[]"
      }
    ],
    "methods": [
      {
        "name": "resetDuration",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "trim",
        "documentation": "",
        "type": "() => AnimationClip"
      },
      {
        "name": "optimize",
        "documentation": "",
        "type": "() => AnimationClip"
      }
    ]
  },
  {
    "name": "AnimationMixer",
    "documentation": "",
    "type": "typeof AnimationMixer",
    "constructors": [
      {
        "parameters": [
          {
            "name": "root",
            "documentation": "",
            "type": "any"
          }
        ],
        "returnType": "AnimationMixer",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "time",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "timeScale",
        "documentation": "",
        "type": "number"
      }
    ],
    "methods": [
      {
        "name": "clipAction",
        "documentation": "",
        "type": "(clip: AnimationClip, root?: any) => AnimationAction"
      },
      {
        "name": "existingAction",
        "documentation": "",
        "type": "(clip: AnimationClip, root?: any) => AnimationAction"
      },
      {
        "name": "stopAllAction",
        "documentation": "",
        "type": "(clip: AnimationClip, root?: any) => AnimationMixer"
      },
      {
        "name": "update",
        "documentation": "",
        "type": "(deltaTime: number) => AnimationMixer"
      },
      {
        "name": "getRoot",
        "documentation": "",
        "type": "() => any"
      },
      {
        "name": "uncacheClip",
        "documentation": "",
        "type": "(clip: AnimationClip) => void"
      },
      {
        "name": "uncacheRoot",
        "documentation": "",
        "type": "(root: any) => void"
      },
      {
        "name": "uncacheAction",
        "documentation": "",
        "type": "(clip: AnimationClip, root?: any) => void"
      }
    ]
  },
  {
    "name": "AnimationObjectGroup",
    "documentation": "",
    "type": "typeof AnimationObjectGroup",
    "constructors": [
      {
        "parameters": [
          {
            "name": "args",
            "documentation": "",
            "type": "any[]"
          }
        ],
        "returnType": "AnimationObjectGroup",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "uuid",
        "documentation": "",
        "type": "string"
      },
      {
        "name": "stats",
        "documentation": "",
        "type": "{ bindingsPerObject: number; objects: { total: number; inUse: number; }; }"
      }
    ],
    "methods": [
      {
        "name": "add",
        "documentation": "",
        "type": "(...args: any[]) => void"
      },
      {
        "name": "remove",
        "documentation": "",
        "type": "(...args: any[]) => void"
      },
      {
        "name": "uncache",
        "documentation": "",
        "type": "(...args: any[]) => void"
      }
    ]
  },
  {
    "name": "KeyframeTrack",
    "documentation": "",
    "type": "typeof KeyframeTrack",
    "constructors": [
      {
        "parameters": [
          {
            "name": "name",
            "documentation": "",
            "type": "string"
          },
          {
            "name": "times",
            "documentation": "",
            "type": "any[]"
          },
          {
            "name": "values",
            "documentation": "",
            "type": "any[]"
          },
          {
            "name": "interpolation",
            "documentation": "",
            "type": "InterpolationModes"
          }
        ],
        "returnType": "KeyframeTrack",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "name",
        "documentation": "",
        "type": "string"
      },
      {
        "name": "times",
        "documentation": "",
        "type": "any[]"
      },
      {
        "name": "values",
        "documentation": "",
        "type": "any[]"
      },
      {
        "name": "ValueTypeName",
        "documentation": "",
        "type": "string"
      },
      {
        "name": "TimeBufferType",
        "documentation": "",
        "type": "Float32Array"
      },
      {
        "name": "ValueBufferType",
        "documentation": "",
        "type": "Float32Array"
      },
      {
        "name": "DefaultInterpolation",
        "documentation": "",
        "type": "InterpolationModes"
      }
    ],
    "methods": [
      {
        "name": "InterpolantFactoryMethodDiscrete",
        "documentation": "",
        "type": "(result: any) => DiscreteInterpolant"
      },
      {
        "name": "InterpolantFactoryMethodLinear",
        "documentation": "",
        "type": "(result: any) => LinearInterpolant"
      },
      {
        "name": "InterpolantFactoryMethodSmooth",
        "documentation": "",
        "type": "(result: any) => CubicInterpolant"
      },
      {
        "name": "setInterpolation",
        "documentation": "",
        "type": "(interpolation: InterpolationModes) => void"
      },
      {
        "name": "getInterpolation",
        "documentation": "",
        "type": "() => InterpolationModes"
      },
      {
        "name": "getValuesize",
        "documentation": "",
        "type": "() => number"
      },
      {
        "name": "shift",
        "documentation": "",
        "type": "(timeOffset: number) => KeyframeTrack"
      },
      {
        "name": "scale",
        "documentation": "",
        "type": "(timeScale: number) => KeyframeTrack"
      },
      {
        "name": "trim",
        "documentation": "",
        "type": "(startTime: number, endTime: number) => KeyframeTrack"
      },
      {
        "name": "validate",
        "documentation": "",
        "type": "() => boolean"
      },
      {
        "name": "optimize",
        "documentation": "",
        "type": "() => KeyframeTrack"
      }
    ]
  },
  {
    "name": "PropertyBinding",
    "documentation": "",
    "type": "typeof PropertyBinding",
    "constructors": [
      {
        "parameters": [
          {
            "name": "rootNode",
            "documentation": "",
            "type": "any"
          },
          {
            "name": "path",
            "documentation": "",
            "type": "string"
          },
          {
            "name": "parsedPath",
            "documentation": "",
            "type": "any"
          }
        ],
        "returnType": "PropertyBinding",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "path",
        "documentation": "",
        "type": "string"
      },
      {
        "name": "parsedPath",
        "documentation": "",
        "type": "any"
      },
      {
        "name": "node",
        "documentation": "",
        "type": "any"
      },
      {
        "name": "rootNode",
        "documentation": "",
        "type": "any"
      },
      {
        "name": "BindingType",
        "documentation": "",
        "type": "{ [bindingType: string]: number; }"
      },
      {
        "name": "Versioning",
        "documentation": "",
        "type": "{ [versioning: string]: number; }"
      },
      {
        "name": "GetterByBindingType",
        "documentation": "",
        "type": "Function[]"
      },
      {
        "name": "SetterByBindingTypeAndVersioning",
        "documentation": "",
        "type": "Function[][]"
      }
    ],
    "methods": [
      {
        "name": "getValue",
        "documentation": "",
        "type": "(targetArray: any, offset: number) => any"
      },
      {
        "name": "setValue",
        "documentation": "",
        "type": "(sourceArray: any, offset: number) => void"
      },
      {
        "name": "bind",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "unbind",
        "documentation": "",
        "type": "() => void"
      }
    ]
  },
  {
    "name": "PropertyMixer",
    "documentation": "",
    "type": "typeof PropertyMixer",
    "constructors": [
      {
        "parameters": [
          {
            "name": "binding",
            "documentation": "",
            "type": "any"
          },
          {
            "name": "typeName",
            "documentation": "",
            "type": "string"
          },
          {
            "name": "valueSize",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "PropertyMixer",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "binding",
        "documentation": "",
        "type": "any"
      },
      {
        "name": "valueSize",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "buffer",
        "documentation": "",
        "type": "any"
      },
      {
        "name": "cumulativeWeight",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "useCount",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "referenceCount",
        "documentation": "",
        "type": "number"
      }
    ],
    "methods": [
      {
        "name": "accumulate",
        "documentation": "",
        "type": "(accuIndex: number, weight: number) => void"
      },
      {
        "name": "apply",
        "documentation": "",
        "type": "(accuIndex: number) => void"
      },
      {
        "name": "saveOriginalState",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "restoreOriginalState",
        "documentation": "",
        "type": "() => void"
      }
    ]
  },
  {
    "name": "BooleanKeyframeTrack",
    "documentation": "",
    "type": "typeof BooleanKeyframeTrack",
    "constructors": [
      {
        "parameters": [
          {
            "name": "name",
            "documentation": "",
            "type": "string"
          },
          {
            "name": "times",
            "documentation": "",
            "type": "any[]"
          },
          {
            "name": "values",
            "documentation": "",
            "type": "any[]"
          }
        ],
        "returnType": "BooleanKeyframeTrack",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": []
  },
  {
    "name": "ColorKeyframeTrack",
    "documentation": "",
    "type": "typeof ColorKeyframeTrack",
    "constructors": [
      {
        "parameters": [
          {
            "name": "name",
            "documentation": "",
            "type": "string"
          },
          {
            "name": "times",
            "documentation": "",
            "type": "any[]"
          },
          {
            "name": "values",
            "documentation": "",
            "type": "any[]"
          },
          {
            "name": "interpolation",
            "documentation": "",
            "type": "InterpolationModes"
          }
        ],
        "returnType": "ColorKeyframeTrack",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": []
  },
  {
    "name": "NumberKeyframeTrack",
    "documentation": "",
    "type": "typeof NumberKeyframeTrack",
    "constructors": [
      {
        "parameters": [
          {
            "name": "name",
            "documentation": "",
            "type": "string"
          },
          {
            "name": "times",
            "documentation": "",
            "type": "any[]"
          },
          {
            "name": "values",
            "documentation": "",
            "type": "any[]"
          },
          {
            "name": "interpolation",
            "documentation": "",
            "type": "InterpolationModes"
          }
        ],
        "returnType": "NumberKeyframeTrack",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": []
  },
  {
    "name": "QuaternionKeyframeTrack",
    "documentation": "",
    "type": "typeof QuaternionKeyframeTrack",
    "constructors": [
      {
        "parameters": [
          {
            "name": "name",
            "documentation": "",
            "type": "string"
          },
          {
            "name": "times",
            "documentation": "",
            "type": "any[]"
          },
          {
            "name": "values",
            "documentation": "",
            "type": "any[]"
          },
          {
            "name": "interpolation",
            "documentation": "",
            "type": "InterpolationModes"
          }
        ],
        "returnType": "QuaternionKeyframeTrack",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": []
  },
  {
    "name": "StringKeyframeTrack",
    "documentation": "",
    "type": "typeof StringKeyframeTrack",
    "constructors": [
      {
        "parameters": [
          {
            "name": "name",
            "documentation": "",
            "type": "string"
          },
          {
            "name": "times",
            "documentation": "",
            "type": "any[]"
          },
          {
            "name": "values",
            "documentation": "",
            "type": "any[]"
          },
          {
            "name": "interpolation",
            "documentation": "",
            "type": "InterpolationModes"
          }
        ],
        "returnType": "StringKeyframeTrack",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": []
  },
  {
    "name": "VectorKeyframeTrack",
    "documentation": "",
    "type": "typeof VectorKeyframeTrack",
    "constructors": [
      {
        "parameters": [
          {
            "name": "name",
            "documentation": "",
            "type": "string"
          },
          {
            "name": "times",
            "documentation": "",
            "type": "any[]"
          },
          {
            "name": "values",
            "documentation": "",
            "type": "any[]"
          },
          {
            "name": "interpolation",
            "documentation": "",
            "type": "InterpolationModes"
          }
        ],
        "returnType": "VectorKeyframeTrack",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": []
  },
  {
    "name": "Camera",
    "documentation": "Abstract base class for cameras. This class should always be inherited when you build a new camera.",
    "type": "typeof Camera",
    "constructors": [
      {
        "parameters": [],
        "returnType": "Camera",
        "documentation": "This constructor sets following properties to the correct type: matrixWorldInverse, projectionMatrix and projectionMatrixInverse."
      }
    ],
    "properties": [
      {
        "name": "matrixWorldInverse",
        "documentation": "This is the inverse of matrixWorld. MatrixWorld contains the Matrix which has the world transform of the Camera.",
        "type": "Matrix4"
      },
      {
        "name": "projectionMatrix",
        "documentation": "This is the matrix which contains the projection.",
        "type": "Matrix4"
      }
    ],
    "methods": [
      {
        "name": "getWorldDirection",
        "documentation": "",
        "type": "(optionalTarget?: Vector3) => Vector3"
      },
      {
        "name": "lookAt",
        "documentation": "This make the camera look at the vector position in local space.",
        "type": "(vector: Vector3) => void"
      }
    ]
  },
  {
    "name": "CubeCamera",
    "documentation": "",
    "type": "typeof CubeCamera",
    "constructors": [
      {
        "parameters": [
          {
            "name": "near",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "far",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "cubeResolution",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "CubeCamera",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "renderTarget",
        "documentation": "",
        "type": "WebGLRenderTargetCube"
      }
    ],
    "methods": [
      {
        "name": "updateCubeMap",
        "documentation": "",
        "type": "(renderer: Renderer, scene: Scene) => void"
      }
    ]
  },
  {
    "name": "OrthographicCamera",
    "documentation": "Camera with orthographic projection",
    "type": "typeof OrthographicCamera",
    "constructors": [
      {
        "parameters": [
          {
            "name": "left",
            "documentation": "Camera frustum left plane.",
            "type": "number"
          },
          {
            "name": "right",
            "documentation": "Camera frustum right plane.",
            "type": "number"
          },
          {
            "name": "top",
            "documentation": "Camera frustum top plane.",
            "type": "number"
          },
          {
            "name": "bottom",
            "documentation": "Camera frustum bottom plane.",
            "type": "number"
          },
          {
            "name": "near",
            "documentation": "Camera frustum near plane.",
            "type": "number"
          },
          {
            "name": "far",
            "documentation": "Camera frustum far plane.",
            "type": "number"
          }
        ],
        "returnType": "OrthographicCamera",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "zoom",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "view",
        "documentation": "",
        "type": "{ fullWidth: number; fullHeight: number; offsetX: number; offsetY: number; width: number; height:..."
      },
      {
        "name": "left",
        "documentation": "Camera frustum left plane.",
        "type": "number"
      },
      {
        "name": "right",
        "documentation": "Camera frustum right plane.",
        "type": "number"
      },
      {
        "name": "top",
        "documentation": "Camera frustum top plane.",
        "type": "number"
      },
      {
        "name": "bottom",
        "documentation": "Camera frustum bottom plane.",
        "type": "number"
      },
      {
        "name": "near",
        "documentation": "Camera frustum near plane.",
        "type": "number"
      },
      {
        "name": "far",
        "documentation": "Camera frustum far plane.",
        "type": "number"
      }
    ],
    "methods": [
      {
        "name": "updateProjectionMatrix",
        "documentation": "Updates the camera projection matrix. Must be called after change of parameters.",
        "type": "() => void"
      },
      {
        "name": "setViewOffset",
        "documentation": "",
        "type": "(fullWidth: number, fullHeight: number, offsetX: number, offsetY: number, width: number, height: ..."
      },
      {
        "name": "clearViewOffset",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "toJSON",
        "documentation": "",
        "type": "(meta?: any) => any"
      }
    ]
  },
  {
    "name": "PerspectiveCamera",
    "documentation": "Camera with perspective projection.\r\n\r\n# example\r\n     var camera = new THREE.PerspectiveCamera( 45, width / height, 1, 1000 );\r\n     scene.add( camera );",
    "type": "typeof PerspectiveCamera",
    "constructors": [
      {
        "parameters": [
          {
            "name": "fov",
            "documentation": "Camera frustum vertical field of view. Default value is 50.",
            "type": "number"
          },
          {
            "name": "aspect",
            "documentation": "Camera frustum aspect ratio. Default value is 1.",
            "type": "number"
          },
          {
            "name": "near",
            "documentation": "Camera frustum near plane. Default value is 0.1.",
            "type": "number"
          },
          {
            "name": "far",
            "documentation": "Camera frustum far plane. Default value is 2000.",
            "type": "number"
          }
        ],
        "returnType": "PerspectiveCamera",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "zoom",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "fov",
        "documentation": "Camera frustum vertical field of view, from bottom to top of view, in degrees.",
        "type": "number"
      },
      {
        "name": "aspect",
        "documentation": "Camera frustum aspect ratio, window width divided by window height.",
        "type": "number"
      },
      {
        "name": "near",
        "documentation": "Camera frustum near plane.",
        "type": "number"
      },
      {
        "name": "far",
        "documentation": "Camera frustum far plane.",
        "type": "number"
      },
      {
        "name": "focus",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "view",
        "documentation": "",
        "type": "{ fullWidth: number; fullHeight: number; offsetX: number; offsetY: number; width: number; height:..."
      },
      {
        "name": "filmGauge",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "filmOffset",
        "documentation": "",
        "type": "number"
      }
    ],
    "methods": [
      {
        "name": "setFocalLength",
        "documentation": "",
        "type": "(focalLength: number) => void"
      },
      {
        "name": "getFocalLength",
        "documentation": "",
        "type": "() => number"
      },
      {
        "name": "getEffectiveFOV",
        "documentation": "",
        "type": "() => number"
      },
      {
        "name": "getFilmWidth",
        "documentation": "",
        "type": "() => number"
      },
      {
        "name": "getFilmHeight",
        "documentation": "",
        "type": "() => number"
      },
      {
        "name": "setViewOffset",
        "documentation": "Sets an offset in a larger frustum. This is useful for multi-window or multi-monitor/multi-machine setups.\r\nFor example, if you have 3x2 monitors and each monitor is 1920x1080 and the monitors are in grid like this:\r\n\r\n     +---+---+---+\r\n     | A | B | C |\r\n     +---+---+---+\r\n     | D | E | F |\r\n     +---+---+---+\r\n\r\nthen for each monitor you would call it like this:\r\n\r\n     var w = 1920;\r\n     var h = 1080;\r\n     var fullWidth = w * 3;\r\n     var fullHeight = h * 2;\r\n\r\n     // A\r\n     camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\r\n     // B\r\n     camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\r\n     // C\r\n     camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\r\n     // D\r\n     camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\r\n     // E\r\n     camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\r\n     // F\r\n     camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h ); Note there is no reason monitors have to be the same size or in a grid.",
        "type": "(fullWidth: number, fullHeight: number, x: number, y: number, width: number, height: number) => v..."
      },
      {
        "name": "clearViewOffset",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "updateProjectionMatrix",
        "documentation": "Updates the camera projection matrix. Must be called after change of parameters.",
        "type": "() => void"
      },
      {
        "name": "toJSON",
        "documentation": "",
        "type": "(meta?: any) => any"
      },
      {
        "name": "setLens",
        "documentation": "",
        "type": "(focalLength: number, frameHeight?: number) => void"
      }
    ]
  },
  {
    "name": "StereoCamera",
    "documentation": "",
    "type": "typeof StereoCamera",
    "constructors": [
      {
        "parameters": [],
        "returnType": "StereoCamera",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "aspect",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "eyeSep",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "cameraL",
        "documentation": "",
        "type": "PerspectiveCamera"
      },
      {
        "name": "cameraR",
        "documentation": "",
        "type": "PerspectiveCamera"
      }
    ],
    "methods": [
      {
        "name": "update",
        "documentation": "",
        "type": "(camera: PerspectiveCamera) => void"
      }
    ]
  },
  {
    "name": "BufferAttribute",
    "documentation": "",
    "type": "typeof BufferAttribute",
    "constructors": [
      {
        "parameters": [
          {
            "name": "array",
            "documentation": "",
            "type": "ArrayLike<number>"
          },
          {
            "name": "itemSize",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "normalized",
            "documentation": "",
            "type": "boolean"
          }
        ],
        "returnType": "BufferAttribute",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "uuid",
        "documentation": "",
        "type": "string"
      },
      {
        "name": "array",
        "documentation": "",
        "type": "ArrayLike<number>"
      },
      {
        "name": "itemSize",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "dynamic",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "updateRange",
        "documentation": "",
        "type": "{ offset: number; count: number; }"
      },
      {
        "name": "version",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "normalized",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "needsUpdate",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "count",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "length",
        "documentation": "",
        "type": "number"
      }
    ],
    "methods": [
      {
        "name": "setDynamic",
        "documentation": "",
        "type": "(dynamic: boolean) => BufferAttribute"
      },
      {
        "name": "clone",
        "documentation": "",
        "type": "() => this"
      },
      {
        "name": "copy",
        "documentation": "",
        "type": "(source: this) => this"
      },
      {
        "name": "copyAt",
        "documentation": "",
        "type": "(index1: number, attribute: BufferAttribute, index2: number) => BufferAttribute"
      },
      {
        "name": "copyArray",
        "documentation": "",
        "type": "(array: ArrayLike<number>) => BufferAttribute"
      },
      {
        "name": "copyColorsArray",
        "documentation": "",
        "type": "(colors: { r: number; g: number; b: number; }[]) => BufferAttribute"
      },
      {
        "name": "copyIndicesArray",
        "documentation": "",
        "type": "(indices: { a: number; b: number; c: number; }[]) => BufferAttribute"
      },
      {
        "name": "copyVector2sArray",
        "documentation": "",
        "type": "(vectors: { x: number; y: number; }[]) => BufferAttribute"
      },
      {
        "name": "copyVector3sArray",
        "documentation": "",
        "type": "(vectors: { x: number; y: number; z: number; }[]) => BufferAttribute"
      },
      {
        "name": "copyVector4sArray",
        "documentation": "",
        "type": "(vectors: { x: number; y: number; z: number; w: number; }[]) => BufferAttribute"
      },
      {
        "name": "set",
        "documentation": "",
        "type": "(value: ArrayLike<number>, offset?: number) => BufferAttribute"
      },
      {
        "name": "getX",
        "documentation": "",
        "type": "(index: number) => number"
      },
      {
        "name": "setX",
        "documentation": "",
        "type": "(index: number, x: number) => BufferAttribute"
      },
      {
        "name": "getY",
        "documentation": "",
        "type": "(index: number) => number"
      },
      {
        "name": "setY",
        "documentation": "",
        "type": "(index: number, y: number) => BufferAttribute"
      },
      {
        "name": "getZ",
        "documentation": "",
        "type": "(index: number) => number"
      },
      {
        "name": "setZ",
        "documentation": "",
        "type": "(index: number, z: number) => BufferAttribute"
      },
      {
        "name": "getW",
        "documentation": "",
        "type": "(index: number) => number"
      },
      {
        "name": "setW",
        "documentation": "",
        "type": "(index: number, z: number) => BufferAttribute"
      },
      {
        "name": "setXY",
        "documentation": "",
        "type": "(index: number, x: number, y: number) => BufferAttribute"
      },
      {
        "name": "setXYZ",
        "documentation": "",
        "type": "(index: number, x: number, y: number, z: number) => BufferAttribute"
      },
      {
        "name": "setXYZW",
        "documentation": "",
        "type": "(index: number, x: number, y: number, z: number, w: number) => BufferAttribute"
      }
    ]
  },
  {
    "name": "Int8Attribute",
    "documentation": "",
    "type": "typeof Int8Attribute",
    "constructors": [
      {
        "parameters": [
          {
            "name": "array",
            "documentation": "",
            "type": "any"
          },
          {
            "name": "itemSize",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "Int8Attribute",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": []
  },
  {
    "name": "Uint8Attribute",
    "documentation": "",
    "type": "typeof Uint8Attribute",
    "constructors": [
      {
        "parameters": [
          {
            "name": "array",
            "documentation": "",
            "type": "any"
          },
          {
            "name": "itemSize",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "Uint8Attribute",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": []
  },
  {
    "name": "Uint8ClampedAttribute",
    "documentation": "",
    "type": "typeof Uint8ClampedAttribute",
    "constructors": [
      {
        "parameters": [
          {
            "name": "array",
            "documentation": "",
            "type": "any"
          },
          {
            "name": "itemSize",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "Uint8ClampedAttribute",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": []
  },
  {
    "name": "Int16Attribute",
    "documentation": "",
    "type": "typeof Int16Attribute",
    "constructors": [
      {
        "parameters": [
          {
            "name": "array",
            "documentation": "",
            "type": "any"
          },
          {
            "name": "itemSize",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "Int16Attribute",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": []
  },
  {
    "name": "Uint16Attribute",
    "documentation": "",
    "type": "typeof Uint16Attribute",
    "constructors": [
      {
        "parameters": [
          {
            "name": "array",
            "documentation": "",
            "type": "any"
          },
          {
            "name": "itemSize",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "Uint16Attribute",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": []
  },
  {
    "name": "Int32Attribute",
    "documentation": "",
    "type": "typeof Int32Attribute",
    "constructors": [
      {
        "parameters": [
          {
            "name": "array",
            "documentation": "",
            "type": "any"
          },
          {
            "name": "itemSize",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "Int32Attribute",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": []
  },
  {
    "name": "Uint32Attribute",
    "documentation": "",
    "type": "typeof Uint32Attribute",
    "constructors": [
      {
        "parameters": [
          {
            "name": "array",
            "documentation": "",
            "type": "any"
          },
          {
            "name": "itemSize",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "Uint32Attribute",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": []
  },
  {
    "name": "Float32Attribute",
    "documentation": "",
    "type": "typeof Float32Attribute",
    "constructors": [
      {
        "parameters": [
          {
            "name": "array",
            "documentation": "",
            "type": "any"
          },
          {
            "name": "itemSize",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "Float32Attribute",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": []
  },
  {
    "name": "Float64Attribute",
    "documentation": "",
    "type": "typeof Float64Attribute",
    "constructors": [
      {
        "parameters": [
          {
            "name": "array",
            "documentation": "",
            "type": "any"
          },
          {
            "name": "itemSize",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "Float64Attribute",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": []
  },
  {
    "name": "Int8BufferAttribute",
    "documentation": "",
    "type": "typeof Int8BufferAttribute",
    "constructors": [
      {
        "parameters": [
          {
            "name": "array",
            "documentation": "",
            "type": "ArrayLike<number> | Iterable<number> | ArrayBuffer"
          },
          {
            "name": "itemSize",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "Int8BufferAttribute",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": []
  },
  {
    "name": "Uint8BufferAttribute",
    "documentation": "",
    "type": "typeof Uint8BufferAttribute",
    "constructors": [
      {
        "parameters": [
          {
            "name": "array",
            "documentation": "",
            "type": "ArrayLike<number> | Iterable<number> | ArrayBuffer"
          },
          {
            "name": "itemSize",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "Uint8BufferAttribute",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": []
  },
  {
    "name": "Uint8ClampedBufferAttribute",
    "documentation": "",
    "type": "typeof Uint8ClampedBufferAttribute",
    "constructors": [
      {
        "parameters": [
          {
            "name": "array",
            "documentation": "",
            "type": "ArrayLike<number> | Iterable<number> | ArrayBuffer"
          },
          {
            "name": "itemSize",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "Uint8ClampedBufferAttribute",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": []
  },
  {
    "name": "Int16BufferAttribute",
    "documentation": "",
    "type": "typeof Int16BufferAttribute",
    "constructors": [
      {
        "parameters": [
          {
            "name": "array",
            "documentation": "",
            "type": "ArrayLike<number> | Iterable<number> | ArrayBuffer"
          },
          {
            "name": "itemSize",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "Int16BufferAttribute",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": []
  },
  {
    "name": "Uint16BufferAttribute",
    "documentation": "",
    "type": "typeof Uint16BufferAttribute",
    "constructors": [
      {
        "parameters": [
          {
            "name": "array",
            "documentation": "",
            "type": "ArrayLike<number> | Iterable<number> | ArrayBuffer"
          },
          {
            "name": "itemSize",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "Uint16BufferAttribute",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": []
  },
  {
    "name": "Int32BufferAttribute",
    "documentation": "",
    "type": "typeof Int32BufferAttribute",
    "constructors": [
      {
        "parameters": [
          {
            "name": "array",
            "documentation": "",
            "type": "ArrayLike<number> | Iterable<number> | ArrayBuffer"
          },
          {
            "name": "itemSize",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "Int32BufferAttribute",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": []
  },
  {
    "name": "Uint32BufferAttribute",
    "documentation": "",
    "type": "typeof Uint32BufferAttribute",
    "constructors": [
      {
        "parameters": [
          {
            "name": "array",
            "documentation": "",
            "type": "ArrayLike<number> | Iterable<number> | ArrayBuffer"
          },
          {
            "name": "itemSize",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "Uint32BufferAttribute",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": []
  },
  {
    "name": "Float32BufferAttribute",
    "documentation": "",
    "type": "typeof Float32BufferAttribute",
    "constructors": [
      {
        "parameters": [
          {
            "name": "array",
            "documentation": "",
            "type": "ArrayLike<number> | Iterable<number> | ArrayBuffer"
          },
          {
            "name": "itemSize",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "Float32BufferAttribute",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": []
  },
  {
    "name": "Float64BufferAttribute",
    "documentation": "",
    "type": "typeof Float64BufferAttribute",
    "constructors": [
      {
        "parameters": [
          {
            "name": "array",
            "documentation": "",
            "type": "ArrayLike<number> | Iterable<number> | ArrayBuffer"
          },
          {
            "name": "itemSize",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "Float64BufferAttribute",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": []
  },
  {
    "name": "DynamicBufferAttribute",
    "documentation": "",
    "type": "typeof DynamicBufferAttribute",
    "constructors": [
      {
        "parameters": [
          {
            "name": "array",
            "documentation": "",
            "type": "ArrayLike<number>"
          },
          {
            "name": "itemSize",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "normalized",
            "documentation": "",
            "type": "boolean"
          }
        ],
        "returnType": "DynamicBufferAttribute",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": []
  },
  {
    "name": "BufferGeometry",
    "documentation": "This is a superefficent class for geometries because it saves all data in buffers.\r\nIt reduces memory costs and cpu cycles. But it is not as easy to work with because of all the nessecary buffer calculations.\r\nIt is mainly interesting when working with static objects.",
    "type": "typeof BufferGeometry",
    "constructors": [
      {
        "parameters": [],
        "returnType": "BufferGeometry",
        "documentation": "This creates a new BufferGeometry. It also sets several properties to an default value."
      }
    ],
    "properties": [
      {
        "name": "id",
        "documentation": "Unique number of this buffergeometry instance",
        "type": "number"
      },
      {
        "name": "uuid",
        "documentation": "",
        "type": "string"
      },
      {
        "name": "name",
        "documentation": "",
        "type": "string"
      },
      {
        "name": "type",
        "documentation": "",
        "type": "string"
      },
      {
        "name": "index",
        "documentation": "",
        "type": "BufferAttribute"
      },
      {
        "name": "attributes",
        "documentation": "",
        "type": "BufferAttribute | InterleavedBufferAttribute[]"
      },
      {
        "name": "morphAttributes",
        "documentation": "",
        "type": "any"
      },
      {
        "name": "groups",
        "documentation": "",
        "type": "{ start: number; count: number; materialIndex?: number; }[]"
      },
      {
        "name": "boundingBox",
        "documentation": "",
        "type": "Box3"
      },
      {
        "name": "boundingSphere",
        "documentation": "",
        "type": "Sphere"
      },
      {
        "name": "drawRange",
        "documentation": "",
        "type": "{ start: number; count: number; }"
      },
      {
        "name": "addAttribute",
        "documentation": "",
        "type": "{ (name: string, attribute: BufferAttribute | InterleavedBufferAttribute): BufferGeometry; (name:..."
      },
      {
        "name": "drawcalls",
        "documentation": "",
        "type": "any"
      },
      {
        "name": "offsets",
        "documentation": "",
        "type": "any"
      }
    ],
    "methods": [
      {
        "name": "getIndex",
        "documentation": "",
        "type": "() => BufferAttribute"
      },
      {
        "name": "setIndex",
        "documentation": "",
        "type": "(index: BufferAttribute | number[]) => void"
      },
      {
        "name": "getAttribute",
        "documentation": "",
        "type": "(name: string) => BufferAttribute | InterleavedBufferAttribute"
      },
      {
        "name": "removeAttribute",
        "documentation": "",
        "type": "(name: string) => BufferGeometry"
      },
      {
        "name": "addGroup",
        "documentation": "",
        "type": "(start: number, count: number, materialIndex?: number) => void"
      },
      {
        "name": "clearGroups",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "setDrawRange",
        "documentation": "",
        "type": "(start: number, count: number) => void"
      },
      {
        "name": "applyMatrix",
        "documentation": "Bakes matrix transform directly into vertex coordinates.",
        "type": "(matrix: Matrix4) => BufferGeometry"
      },
      {
        "name": "rotateX",
        "documentation": "",
        "type": "(angle: number) => BufferGeometry"
      },
      {
        "name": "rotateY",
        "documentation": "",
        "type": "(angle: number) => BufferGeometry"
      },
      {
        "name": "rotateZ",
        "documentation": "",
        "type": "(angle: number) => BufferGeometry"
      },
      {
        "name": "translate",
        "documentation": "",
        "type": "(x: number, y: number, z: number) => BufferGeometry"
      },
      {
        "name": "scale",
        "documentation": "",
        "type": "(x: number, y: number, z: number) => BufferGeometry"
      },
      {
        "name": "lookAt",
        "documentation": "",
        "type": "(v: Vector3) => void"
      },
      {
        "name": "center",
        "documentation": "",
        "type": "() => Vector3"
      },
      {
        "name": "setFromObject",
        "documentation": "",
        "type": "(object: Object3D) => void"
      },
      {
        "name": "updateFromObject",
        "documentation": "",
        "type": "(object: Object3D) => void"
      },
      {
        "name": "fromGeometry",
        "documentation": "",
        "type": "(geometry: Geometry, settings?: any) => BufferGeometry"
      },
      {
        "name": "fromDirectGeometry",
        "documentation": "",
        "type": "(geometry: DirectGeometry) => BufferGeometry"
      },
      {
        "name": "computeBoundingBox",
        "documentation": "Computes bounding box of the geometry, updating Geometry.boundingBox attribute.\r\nBounding boxes aren't computed by default. They need to be explicitly computed, otherwise they are null.",
        "type": "() => void"
      },
      {
        "name": "computeBoundingSphere",
        "documentation": "Computes bounding sphere of the geometry, updating Geometry.boundingSphere attribute.\r\nBounding spheres aren't' computed by default. They need to be explicitly computed, otherwise they are null.",
        "type": "() => void"
      },
      {
        "name": "computeVertexNormals",
        "documentation": "Computes vertex normals by averaging face normals.",
        "type": "() => void"
      },
      {
        "name": "merge",
        "documentation": "",
        "type": "(geometry: BufferGeometry, offset: number) => BufferGeometry"
      },
      {
        "name": "normalizeNormals",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "toNonIndexed",
        "documentation": "",
        "type": "() => BufferGeometry"
      },
      {
        "name": "toJSON",
        "documentation": "",
        "type": "() => any"
      },
      {
        "name": "clone",
        "documentation": "",
        "type": "() => this"
      },
      {
        "name": "copy",
        "documentation": "",
        "type": "(source: this) => this"
      },
      {
        "name": "dispose",
        "documentation": "Disposes the object from memory.\r\nYou need to call this when you want the bufferGeometry removed while the application is running.",
        "type": "() => void"
      },
      {
        "name": "addIndex",
        "documentation": "",
        "type": "(index: any) => void"
      },
      {
        "name": "addDrawCall",
        "documentation": "",
        "type": "(start: any, count: any, indexOffset?: any) => void"
      },
      {
        "name": "clearDrawCalls",
        "documentation": "",
        "type": "() => void"
      }
    ]
  },
  {
    "name": "Clock",
    "documentation": "Object for keeping track of time.",
    "type": "typeof Clock",
    "constructors": [
      {
        "parameters": [
          {
            "name": "autoStart",
            "documentation": "Automatically start the clock.",
            "type": "boolean"
          }
        ],
        "returnType": "Clock",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "autoStart",
        "documentation": "If set, starts the clock automatically when the first update is called.",
        "type": "boolean"
      },
      {
        "name": "startTime",
        "documentation": "When the clock is running, It holds the starttime of the clock.\r\nThis counted from the number of milliseconds elapsed since 1 January 1970 00:00:00 UTC.",
        "type": "number"
      },
      {
        "name": "oldTime",
        "documentation": "When the clock is running, It holds the previous time from a update.\r\nThis counted from the number of milliseconds elapsed since 1 January 1970 00:00:00 UTC.",
        "type": "number"
      },
      {
        "name": "elapsedTime",
        "documentation": "When the clock is running, It holds the time elapsed between the start of the clock to the previous update.\r\nThis parameter is in seconds of three decimal places.",
        "type": "number"
      },
      {
        "name": "running",
        "documentation": "This property keeps track whether the clock is running or not.",
        "type": "boolean"
      }
    ],
    "methods": [
      {
        "name": "start",
        "documentation": "Starts clock.",
        "type": "() => void"
      },
      {
        "name": "stop",
        "documentation": "Stops clock.",
        "type": "() => void"
      },
      {
        "name": "getElapsedTime",
        "documentation": "Get the seconds passed since the clock started.",
        "type": "() => number"
      },
      {
        "name": "getDelta",
        "documentation": "Get the seconds passed since the last call to this method.",
        "type": "() => number"
      }
    ]
  },
  {
    "name": "DirectGeometry",
    "documentation": "",
    "type": "typeof DirectGeometry",
    "constructors": [
      {
        "parameters": [],
        "returnType": "DirectGeometry",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "id",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "uuid",
        "documentation": "",
        "type": "string"
      },
      {
        "name": "name",
        "documentation": "",
        "type": "string"
      },
      {
        "name": "type",
        "documentation": "",
        "type": "string"
      },
      {
        "name": "indices",
        "documentation": "",
        "type": "number[]"
      },
      {
        "name": "vertices",
        "documentation": "",
        "type": "Vector3[]"
      },
      {
        "name": "normals",
        "documentation": "",
        "type": "Vector3[]"
      },
      {
        "name": "colors",
        "documentation": "",
        "type": "Color[]"
      },
      {
        "name": "uvs",
        "documentation": "",
        "type": "Vector2[]"
      },
      {
        "name": "uvs2",
        "documentation": "",
        "type": "Vector2[]"
      },
      {
        "name": "groups",
        "documentation": "",
        "type": "{ start: number; materialIndex: number; }[]"
      },
      {
        "name": "morphTargets",
        "documentation": "",
        "type": "MorphTarget[]"
      },
      {
        "name": "skinWeights",
        "documentation": "",
        "type": "number[]"
      },
      {
        "name": "skinIndices",
        "documentation": "",
        "type": "number[]"
      },
      {
        "name": "boundingBox",
        "documentation": "",
        "type": "Box3"
      },
      {
        "name": "boundingSphere",
        "documentation": "",
        "type": "Sphere"
      },
      {
        "name": "verticesNeedUpdate",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "normalsNeedUpdate",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "colorsNeedUpdate",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "uvsNeedUpdate",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "groupsNeedUpdate",
        "documentation": "",
        "type": "boolean"
      }
    ],
    "methods": [
      {
        "name": "computeBoundingBox",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "computeBoundingSphere",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "computeGroups",
        "documentation": "",
        "type": "(geometry: Geometry) => void"
      },
      {
        "name": "fromGeometry",
        "documentation": "",
        "type": "(geometry: Geometry) => DirectGeometry"
      },
      {
        "name": "dispose",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "addEventListener",
        "documentation": "",
        "type": "(type: string, listener: (event: Event) => void) => void"
      },
      {
        "name": "hasEventListener",
        "documentation": "",
        "type": "(type: string, listener: (event: Event) => void) => void"
      },
      {
        "name": "removeEventListener",
        "documentation": "",
        "type": "(type: string, listener: (event: Event) => void) => void"
      },
      {
        "name": "dispatchEvent",
        "documentation": "",
        "type": "(event: { [attachment: string]: any; type: string; }) => void"
      }
    ]
  },
  {
    "name": "EventDispatcher",
    "documentation": "JavaScript events for custom objects\r\n\r\n# Example\r\n     var Car = function () {\r\n\r\n         EventDispatcher.call( this );\r\n         this.start = function () {\r\n\r\n             this.dispatchEvent( { type: 'start', message: 'vroom vroom!' } );\r\n\r\n         };\r\n\r\n     };\r\n\r\n     var car = new Car();\r\n     car.addEventListener( 'start', function ( event ) {\r\n\r\n         alert( event.message );\r\n\r\n     } );\r\n     car.start();",
    "type": "typeof EventDispatcher",
    "constructors": [
      {
        "parameters": [],
        "returnType": "EventDispatcher",
        "documentation": "Creates eventDispatcher object. It needs to be call with '.call' to add the functionality to an object."
      }
    ],
    "properties": [],
    "methods": [
      {
        "name": "addEventListener",
        "documentation": "Adds a listener to an event type.",
        "type": "(type: string, listener: (event: Event) => void) => void"
      },
      {
        "name": "hasEventListener",
        "documentation": "Adds a listener to an event type.",
        "type": "(type: string, listener: (event: Event) => void) => void"
      },
      {
        "name": "removeEventListener",
        "documentation": "Removes a listener from an event type.",
        "type": "(type: string, listener: (event: Event) => void) => void"
      },
      {
        "name": "dispatchEvent",
        "documentation": "Fire an event type.",
        "type": "(event: { [attachment: string]: any; type: string; }) => void"
      }
    ]
  },
  {
    "name": "Face3",
    "documentation": "Triangle face.\r\n\r\n# Example\r\n     var normal = new THREE.Vector3( 0, 1, 0 );\r\n     var color = new THREE.Color( 0xffaa00 );\r\n     var face = new THREE.Face3( 0, 1, 2, normal, color, 0 );",
    "type": "typeof Face3",
    "constructors": [
      {
        "parameters": [
          {
            "name": "a",
            "documentation": "Vertex A index.",
            "type": "number"
          },
          {
            "name": "b",
            "documentation": "Vertex B index.",
            "type": "number"
          },
          {
            "name": "c",
            "documentation": "Vertex C index.",
            "type": "number"
          },
          {
            "name": "normal",
            "documentation": "Face normal or array of vertex normals.",
            "type": "Vector3"
          },
          {
            "name": "color",
            "documentation": "Face color or array of vertex colors.",
            "type": "Color"
          },
          {
            "name": "materialIndex",
            "documentation": "Material index.",
            "type": "number"
          }
        ],
        "returnType": "Face3",
        "documentation": ""
      },
      {
        "parameters": [
          {
            "name": "a",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "b",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "c",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "normal",
            "documentation": "",
            "type": "Vector3"
          },
          {
            "name": "vertexColors",
            "documentation": "",
            "type": "Color[]"
          },
          {
            "name": "materialIndex",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "Face3",
        "documentation": ""
      },
      {
        "parameters": [
          {
            "name": "a",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "b",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "c",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "vertexNormals",
            "documentation": "",
            "type": "Vector3[]"
          },
          {
            "name": "color",
            "documentation": "",
            "type": "Color"
          },
          {
            "name": "materialIndex",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "Face3",
        "documentation": ""
      },
      {
        "parameters": [
          {
            "name": "a",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "b",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "c",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "vertexNormals",
            "documentation": "",
            "type": "Vector3[]"
          },
          {
            "name": "vertexColors",
            "documentation": "",
            "type": "Color[]"
          },
          {
            "name": "materialIndex",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "Face3",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "a",
        "documentation": "Vertex A index.",
        "type": "number"
      },
      {
        "name": "b",
        "documentation": "Vertex B index.",
        "type": "number"
      },
      {
        "name": "c",
        "documentation": "Vertex C index.",
        "type": "number"
      },
      {
        "name": "normal",
        "documentation": "Face normal.",
        "type": "Vector3"
      },
      {
        "name": "vertexNormals",
        "documentation": "Array of 4 vertex normals.",
        "type": "Vector3[]"
      },
      {
        "name": "color",
        "documentation": "Face color.",
        "type": "Color"
      },
      {
        "name": "vertexColors",
        "documentation": "Array of 4 vertex normals.",
        "type": "Color[]"
      },
      {
        "name": "materialIndex",
        "documentation": "Material index (points to {@link Geometry.materials}).",
        "type": "number"
      }
    ],
    "methods": [
      {
        "name": "clone",
        "documentation": "",
        "type": "() => this"
      },
      {
        "name": "copy",
        "documentation": "",
        "type": "(source: this) => this"
      }
    ]
  },
  {
    "name": "Face4",
    "documentation": "",
    "type": "typeof Face4",
    "constructors": [
      {
        "parameters": [
          {
            "name": "a",
            "documentation": "Vertex A index.",
            "type": "number"
          },
          {
            "name": "b",
            "documentation": "Vertex B index.",
            "type": "number"
          },
          {
            "name": "c",
            "documentation": "Vertex C index.",
            "type": "number"
          },
          {
            "name": "normal",
            "documentation": "Face normal or array of vertex normals.",
            "type": "Vector3"
          },
          {
            "name": "color",
            "documentation": "Face color or array of vertex colors.",
            "type": "Color"
          },
          {
            "name": "materialIndex",
            "documentation": "Material index.",
            "type": "number"
          }
        ],
        "returnType": "Face4",
        "documentation": ""
      },
      {
        "parameters": [
          {
            "name": "a",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "b",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "c",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "normal",
            "documentation": "",
            "type": "Vector3"
          },
          {
            "name": "vertexColors",
            "documentation": "",
            "type": "Color[]"
          },
          {
            "name": "materialIndex",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "Face4",
        "documentation": ""
      },
      {
        "parameters": [
          {
            "name": "a",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "b",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "c",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "vertexNormals",
            "documentation": "",
            "type": "Vector3[]"
          },
          {
            "name": "color",
            "documentation": "",
            "type": "Color"
          },
          {
            "name": "materialIndex",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "Face4",
        "documentation": ""
      },
      {
        "parameters": [
          {
            "name": "a",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "b",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "c",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "vertexNormals",
            "documentation": "",
            "type": "Vector3[]"
          },
          {
            "name": "vertexColors",
            "documentation": "",
            "type": "Color[]"
          },
          {
            "name": "materialIndex",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "Face4",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": []
  },
  {
    "name": "Geometry",
    "documentation": "Base class for geometries\r\n\r\n# Example\r\n     var geometry = new THREE.Geometry();\r\n     geometry.vertices.push( new THREE.Vector3( -10, 10, 0 ) );\r\n     geometry.vertices.push( new THREE.Vector3( -10, -10, 0 ) );\r\n     geometry.vertices.push( new THREE.Vector3( 10, -10, 0 ) );\r\n     geometry.faces.push( new THREE.Face3( 0, 1, 2 ) );\r\n     geometry.computeBoundingSphere();",
    "type": "typeof Geometry",
    "constructors": [
      {
        "parameters": [],
        "returnType": "Geometry",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "id",
        "documentation": "Unique number of this geometry instance",
        "type": "number"
      },
      {
        "name": "uuid",
        "documentation": "",
        "type": "string"
      },
      {
        "name": "name",
        "documentation": "Name for this geometry. Default is an empty string.",
        "type": "string"
      },
      {
        "name": "type",
        "documentation": "",
        "type": "string"
      },
      {
        "name": "vertices",
        "documentation": "The array of vertices hold every position of points of the model.\r\nTo signal an update in this array, Geometry.verticesNeedUpdate needs to be set to true.",
        "type": "Vector3[]"
      },
      {
        "name": "colors",
        "documentation": "Array of vertex colors, matching number and order of vertices.\r\nUsed in ParticleSystem, Line and Ribbon.\r\nMeshes use per-face-use-of-vertex colors embedded directly in faces.\r\nTo signal an update in this array, Geometry.colorsNeedUpdate needs to be set to true.",
        "type": "Color[]"
      },
      {
        "name": "faces",
        "documentation": "Array of triangles or/and quads.\r\nThe array of faces describe how each vertex in the model is connected with each other.\r\nTo signal an update in this array, Geometry.elementsNeedUpdate needs to be set to true.",
        "type": "Face3[]"
      },
      {
        "name": "faceVertexUvs",
        "documentation": "Array of face UV layers.\r\nEach UV layer is an array of UV matching order and number of vertices in faces.\r\nTo signal an update in this array, Geometry.uvsNeedUpdate needs to be set to true.",
        "type": "Vector2[][][]"
      },
      {
        "name": "morphTargets",
        "documentation": "Array of morph targets. Each morph target is a Javascript object:\r\n\r\n     { name: \"targetName\", vertices: [ new THREE.Vector3(), ... ] }\r\n\r\nMorph vertices match number and order of primary vertices.",
        "type": "MorphTarget[]"
      },
      {
        "name": "morphNormals",
        "documentation": "Array of morph normals. Morph normals have similar structure as morph targets, each normal set is a Javascript object:\r\n\r\n     morphNormal = { name: \"NormalName\", normals: [ new THREE.Vector3(), ... ] }",
        "type": "MorphNormals[]"
      },
      {
        "name": "skinWeights",
        "documentation": "Array of skinning weights, matching number and order of vertices.",
        "type": "number[]"
      },
      {
        "name": "skinIndices",
        "documentation": "Array of skinning indices, matching number and order of vertices.",
        "type": "number[]"
      },
      {
        "name": "lineDistances",
        "documentation": "",
        "type": "number[]"
      },
      {
        "name": "boundingBox",
        "documentation": "Bounding box.",
        "type": "Box3"
      },
      {
        "name": "boundingSphere",
        "documentation": "Bounding sphere.",
        "type": "Sphere"
      },
      {
        "name": "verticesNeedUpdate",
        "documentation": "Set to true if the vertices array has been updated.",
        "type": "boolean"
      },
      {
        "name": "elementsNeedUpdate",
        "documentation": "Set to true if the faces array has been updated.",
        "type": "boolean"
      },
      {
        "name": "uvsNeedUpdate",
        "documentation": "Set to true if the uvs array has been updated.",
        "type": "boolean"
      },
      {
        "name": "normalsNeedUpdate",
        "documentation": "Set to true if the normals array has been updated.",
        "type": "boolean"
      },
      {
        "name": "colorsNeedUpdate",
        "documentation": "Set to true if the colors array has been updated.",
        "type": "boolean"
      },
      {
        "name": "lineDistancesNeedUpdate",
        "documentation": "Set to true if the linedistances array has been updated.",
        "type": "boolean"
      },
      {
        "name": "groupsNeedUpdate",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "bones",
        "documentation": "",
        "type": "Bone[]"
      },
      {
        "name": "animation",
        "documentation": "",
        "type": "AnimationClip"
      },
      {
        "name": "animations",
        "documentation": "",
        "type": "AnimationClip[]"
      }
    ],
    "methods": [
      {
        "name": "applyMatrix",
        "documentation": "Bakes matrix transform directly into vertex coordinates.",
        "type": "(matrix: Matrix4) => Geometry"
      },
      {
        "name": "rotateX",
        "documentation": "",
        "type": "(angle: number) => Geometry"
      },
      {
        "name": "rotateY",
        "documentation": "",
        "type": "(angle: number) => Geometry"
      },
      {
        "name": "rotateZ",
        "documentation": "",
        "type": "(angle: number) => Geometry"
      },
      {
        "name": "translate",
        "documentation": "",
        "type": "(x: number, y: number, z: number) => Geometry"
      },
      {
        "name": "scale",
        "documentation": "",
        "type": "(x: number, y: number, z: number) => Geometry"
      },
      {
        "name": "lookAt",
        "documentation": "",
        "type": "(vector: Vector3) => void"
      },
      {
        "name": "fromBufferGeometry",
        "documentation": "",
        "type": "(geometry: BufferGeometry) => Geometry"
      },
      {
        "name": "center",
        "documentation": "",
        "type": "() => Vector3"
      },
      {
        "name": "normalize",
        "documentation": "",
        "type": "() => Geometry"
      },
      {
        "name": "computeFaceNormals",
        "documentation": "Computes face normals.",
        "type": "() => void"
      },
      {
        "name": "computeVertexNormals",
        "documentation": "Computes vertex normals by averaging face normals.\r\nFace normals must be existing / computed beforehand.",
        "type": "(areaWeighted?: boolean) => void"
      },
      {
        "name": "computeFlatVertexNormals",
        "documentation": "Compute vertex normals, but duplicating face normals.",
        "type": "() => void"
      },
      {
        "name": "computeMorphNormals",
        "documentation": "Computes morph normals.",
        "type": "() => void"
      },
      {
        "name": "computeLineDistances",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "computeBoundingBox",
        "documentation": "Computes bounding box of the geometry, updating {@link Geometry.boundingBox} attribute.",
        "type": "() => void"
      },
      {
        "name": "computeBoundingSphere",
        "documentation": "Computes bounding sphere of the geometry, updating Geometry.boundingSphere attribute.\r\nNeither bounding boxes or bounding spheres are computed by default. They need to be explicitly computed, otherwise they are null.",
        "type": "() => void"
      },
      {
        "name": "merge",
        "documentation": "",
        "type": "(geometry: Geometry, matrix?: Matrix, materialIndexOffset?: number) => void"
      },
      {
        "name": "mergeMesh",
        "documentation": "",
        "type": "(mesh: Mesh) => void"
      },
      {
        "name": "mergeVertices",
        "documentation": "Checks for duplicate vertices using hashmap.\r\nDuplicated vertices are removed and faces' vertices are updated.",
        "type": "() => number"
      },
      {
        "name": "sortFacesByMaterialIndex",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "toJSON",
        "documentation": "",
        "type": "() => any"
      },
      {
        "name": "clone",
        "documentation": "Creates a new clone of the Geometry.",
        "type": "() => this"
      },
      {
        "name": "copy",
        "documentation": "",
        "type": "(source: this) => this"
      },
      {
        "name": "dispose",
        "documentation": "Removes The object from memory.\r\nDon't forget to call this method when you remove an geometry because it can cuase meomory leaks.",
        "type": "() => void"
      },
      {
        "name": "addEventListener",
        "documentation": "",
        "type": "(type: string, listener: (event: Event) => void) => void"
      },
      {
        "name": "hasEventListener",
        "documentation": "",
        "type": "(type: string, listener: (event: Event) => void) => void"
      },
      {
        "name": "removeEventListener",
        "documentation": "",
        "type": "(type: string, listener: (event: Event) => void) => void"
      },
      {
        "name": "dispatchEvent",
        "documentation": "",
        "type": "(event: { [attachment: string]: any; type: string; }) => void"
      }
    ]
  },
  {
    "name": "InstancedBufferAttribute",
    "documentation": "",
    "type": "typeof InstancedBufferAttribute",
    "constructors": [
      {
        "parameters": [
          {
            "name": "data",
            "documentation": "",
            "type": "ArrayLike<number>"
          },
          {
            "name": "itemSize",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "meshPerAttribute",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "InstancedBufferAttribute",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "meshPerAttribute",
        "documentation": "",
        "type": "number"
      }
    ],
    "methods": []
  },
  {
    "name": "InstancedBufferGeometry",
    "documentation": "",
    "type": "typeof InstancedBufferGeometry",
    "constructors": [
      {
        "parameters": [],
        "returnType": "InstancedBufferGeometry",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "groups",
        "documentation": "",
        "type": "{ start: number; count: number; instances: number; }[]"
      },
      {
        "name": "maxInstancedCount",
        "documentation": "",
        "type": "number"
      }
    ],
    "methods": [
      {
        "name": "addGroup",
        "documentation": "",
        "type": "(start: number, count: number, instances: number) => void"
      }
    ]
  },
  {
    "name": "InterleavedBuffer",
    "documentation": "",
    "type": "typeof InterleavedBuffer",
    "constructors": [
      {
        "parameters": [
          {
            "name": "array",
            "documentation": "",
            "type": "ArrayLike<number>"
          },
          {
            "name": "stride",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "InterleavedBuffer",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "array",
        "documentation": "",
        "type": "ArrayLike<number>"
      },
      {
        "name": "stride",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "dynamic",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "updateRange",
        "documentation": "",
        "type": "{ offset: number; count: number; }"
      },
      {
        "name": "version",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "length",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "count",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "needsUpdate",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "clone",
        "documentation": "",
        "type": "{ (): this; (): this; }"
      }
    ],
    "methods": [
      {
        "name": "setDynamic",
        "documentation": "",
        "type": "(dynamic: boolean) => InterleavedBuffer"
      },
      {
        "name": "copy",
        "documentation": "",
        "type": "(source: this) => this"
      },
      {
        "name": "copyAt",
        "documentation": "",
        "type": "(index1: number, attribute: InterleavedBufferAttribute, index2: number) => InterleavedBuffer"
      },
      {
        "name": "set",
        "documentation": "",
        "type": "(value: ArrayLike<number>, index: number) => InterleavedBuffer"
      }
    ]
  },
  {
    "name": "InstancedInterleavedBuffer",
    "documentation": "",
    "type": "typeof InstancedInterleavedBuffer",
    "constructors": [
      {
        "parameters": [
          {
            "name": "array",
            "documentation": "",
            "type": "ArrayLike<number>"
          },
          {
            "name": "stride",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "meshPerAttribute",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "InstancedInterleavedBuffer",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "meshPerAttribute",
        "documentation": "",
        "type": "number"
      }
    ],
    "methods": []
  },
  {
    "name": "InterleavedBufferAttribute",
    "documentation": "",
    "type": "typeof InterleavedBufferAttribute",
    "constructors": [
      {
        "parameters": [
          {
            "name": "interleavedBuffer",
            "documentation": "",
            "type": "InterleavedBuffer"
          },
          {
            "name": "itemSize",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "offset",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "normalized",
            "documentation": "",
            "type": "boolean"
          }
        ],
        "returnType": "InterleavedBufferAttribute",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "uuid",
        "documentation": "",
        "type": "string"
      },
      {
        "name": "data",
        "documentation": "",
        "type": "InterleavedBuffer"
      },
      {
        "name": "itemSize",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "offset",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "count",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "normalized",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "array",
        "documentation": "",
        "type": "any[]"
      },
      {
        "name": "length",
        "documentation": "",
        "type": "number"
      }
    ],
    "methods": [
      {
        "name": "getX",
        "documentation": "",
        "type": "(index: number) => number"
      },
      {
        "name": "setX",
        "documentation": "",
        "type": "(index: number, x: number) => InterleavedBufferAttribute"
      },
      {
        "name": "getY",
        "documentation": "",
        "type": "(index: number) => number"
      },
      {
        "name": "setY",
        "documentation": "",
        "type": "(index: number, y: number) => InterleavedBufferAttribute"
      },
      {
        "name": "getZ",
        "documentation": "",
        "type": "(index: number) => number"
      },
      {
        "name": "setZ",
        "documentation": "",
        "type": "(index: number, z: number) => InterleavedBufferAttribute"
      },
      {
        "name": "getW",
        "documentation": "",
        "type": "(index: number) => number"
      },
      {
        "name": "setW",
        "documentation": "",
        "type": "(index: number, z: number) => InterleavedBufferAttribute"
      },
      {
        "name": "setXY",
        "documentation": "",
        "type": "(index: number, x: number, y: number) => InterleavedBufferAttribute"
      },
      {
        "name": "setXYZ",
        "documentation": "",
        "type": "(index: number, x: number, y: number, z: number) => InterleavedBufferAttribute"
      },
      {
        "name": "setXYZW",
        "documentation": "",
        "type": "(index: number, x: number, y: number, z: number, w: number) => InterleavedBufferAttribute"
      }
    ]
  },
  {
    "name": "Object3D",
    "documentation": "Base class for scene graph objects",
    "type": "typeof Object3D",
    "constructors": [
      {
        "parameters": [],
        "returnType": "Object3D",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "id",
        "documentation": "Unique number of this object instance.",
        "type": "number"
      },
      {
        "name": "uuid",
        "documentation": "",
        "type": "string"
      },
      {
        "name": "name",
        "documentation": "Optional name of the object (doesn't need to be unique).",
        "type": "string"
      },
      {
        "name": "type",
        "documentation": "",
        "type": "string"
      },
      {
        "name": "parent",
        "documentation": "Object's parent in the scene graph.",
        "type": "Object3D"
      },
      {
        "name": "children",
        "documentation": "Array with object's children.",
        "type": "Object3D[]"
      },
      {
        "name": "up",
        "documentation": "Up direction.",
        "type": "Vector3"
      },
      {
        "name": "position",
        "documentation": "Object's local position.",
        "type": "Vector3"
      },
      {
        "name": "rotation",
        "documentation": "Object's local rotation (Euler angles), in radians.",
        "type": "Euler"
      },
      {
        "name": "quaternion",
        "documentation": "Global rotation.",
        "type": "Quaternion"
      },
      {
        "name": "scale",
        "documentation": "Object's local scale.",
        "type": "Vector3"
      },
      {
        "name": "modelViewMatrix",
        "documentation": "",
        "type": "Matrix4"
      },
      {
        "name": "normalMatrix",
        "documentation": "",
        "type": "Matrix3"
      },
      {
        "name": "matrix",
        "documentation": "Local transform.",
        "type": "Matrix4"
      },
      {
        "name": "matrixWorld",
        "documentation": "The global transform of the object. If the Object3d has no parent, then it's identical to the local transform.",
        "type": "Matrix4"
      },
      {
        "name": "matrixAutoUpdate",
        "documentation": "When this is set, it calculates the matrix of position, (rotation or quaternion) and scale every frame and also recalculates the matrixWorld property.",
        "type": "boolean"
      },
      {
        "name": "matrixWorldNeedsUpdate",
        "documentation": "When this is set, it calculates the matrixWorld in that frame and resets this property to false.",
        "type": "boolean"
      },
      {
        "name": "layers",
        "documentation": "",
        "type": "Layers"
      },
      {
        "name": "visible",
        "documentation": "Object gets rendered if true.",
        "type": "boolean"
      },
      {
        "name": "castShadow",
        "documentation": "Gets rendered into shadow map.",
        "type": "boolean"
      },
      {
        "name": "receiveShadow",
        "documentation": "Material gets baked in shadow receiving.",
        "type": "boolean"
      },
      {
        "name": "frustumCulled",
        "documentation": "When this is set, it checks every frame if the object is in the frustum of the camera. Otherwise the object gets drawn every frame even if it isn't visible.",
        "type": "boolean"
      },
      {
        "name": "renderOrder",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "userData",
        "documentation": "An object that can be used to store custom data about the Object3d. It should not hold references to functions as these will not be cloned.",
        "type": "any"
      },
      {
        "name": "eulerOrder",
        "documentation": "",
        "type": "string"
      }
    ],
    "methods": [
      {
        "name": "onBeforeRender",
        "documentation": "Calls before rendering object",
        "type": "(renderer: WebGLRenderer, scene: Scene, camera: Camera, geometry: BufferGeometry | Geometry, mate..."
      },
      {
        "name": "onAfterRender",
        "documentation": "Calls after rendering object",
        "type": "(renderer: WebGLRenderer, scene: Scene, camera: Camera, geometry: BufferGeometry | Geometry, mate..."
      },
      {
        "name": "applyMatrix",
        "documentation": "This updates the position, rotation and scale with the matrix.",
        "type": "(matrix: Matrix4) => void"
      },
      {
        "name": "setRotationFromAxisAngle",
        "documentation": "",
        "type": "(axis: Vector3, angle: number) => void"
      },
      {
        "name": "setRotationFromEuler",
        "documentation": "",
        "type": "(euler: Euler) => void"
      },
      {
        "name": "setRotationFromMatrix",
        "documentation": "",
        "type": "(m: Matrix4) => void"
      },
      {
        "name": "setRotationFromQuaternion",
        "documentation": "",
        "type": "(q: Quaternion) => void"
      },
      {
        "name": "rotateOnAxis",
        "documentation": "Rotate an object along an axis in object space. The axis is assumed to be normalized.",
        "type": "(axis: Vector3, angle: number) => Object3D"
      },
      {
        "name": "rotateX",
        "documentation": "",
        "type": "(angle: number) => Object3D"
      },
      {
        "name": "rotateY",
        "documentation": "",
        "type": "(angle: number) => Object3D"
      },
      {
        "name": "rotateZ",
        "documentation": "",
        "type": "(angle: number) => Object3D"
      },
      {
        "name": "translateOnAxis",
        "documentation": "",
        "type": "(axis: Vector3, distance: number) => Object3D"
      },
      {
        "name": "translateX",
        "documentation": "Translates object along x axis by distance.",
        "type": "(distance: number) => Object3D"
      },
      {
        "name": "translateY",
        "documentation": "Translates object along y axis by distance.",
        "type": "(distance: number) => Object3D"
      },
      {
        "name": "translateZ",
        "documentation": "Translates object along z axis by distance.",
        "type": "(distance: number) => Object3D"
      },
      {
        "name": "localToWorld",
        "documentation": "Updates the vector from local space to world space.",
        "type": "(vector: Vector3) => Vector3"
      },
      {
        "name": "worldToLocal",
        "documentation": "Updates the vector from world space to local space.",
        "type": "(vector: Vector3) => Vector3"
      },
      {
        "name": "lookAt",
        "documentation": "Rotates object to face point in space.",
        "type": "(vector: Vector3) => void"
      },
      {
        "name": "add",
        "documentation": "Adds object as child of this object.",
        "type": "(...object: Object3D[]) => void"
      },
      {
        "name": "remove",
        "documentation": "Removes object as child of this object.",
        "type": "(object: Object3D) => void"
      },
      {
        "name": "getObjectById",
        "documentation": "Searches through the object's children and returns the first with a matching id, optionally recursive.",
        "type": "(id: number) => Object3D"
      },
      {
        "name": "getObjectByName",
        "documentation": "Searches through the object's children and returns the first with a matching name, optionally recursive.",
        "type": "(name: string) => Object3D"
      },
      {
        "name": "getObjectByProperty",
        "documentation": "",
        "type": "(name: string, value: string) => Object3D"
      },
      {
        "name": "getWorldPosition",
        "documentation": "",
        "type": "(optionalTarget?: Vector3) => Vector3"
      },
      {
        "name": "getWorldQuaternion",
        "documentation": "",
        "type": "(optionalTarget?: Quaternion) => Quaternion"
      },
      {
        "name": "getWorldRotation",
        "documentation": "",
        "type": "(optionalTarget?: Euler) => Euler"
      },
      {
        "name": "getWorldScale",
        "documentation": "",
        "type": "(optionalTarget?: Vector3) => Vector3"
      },
      {
        "name": "getWorldDirection",
        "documentation": "",
        "type": "(optionalTarget?: Vector3) => Vector3"
      },
      {
        "name": "raycast",
        "documentation": "",
        "type": "(raycaster: Raycaster, intersects: any) => void"
      },
      {
        "name": "traverse",
        "documentation": "",
        "type": "(callback: (object: Object3D) => any) => void"
      },
      {
        "name": "traverseVisible",
        "documentation": "",
        "type": "(callback: (object: Object3D) => any) => void"
      },
      {
        "name": "traverseAncestors",
        "documentation": "",
        "type": "(callback: (object: Object3D) => any) => void"
      },
      {
        "name": "updateMatrix",
        "documentation": "Updates local transform.",
        "type": "() => void"
      },
      {
        "name": "updateMatrixWorld",
        "documentation": "Updates global transform of the object and its children.",
        "type": "(force: boolean) => void"
      },
      {
        "name": "toJSON",
        "documentation": "",
        "type": "(meta?: { geometries: any; materials: any; textures: any; images: any; }) => any"
      },
      {
        "name": "clone",
        "documentation": "",
        "type": "(recursive?: boolean) => this"
      },
      {
        "name": "copy",
        "documentation": "",
        "type": "(source: this, recursive?: boolean) => this"
      },
      {
        "name": "getChildByName",
        "documentation": "",
        "type": "(name: string) => Object3D"
      },
      {
        "name": "translate",
        "documentation": "",
        "type": "(distance: number, axis: Vector3) => Object3D"
      }
    ]
  },
  {
    "name": "Raycaster",
    "documentation": "",
    "type": "typeof Raycaster",
    "constructors": [
      {
        "parameters": [
          {
            "name": "origin",
            "documentation": "",
            "type": "Vector3"
          },
          {
            "name": "direction",
            "documentation": "",
            "type": "Vector3"
          },
          {
            "name": "near",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "far",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "Raycaster",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "ray",
        "documentation": "",
        "type": "Ray"
      },
      {
        "name": "near",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "far",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "params",
        "documentation": "",
        "type": "RaycasterParameters"
      },
      {
        "name": "precision",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "linePrecision",
        "documentation": "",
        "type": "number"
      }
    ],
    "methods": [
      {
        "name": "set",
        "documentation": "",
        "type": "(origin: Vector3, direction: Vector3) => void"
      },
      {
        "name": "setFromCamera",
        "documentation": "",
        "type": "(coords: { x: number; y: number; }, camera: Camera) => void"
      },
      {
        "name": "intersectObject",
        "documentation": "",
        "type": "(object: Object3D, recursive?: boolean) => Intersection[]"
      },
      {
        "name": "intersectObjects",
        "documentation": "",
        "type": "(objects: Object3D[], recursive?: boolean) => Intersection[]"
      }
    ]
  },
  {
    "name": "Layers",
    "documentation": "",
    "type": "typeof Layers",
    "constructors": [
      {
        "parameters": [],
        "returnType": "Layers",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "mask",
        "documentation": "",
        "type": "number"
      }
    ],
    "methods": [
      {
        "name": "set",
        "documentation": "",
        "type": "(channel: number) => void"
      },
      {
        "name": "enable",
        "documentation": "",
        "type": "(channel: number) => void"
      },
      {
        "name": "toggle",
        "documentation": "",
        "type": "(channel: number) => void"
      },
      {
        "name": "disable",
        "documentation": "",
        "type": "(channel: number) => void"
      },
      {
        "name": "test",
        "documentation": "",
        "type": "(layers: Layers) => boolean"
      }
    ]
  },
  {
    "name": "Font",
    "documentation": "",
    "type": "typeof Font",
    "constructors": [
      {
        "parameters": [
          {
            "name": "jsondata",
            "documentation": "",
            "type": "string"
          }
        ],
        "returnType": "Font",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "data",
        "documentation": "",
        "type": "string"
      }
    ],
    "methods": [
      {
        "name": "generateShapes",
        "documentation": "",
        "type": "(text: string, size: number, divisions: number) => any[]"
      }
    ]
  },
  {
    "name": "Light",
    "documentation": "Abstract base class for lights.",
    "type": "typeof Light",
    "constructors": [
      {
        "parameters": [
          {
            "name": "hex",
            "documentation": "",
            "type": "string | number"
          },
          {
            "name": "intensity",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "Light",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "color",
        "documentation": "",
        "type": "Color"
      },
      {
        "name": "intensity",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "receiveShadow",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "shadow",
        "documentation": "",
        "type": "LightShadow"
      },
      {
        "name": "shadowCameraFov",
        "documentation": "",
        "type": "any"
      },
      {
        "name": "shadowCameraLeft",
        "documentation": "",
        "type": "any"
      },
      {
        "name": "shadowCameraRight",
        "documentation": "",
        "type": "any"
      },
      {
        "name": "shadowCameraTop",
        "documentation": "",
        "type": "any"
      },
      {
        "name": "shadowCameraBottom",
        "documentation": "",
        "type": "any"
      },
      {
        "name": "shadowCameraNear",
        "documentation": "",
        "type": "any"
      },
      {
        "name": "shadowCameraFar",
        "documentation": "",
        "type": "any"
      },
      {
        "name": "shadowBias",
        "documentation": "",
        "type": "any"
      },
      {
        "name": "shadowMapWidth",
        "documentation": "",
        "type": "any"
      },
      {
        "name": "shadowMapHeight",
        "documentation": "",
        "type": "any"
      }
    ],
    "methods": []
  },
  {
    "name": "LightShadow",
    "documentation": "",
    "type": "typeof LightShadow",
    "constructors": [
      {
        "parameters": [
          {
            "name": "camera",
            "documentation": "",
            "type": "Camera"
          }
        ],
        "returnType": "LightShadow",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "camera",
        "documentation": "",
        "type": "Camera"
      },
      {
        "name": "bias",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "radius",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "mapSize",
        "documentation": "",
        "type": "Vector2"
      },
      {
        "name": "map",
        "documentation": "",
        "type": "RenderTarget"
      },
      {
        "name": "matrix",
        "documentation": "",
        "type": "Matrix4"
      }
    ],
    "methods": [
      {
        "name": "copy",
        "documentation": "",
        "type": "(source: this) => this"
      },
      {
        "name": "clone",
        "documentation": "",
        "type": "(recursive?: boolean) => this"
      },
      {
        "name": "toJSON",
        "documentation": "",
        "type": "() => any"
      }
    ]
  },
  {
    "name": "AmbientLight",
    "documentation": "This light's color gets applied to all the objects in the scene globally.\r\n\r\n# example\r\n     var light = new THREE.AmbientLight( 0x404040 ); // soft white light\r\n     scene.add( light );",
    "type": "typeof AmbientLight",
    "constructors": [
      {
        "parameters": [
          {
            "name": "hex",
            "documentation": "Numeric value of the RGB component of the color.",
            "type": "string | number"
          },
          {
            "name": "intensity",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "AmbientLight",
        "documentation": "This creates a Ambientlight with a color."
      }
    ],
    "properties": [
      {
        "name": "castShadow",
        "documentation": "",
        "type": "boolean"
      }
    ],
    "methods": []
  },
  {
    "name": "DirectionalLight",
    "documentation": "Affects objects using MeshLambertMaterial or MeshPhongMaterial.",
    "type": "typeof DirectionalLight",
    "constructors": [
      {
        "parameters": [
          {
            "name": "hex",
            "documentation": "",
            "type": "string | number"
          },
          {
            "name": "intensity",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "DirectionalLight",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "target",
        "documentation": "Target used for shadow camera orientation.",
        "type": "Object3D"
      },
      {
        "name": "intensity",
        "documentation": "Light's intensity.\r\nDefault — 1.0.",
        "type": "number"
      },
      {
        "name": "shadow",
        "documentation": "",
        "type": "DirectionalLightShadow"
      }
    ],
    "methods": []
  },
  {
    "name": "DirectionalLightShadow",
    "documentation": "",
    "type": "typeof DirectionalLightShadow",
    "constructors": [
      {
        "parameters": [
          {
            "name": "camera",
            "documentation": "",
            "type": "Camera"
          }
        ],
        "returnType": "DirectionalLightShadow",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": []
  },
  {
    "name": "HemisphereLight",
    "documentation": "",
    "type": "typeof HemisphereLight",
    "constructors": [
      {
        "parameters": [
          {
            "name": "skyColorHex",
            "documentation": "",
            "type": "string | number"
          },
          {
            "name": "groundColorHex",
            "documentation": "",
            "type": "string | number"
          },
          {
            "name": "intensity",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "HemisphereLight",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "groundColor",
        "documentation": "",
        "type": "Color"
      },
      {
        "name": "intensity",
        "documentation": "",
        "type": "number"
      }
    ],
    "methods": []
  },
  {
    "name": "PointLight",
    "documentation": "Affects objects using {@link MeshLambertMaterial} or {@link MeshPhongMaterial}.",
    "type": "typeof PointLight",
    "constructors": [
      {
        "parameters": [
          {
            "name": "hex",
            "documentation": "",
            "type": "string | number"
          },
          {
            "name": "intensity",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "distance",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "decay",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "PointLight",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "intensity",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "distance",
        "documentation": "If non-zero, light will attenuate linearly from maximum intensity at light position down to zero at distance.\r\nDefault — 0.0.",
        "type": "number"
      },
      {
        "name": "decay",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "shadow",
        "documentation": "",
        "type": "PointLightShadow"
      },
      {
        "name": "power",
        "documentation": "",
        "type": "number"
      }
    ],
    "methods": []
  },
  {
    "name": "PointLightShadow",
    "documentation": "",
    "type": "typeof PointLightShadow",
    "constructors": [
      {
        "parameters": [
          {
            "name": "camera",
            "documentation": "",
            "type": "Camera"
          }
        ],
        "returnType": "PointLightShadow",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": []
  },
  {
    "name": "SpotLight",
    "documentation": "A point light that can cast shadow in one direction.",
    "type": "typeof SpotLight",
    "constructors": [
      {
        "parameters": [
          {
            "name": "hex",
            "documentation": "",
            "type": "string | number"
          },
          {
            "name": "intensity",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "distance",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "angle",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "exponent",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "decay",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "SpotLight",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "target",
        "documentation": "Spotlight focus points at target.position.\r\nDefault position — (0,0,0).",
        "type": "Object3D"
      },
      {
        "name": "intensity",
        "documentation": "Light's intensity.\r\nDefault — 1.0.",
        "type": "number"
      },
      {
        "name": "distance",
        "documentation": "If non-zero, light will attenuate linearly from maximum intensity at light position down to zero at distance.\r\nDefault — 0.0.",
        "type": "number"
      },
      {
        "name": "angle",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "exponent",
        "documentation": "Rapidity of the falloff of light from its target direction.\r\nDefault — 10.0.",
        "type": "number"
      },
      {
        "name": "decay",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "shadow",
        "documentation": "",
        "type": "SpotLightShadow"
      },
      {
        "name": "power",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "penumbra",
        "documentation": "",
        "type": "number"
      }
    ],
    "methods": []
  },
  {
    "name": "SpotLightShadow",
    "documentation": "",
    "type": "typeof SpotLightShadow",
    "constructors": [
      {
        "parameters": [
          {
            "name": "camera",
            "documentation": "",
            "type": "Camera"
          }
        ],
        "returnType": "SpotLightShadow",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": []
  },
  {
    "name": "Loader",
    "documentation": "Base class for implementing loaders.\r\n\r\nEvents:\r\n     load\r\n         Dispatched when the image has completed loading\r\n         content — loaded image\r\n\r\n     error\r\n\r\n          Dispatched when the image can't be loaded\r\n          message — error message",
    "type": "typeof Loader",
    "constructors": [
      {
        "parameters": [],
        "returnType": "Loader",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "crossOrigin",
        "documentation": "default — null.\r\nIf set, assigns the crossOrigin attribute of the image to the value of crossOrigin, prior to starting the load.",
        "type": "string"
      }
    ],
    "methods": [
      {
        "name": "onLoadStart",
        "documentation": "Will be called when load starts.\r\nThe default is a function with empty body.",
        "type": "() => void"
      },
      {
        "name": "onLoadProgress",
        "documentation": "Will be called while load progresses.\r\nThe default is a function with empty body.",
        "type": "() => void"
      },
      {
        "name": "onLoadComplete",
        "documentation": "Will be called when load completes.\r\nThe default is a function with empty body.",
        "type": "() => void"
      },
      {
        "name": "extractUrlBase",
        "documentation": "",
        "type": "(url: string) => string"
      },
      {
        "name": "initMaterials",
        "documentation": "",
        "type": "(materials: Material[], texturePath: string) => Material[]"
      },
      {
        "name": "createMaterial",
        "documentation": "",
        "type": "(m: Material, texturePath: string, crossOrigin?: string) => boolean"
      }
    ]
  },
  {
    "name": "FileLoader",
    "documentation": "",
    "type": "typeof FileLoader",
    "constructors": [
      {
        "parameters": [
          {
            "name": "manager",
            "documentation": "",
            "type": "LoadingManager"
          }
        ],
        "returnType": "FileLoader",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "manager",
        "documentation": "",
        "type": "LoadingManager"
      },
      {
        "name": "mimeType",
        "documentation": "",
        "type": "MimeType"
      },
      {
        "name": "path",
        "documentation": "",
        "type": "string"
      },
      {
        "name": "responseType",
        "documentation": "",
        "type": "string"
      },
      {
        "name": "withCredentials",
        "documentation": "",
        "type": "string"
      }
    ],
    "methods": [
      {
        "name": "load",
        "documentation": "",
        "type": "(url: string, onLoad?: (responseText: string) => void, onProgress?: (request: ProgressEvent) => v..."
      },
      {
        "name": "setMimeType",
        "documentation": "",
        "type": "(mimeType: MimeType) => FileLoader"
      },
      {
        "name": "setPath",
        "documentation": "",
        "type": "(path: string) => FileLoader"
      },
      {
        "name": "setResponseType",
        "documentation": "",
        "type": "(responseType: string) => FileLoader"
      },
      {
        "name": "setWithCredentials",
        "documentation": "",
        "type": "(value: string) => FileLoader"
      }
    ]
  },
  {
    "name": "FontLoader",
    "documentation": "",
    "type": "typeof FontLoader",
    "constructors": [
      {
        "parameters": [
          {
            "name": "manager",
            "documentation": "",
            "type": "LoadingManager"
          }
        ],
        "returnType": "FontLoader",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "manager",
        "documentation": "",
        "type": "LoadingManager"
      }
    ],
    "methods": [
      {
        "name": "load",
        "documentation": "",
        "type": "(url: string, onLoad?: (responseFont: Font) => void, onProgress?: (event: ProgressEvent) => void,..."
      },
      {
        "name": "parse",
        "documentation": "",
        "type": "(json: string) => Font"
      }
    ]
  },
  {
    "name": "ImageLoader",
    "documentation": "A loader for loading an image.\r\nUnlike other loaders, this one emits events instead of using predefined callbacks. So if you're interested in getting notified when things happen, you need to add listeners to the object.",
    "type": "typeof ImageLoader",
    "constructors": [
      {
        "parameters": [
          {
            "name": "manager",
            "documentation": "",
            "type": "LoadingManager"
          }
        ],
        "returnType": "ImageLoader",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "manager",
        "documentation": "",
        "type": "LoadingManager"
      },
      {
        "name": "crossOrigin",
        "documentation": "",
        "type": "string"
      },
      {
        "name": "withCredentials",
        "documentation": "",
        "type": "string"
      },
      {
        "name": "path",
        "documentation": "",
        "type": "string"
      }
    ],
    "methods": [
      {
        "name": "load",
        "documentation": "Begin loading from url",
        "type": "(url: string, onLoad?: (image: HTMLImageElement) => void, onProgress?: (event: ProgressEvent) => ..."
      },
      {
        "name": "setCrossOrigin",
        "documentation": "",
        "type": "(crossOrigin: string) => ImageLoader"
      },
      {
        "name": "setWithCredentials",
        "documentation": "",
        "type": "(value: string) => ImageLoader"
      },
      {
        "name": "setPath",
        "documentation": "",
        "type": "(value: string) => ImageLoader"
      }
    ]
  },
  {
    "name": "JSONLoader",
    "documentation": "A loader for loading objects in JSON format.",
    "type": "typeof JSONLoader",
    "constructors": [
      {
        "parameters": [
          {
            "name": "manager",
            "documentation": "",
            "type": "LoadingManager"
          }
        ],
        "returnType": "JSONLoader",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "manager",
        "documentation": "",
        "type": "LoadingManager"
      },
      {
        "name": "withCredentials",
        "documentation": "",
        "type": "boolean"
      }
    ],
    "methods": [
      {
        "name": "load",
        "documentation": "",
        "type": "(url: string, onLoad?: (geometry: Geometry, materials: Material[]) => void, onProgress?: (event: ..."
      },
      {
        "name": "setTexturePath",
        "documentation": "",
        "type": "(value: string) => void"
      },
      {
        "name": "parse",
        "documentation": "",
        "type": "(json: any, texturePath?: string) => { geometry: Geometry; materials?: Material[]; }"
      }
    ]
  },
  {
    "name": "LoadingManager",
    "documentation": "Handles and keeps track of loaded and pending data.",
    "type": "typeof LoadingManager",
    "constructors": [
      {
        "parameters": [
          {
            "name": "onLoad",
            "documentation": "",
            "type": "() => void"
          },
          {
            "name": "onProgress",
            "documentation": "",
            "type": "(url: string, loaded: number, total: number) => void"
          },
          {
            "name": "onError",
            "documentation": "",
            "type": "() => void"
          }
        ],
        "returnType": "LoadingManager",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": [
      {
        "name": "onStart",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "onLoad",
        "documentation": "Will be called when load starts.\r\nThe default is a function with empty body.",
        "type": "() => void"
      },
      {
        "name": "onProgress",
        "documentation": "Will be called while load progresses.\r\nThe default is a function with empty body.",
        "type": "(item: any, loaded: number, total: number) => void"
      },
      {
        "name": "onError",
        "documentation": "Will be called when each element in the scene completes loading.\r\nThe default is a function with empty body.",
        "type": "() => void"
      },
      {
        "name": "itemStart",
        "documentation": "",
        "type": "(url: string) => void"
      },
      {
        "name": "itemEnd",
        "documentation": "",
        "type": "(url: string) => void"
      },
      {
        "name": "itemError",
        "documentation": "",
        "type": "(url: string) => void"
      }
    ]
  },
  {
    "name": "BufferGeometryLoader",
    "documentation": "",
    "type": "typeof BufferGeometryLoader",
    "constructors": [
      {
        "parameters": [
          {
            "name": "manager",
            "documentation": "",
            "type": "LoadingManager"
          }
        ],
        "returnType": "BufferGeometryLoader",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "manager",
        "documentation": "",
        "type": "LoadingManager"
      }
    ],
    "methods": [
      {
        "name": "load",
        "documentation": "",
        "type": "(url: string, onLoad: (bufferGeometry: BufferGeometry) => void, onProgress?: (event: any) => void..."
      },
      {
        "name": "parse",
        "documentation": "",
        "type": "(json: any) => BufferGeometry"
      }
    ]
  },
  {
    "name": "MaterialLoader",
    "documentation": "",
    "type": "typeof MaterialLoader",
    "constructors": [
      {
        "parameters": [
          {
            "name": "manager",
            "documentation": "",
            "type": "LoadingManager"
          }
        ],
        "returnType": "MaterialLoader",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "manager",
        "documentation": "",
        "type": "LoadingManager"
      },
      {
        "name": "textures",
        "documentation": "",
        "type": "{ [key: string]: Texture; }"
      }
    ],
    "methods": [
      {
        "name": "load",
        "documentation": "",
        "type": "(url: string, onLoad: (material: Material) => void) => void"
      },
      {
        "name": "setTextures",
        "documentation": "",
        "type": "(textures: { [key: string]: Texture; }) => void"
      },
      {
        "name": "getTexture",
        "documentation": "",
        "type": "(name: string) => Texture"
      },
      {
        "name": "parse",
        "documentation": "",
        "type": "(json: any) => Material"
      }
    ]
  },
  {
    "name": "ObjectLoader",
    "documentation": "",
    "type": "typeof ObjectLoader",
    "constructors": [
      {
        "parameters": [
          {
            "name": "manager",
            "documentation": "",
            "type": "LoadingManager"
          }
        ],
        "returnType": "ObjectLoader",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "manager",
        "documentation": "",
        "type": "LoadingManager"
      },
      {
        "name": "texturePass",
        "documentation": "",
        "type": "string"
      },
      {
        "name": "crossOrigin",
        "documentation": "",
        "type": "string"
      },
      {
        "name": "parse",
        "documentation": "",
        "type": "<T extends Object3D>(json: any, onLoad?: (object: Object3D) => void) => T"
      },
      {
        "name": "parseObject",
        "documentation": "",
        "type": "<T extends Object3D>(data: any, geometries: any[], materials: Material[]) => T"
      }
    ],
    "methods": [
      {
        "name": "load",
        "documentation": "",
        "type": "(url: string, onLoad?: (object: Object3D) => void, onProgress?: (event: ProgressEvent) => void, o..."
      },
      {
        "name": "setTexturePath",
        "documentation": "",
        "type": "(value: string) => void"
      },
      {
        "name": "setCrossOrigin",
        "documentation": "",
        "type": "(crossOrigin: string) => void"
      },
      {
        "name": "parseGeometries",
        "documentation": "",
        "type": "(json: any) => any[]"
      },
      {
        "name": "parseMaterials",
        "documentation": "",
        "type": "(json: any, textures: Texture[]) => Material[]"
      },
      {
        "name": "parseAnimations",
        "documentation": "",
        "type": "(json: any) => AnimationClip[]"
      },
      {
        "name": "parseImages",
        "documentation": "",
        "type": "(json: any, onLoad: () => void) => { [key: string]: HTMLImageElement; }"
      },
      {
        "name": "parseTextures",
        "documentation": "",
        "type": "(json: any, images: any) => Texture[]"
      }
    ]
  },
  {
    "name": "TextureLoader",
    "documentation": "Class for loading a texture.\r\nUnlike other loaders, this one emits events instead of using predefined callbacks. So if you're interested in getting notified when things happen, you need to add listeners to the object.",
    "type": "typeof TextureLoader",
    "constructors": [
      {
        "parameters": [
          {
            "name": "manager",
            "documentation": "",
            "type": "LoadingManager"
          }
        ],
        "returnType": "TextureLoader",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "manager",
        "documentation": "",
        "type": "LoadingManager"
      },
      {
        "name": "crossOrigin",
        "documentation": "",
        "type": "string"
      },
      {
        "name": "withCredentials",
        "documentation": "",
        "type": "string"
      },
      {
        "name": "path",
        "documentation": "",
        "type": "string"
      }
    ],
    "methods": [
      {
        "name": "load",
        "documentation": "Begin loading from url",
        "type": "(url: string, onLoad?: (texture: Texture) => void, onProgress?: (event: ProgressEvent) => void, o..."
      },
      {
        "name": "setCrossOrigin",
        "documentation": "",
        "type": "(crossOrigin: string) => TextureLoader"
      },
      {
        "name": "setWithCredentials",
        "documentation": "",
        "type": "(value: string) => TextureLoader"
      },
      {
        "name": "setPath",
        "documentation": "",
        "type": "(path: string) => TextureLoader"
      }
    ]
  },
  {
    "name": "CubeTextureLoader",
    "documentation": "",
    "type": "typeof CubeTextureLoader",
    "constructors": [
      {
        "parameters": [
          {
            "name": "manager",
            "documentation": "",
            "type": "LoadingManager"
          }
        ],
        "returnType": "CubeTextureLoader",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "manager",
        "documentation": "",
        "type": "LoadingManager"
      },
      {
        "name": "corssOrigin",
        "documentation": "",
        "type": "string"
      },
      {
        "name": "path",
        "documentation": "",
        "type": "string"
      }
    ],
    "methods": [
      {
        "name": "load",
        "documentation": "",
        "type": "(urls: string[], onLoad?: (texture: CubeTexture) => void, onProgress?: (event: ProgressEvent) => ..."
      },
      {
        "name": "setCrossOrigin",
        "documentation": "",
        "type": "(crossOrigin: string) => CubeTextureLoader"
      },
      {
        "name": "setPath",
        "documentation": "",
        "type": "(path: string) => CubeTextureLoader"
      }
    ]
  },
  {
    "name": "DataTextureLoader",
    "documentation": "",
    "type": "typeof DataTextureLoader",
    "constructors": [
      {
        "parameters": [
          {
            "name": "manager",
            "documentation": "",
            "type": "LoadingManager"
          }
        ],
        "returnType": "DataTextureLoader",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "manager",
        "documentation": "",
        "type": "LoadingManager"
      }
    ],
    "methods": [
      {
        "name": "load",
        "documentation": "",
        "type": "(url: string, onLoad: (dataTexture: DataTexture) => void, onProgress?: (event: ProgressEvent) => ..."
      }
    ]
  },
  {
    "name": "BinaryTextureLoader",
    "documentation": "",
    "type": "typeof BinaryTextureLoader",
    "constructors": [
      {
        "parameters": [
          {
            "name": "manager",
            "documentation": "",
            "type": "LoadingManager"
          }
        ],
        "returnType": "BinaryTextureLoader",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": []
  },
  {
    "name": "CompressedTextureLoader",
    "documentation": "",
    "type": "typeof CompressedTextureLoader",
    "constructors": [
      {
        "parameters": [
          {
            "name": "manager",
            "documentation": "",
            "type": "LoadingManager"
          }
        ],
        "returnType": "CompressedTextureLoader",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "manager",
        "documentation": "",
        "type": "LoadingManager"
      },
      {
        "name": "path",
        "documentation": "",
        "type": "string"
      }
    ],
    "methods": [
      {
        "name": "load",
        "documentation": "",
        "type": "(url: string, onLoad: (texture: CompressedTexture) => void, onProgress?: (event: ProgressEvent) =..."
      },
      {
        "name": "setPath",
        "documentation": "",
        "type": "(path: string) => CompressedTextureLoader"
      }
    ]
  },
  {
    "name": "AudioLoader",
    "documentation": "",
    "type": "typeof AudioLoader",
    "constructors": [
      {
        "parameters": [
          {
            "name": "manager",
            "documentation": "",
            "type": "LoadingManager"
          }
        ],
        "returnType": "AudioLoader",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": [
      {
        "name": "load",
        "documentation": "",
        "type": "(url: string, onLoad: Function, onPrgress: Function, onError: Function) => void"
      }
    ]
  },
  {
    "name": "Material",
    "documentation": "Materials describe the appearance of objects. They are defined in a (mostly) renderer-independent way, so you don't have to rewrite materials if you decide to use a different renderer.",
    "type": "typeof Material",
    "constructors": [
      {
        "parameters": [],
        "returnType": "Material",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "alphaTest",
        "documentation": "Sets the alpha value to be used when running an alpha test. Default is 0.",
        "type": "number"
      },
      {
        "name": "blendDst",
        "documentation": "Blending destination. It's one of the blending mode constants defined in Three.js. Default is {@link OneMinusSrcAlphaFactor}.",
        "type": "BlendingDstFactor"
      },
      {
        "name": "blendDstAlpha",
        "documentation": "The tranparency of the .blendDst. Default is null.",
        "type": "number"
      },
      {
        "name": "blendEquation",
        "documentation": "Blending equation to use when applying blending. It's one of the constants defined in Three.js. Default is {@link AddEquation}.",
        "type": "BlendingEquation"
      },
      {
        "name": "blendEquationAlpha",
        "documentation": "The tranparency of the .blendEquation. Default is null.",
        "type": "number"
      },
      {
        "name": "blending",
        "documentation": "Which blending to use when displaying objects with this material. Default is {@link NormalBlending}.",
        "type": "Blending"
      },
      {
        "name": "blendSrc",
        "documentation": "Blending source. It's one of the blending mode constants defined in Three.js. Default is {@link SrcAlphaFactor}.",
        "type": "BlendingDstFactor | BlendingSrcFactor"
      },
      {
        "name": "blendSrcAlpha",
        "documentation": "The tranparency of the .blendSrc. Default is null.",
        "type": "number"
      },
      {
        "name": "clipIntersection",
        "documentation": "Changes the behavior of clipping planes so that only their intersection is clipped, rather than their union. Default is false.",
        "type": "boolean"
      },
      {
        "name": "clippingPlanes",
        "documentation": "User-defined clipping planes specified as THREE.Plane objects in world space. These planes apply to the objects this material is attached to. Points in space whose signed distance to the plane is negative are clipped (not rendered). See the WebGL / clipping /intersection example. Default is null.",
        "type": "any"
      },
      {
        "name": "clipShadows",
        "documentation": "Defines whether to clip shadows according to the clipping planes specified on this material. Default is false.",
        "type": "boolean"
      },
      {
        "name": "colorWrite",
        "documentation": "Whether to render the material's color. This can be used in conjunction with a mesh's .renderOrder property to create invisible objects that occlude other objects. Default is true.",
        "type": "boolean"
      },
      {
        "name": "depthFunc",
        "documentation": "Which depth function to use. Default is {@link LessEqualDepth}. See the depth mode constants for all possible values.",
        "type": "DepthModes"
      },
      {
        "name": "depthTest",
        "documentation": "Whether to have depth test enabled when rendering this material. Default is true.",
        "type": "boolean"
      },
      {
        "name": "depthWrite",
        "documentation": "Whether rendering this material has any effect on the depth buffer. Default is true.\r\nWhen drawing 2D overlays it can be useful to disable the depth writing in order to layer several things together without creating z-index artifacts.",
        "type": "boolean"
      },
      {
        "name": "fog",
        "documentation": "Whether the material is affected by fog. Default is true.",
        "type": "boolean"
      },
      {
        "name": "id",
        "documentation": "Unique number of this material instance.",
        "type": "number"
      },
      {
        "name": "isMaterial",
        "documentation": "Used to check whether this or derived classes are materials. Default is true.\r\nYou should not change this, as it used internally for optimisation.",
        "type": "boolean"
      },
      {
        "name": "lights",
        "documentation": "Whether the material is affected by lights. Default is true.",
        "type": "boolean"
      },
      {
        "name": "name",
        "documentation": "Material name. Default is an empty string.",
        "type": "string"
      },
      {
        "name": "needsUpdate",
        "documentation": "Specifies that the material needs to be updated, WebGL wise. Set it to true if you made changes that need to be reflected in WebGL.\r\nThis property is automatically set to true when instancing a new material.",
        "type": "boolean"
      },
      {
        "name": "opacity",
        "documentation": "Opacity. Default is 1.",
        "type": "number"
      },
      {
        "name": "overdraw",
        "documentation": "Enables/disables overdraw. If greater than zero, polygons are drawn slightly bigger in order to fix antialiasing gaps when using the CanvasRenderer. Default is 0.",
        "type": "number"
      },
      {
        "name": "polygonOffset",
        "documentation": "Whether to use polygon offset. Default is false. This corresponds to the POLYGON_OFFSET_FILL WebGL feature.",
        "type": "boolean"
      },
      {
        "name": "polygonOffsetFactor",
        "documentation": "Sets the polygon offset factor. Default is 0.",
        "type": "number"
      },
      {
        "name": "polygonOffsetUnits",
        "documentation": "Sets the polygon offset units. Default is 0.",
        "type": "number"
      },
      {
        "name": "precision",
        "documentation": "Override the renderer's default precision for this material. Can be \"highp\", \"mediump\" or \"lowp\". Defaults is null.",
        "type": "\"highp\" | \"mediump\" | \"lowp\""
      },
      {
        "name": "premultipliedAlpha",
        "documentation": "Whether to premultiply the alpha (transparency) value. See WebGL / Materials / Transparency for an example of the difference. Default is false.",
        "type": "boolean"
      },
      {
        "name": "dithering",
        "documentation": "Whether to apply dithering to the color to remove the appearance of banding. Default is false.",
        "type": "boolean"
      },
      {
        "name": "flatShading",
        "documentation": "Define whether the material is rendered with flat shading. Default is false.",
        "type": "boolean"
      },
      {
        "name": "side",
        "documentation": "Defines which of the face sides will be rendered - front, back or both.\r\nDefault is THREE.FrontSide. Other options are THREE.BackSide and THREE.DoubleSide.",
        "type": "Side"
      },
      {
        "name": "transparent",
        "documentation": "Defines whether this material is transparent. This has an effect on rendering as transparent objects need special treatment and are rendered after non-transparent objects.\r\nWhen set to true, the extent to which the material is transparent is controlled by setting it's .opacity property.\r\nDefault is false.",
        "type": "boolean"
      },
      {
        "name": "type",
        "documentation": "Value is the string 'Material'. This shouldn't be changed, and can be used to find all objects of this type in a scene.",
        "type": "string"
      },
      {
        "name": "uuid",
        "documentation": "UUID of this material instance. This gets automatically assigned, so this shouldn't be edited.",
        "type": "string"
      },
      {
        "name": "vertexColors",
        "documentation": "Defines whether vertex coloring is used. Default is THREE.NoColors. Other options are THREE.VertexColors and THREE.FaceColors.",
        "type": "Colors"
      },
      {
        "name": "visible",
        "documentation": "Defines whether this material is visible. Default is true.",
        "type": "boolean"
      },
      {
        "name": "userData",
        "documentation": "An object that can be used to store custom data about the Material. It should not hold references to functions as these will not be cloned.",
        "type": "any"
      },
      {
        "name": "warpRGB",
        "documentation": "",
        "type": "Color"
      },
      {
        "name": "shading",
        "documentation": "",
        "type": "Shading"
      }
    ],
    "methods": [
      {
        "name": "clone",
        "documentation": "Return a new material with the same parameters as this material.",
        "type": "() => this"
      },
      {
        "name": "copy",
        "documentation": "Copy the parameters from the passed material into this material.",
        "type": "(material: this) => this"
      },
      {
        "name": "dispose",
        "documentation": "This disposes the material. Textures of a material don't get disposed. These needs to be disposed by {@link Texture}.",
        "type": "() => void"
      },
      {
        "name": "setValues",
        "documentation": "Sets the properties based on the values.",
        "type": "(values: MaterialParameters) => void"
      },
      {
        "name": "toJSON",
        "documentation": "Convert the material to three.js JSON format.",
        "type": "(meta?: any) => any"
      },
      {
        "name": "update",
        "documentation": "Call .dispatchEvent ( { type: 'update' }) on the material.",
        "type": "() => void"
      }
    ]
  },
  {
    "name": "LineBasicMaterial",
    "documentation": "",
    "type": "typeof LineBasicMaterial",
    "constructors": [
      {
        "parameters": [
          {
            "name": "parameters",
            "documentation": "",
            "type": "LineBasicMaterialParameters"
          }
        ],
        "returnType": "LineBasicMaterial",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "color",
        "documentation": "",
        "type": "Color"
      },
      {
        "name": "linewidth",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "linecap",
        "documentation": "",
        "type": "string"
      },
      {
        "name": "linejoin",
        "documentation": "",
        "type": "string"
      }
    ],
    "methods": [
      {
        "name": "setValues",
        "documentation": "",
        "type": "(parameters: LineBasicMaterialParameters) => void"
      }
    ]
  },
  {
    "name": "LineDashedMaterial",
    "documentation": "",
    "type": "typeof LineDashedMaterial",
    "constructors": [
      {
        "parameters": [
          {
            "name": "parameters",
            "documentation": "",
            "type": "LineDashedMaterialParameters"
          }
        ],
        "returnType": "LineDashedMaterial",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "color",
        "documentation": "",
        "type": "Color"
      },
      {
        "name": "linewidth",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "scale",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "dashSize",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "gapSize",
        "documentation": "",
        "type": "number"
      }
    ],
    "methods": [
      {
        "name": "setValues",
        "documentation": "",
        "type": "(parameters: LineDashedMaterialParameters) => void"
      }
    ]
  },
  {
    "name": "MeshBasicMaterial",
    "documentation": "",
    "type": "typeof MeshBasicMaterial",
    "constructors": [
      {
        "parameters": [
          {
            "name": "parameters",
            "documentation": "",
            "type": "MeshBasicMaterialParameters"
          }
        ],
        "returnType": "MeshBasicMaterial",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "color",
        "documentation": "",
        "type": "Color"
      },
      {
        "name": "map",
        "documentation": "",
        "type": "Texture"
      },
      {
        "name": "aoMap",
        "documentation": "",
        "type": "Texture"
      },
      {
        "name": "aoMapIntensity",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "specularMap",
        "documentation": "",
        "type": "Texture"
      },
      {
        "name": "alphaMap",
        "documentation": "",
        "type": "Texture"
      },
      {
        "name": "envMap",
        "documentation": "",
        "type": "Texture"
      },
      {
        "name": "combine",
        "documentation": "",
        "type": "Combine"
      },
      {
        "name": "reflectivity",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "refractionRatio",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "shading",
        "documentation": "",
        "type": "Shading"
      },
      {
        "name": "wireframe",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "wireframeLinewidth",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "wireframeLinecap",
        "documentation": "",
        "type": "string"
      },
      {
        "name": "wireframeLinejoin",
        "documentation": "",
        "type": "string"
      },
      {
        "name": "skinning",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "morphTargets",
        "documentation": "",
        "type": "boolean"
      }
    ],
    "methods": [
      {
        "name": "setValues",
        "documentation": "",
        "type": "(parameters: MeshBasicMaterialParameters) => void"
      }
    ]
  },
  {
    "name": "MeshDepthMaterial",
    "documentation": "",
    "type": "typeof MeshDepthMaterial",
    "constructors": [
      {
        "parameters": [
          {
            "name": "parameters",
            "documentation": "",
            "type": "MeshDepthMaterialParameters"
          }
        ],
        "returnType": "MeshDepthMaterial",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "wireframe",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "wireframeLinewidth",
        "documentation": "",
        "type": "number"
      }
    ],
    "methods": [
      {
        "name": "setValues",
        "documentation": "",
        "type": "(parameters: MeshDepthMaterialParameters) => void"
      }
    ]
  },
  {
    "name": "MeshLambertMaterial",
    "documentation": "",
    "type": "typeof MeshLambertMaterial",
    "constructors": [
      {
        "parameters": [
          {
            "name": "parameters",
            "documentation": "",
            "type": "MeshLambertMaterialParameters"
          }
        ],
        "returnType": "MeshLambertMaterial",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "color",
        "documentation": "",
        "type": "Color"
      },
      {
        "name": "emissive",
        "documentation": "",
        "type": "Color"
      },
      {
        "name": "emissiveIntensity",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "emissiveMap",
        "documentation": "",
        "type": "Texture"
      },
      {
        "name": "map",
        "documentation": "",
        "type": "Texture"
      },
      {
        "name": "lightMap",
        "documentation": "",
        "type": "Texture"
      },
      {
        "name": "lightMapIntensity",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "aoMap",
        "documentation": "",
        "type": "Texture"
      },
      {
        "name": "aoMapIntensity",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "specularMap",
        "documentation": "",
        "type": "Texture"
      },
      {
        "name": "alphaMap",
        "documentation": "",
        "type": "Texture"
      },
      {
        "name": "envMap",
        "documentation": "",
        "type": "Texture"
      },
      {
        "name": "combine",
        "documentation": "",
        "type": "Combine"
      },
      {
        "name": "reflectivity",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "refractionRatio",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "wireframe",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "wireframeLinewidth",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "wireframeLinecap",
        "documentation": "",
        "type": "string"
      },
      {
        "name": "wireframeLinejoin",
        "documentation": "",
        "type": "string"
      },
      {
        "name": "skinning",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "morphTargets",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "morphNormals",
        "documentation": "",
        "type": "boolean"
      }
    ],
    "methods": [
      {
        "name": "setValues",
        "documentation": "",
        "type": "(parameters: MeshLambertMaterialParameters) => void"
      }
    ]
  },
  {
    "name": "MeshStandardMaterial",
    "documentation": "",
    "type": "typeof MeshStandardMaterial",
    "constructors": [
      {
        "parameters": [
          {
            "name": "parameters",
            "documentation": "",
            "type": "MeshStandardMaterialParameters"
          }
        ],
        "returnType": "MeshStandardMaterial",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "defines",
        "documentation": "",
        "type": "any"
      },
      {
        "name": "color",
        "documentation": "",
        "type": "Color"
      },
      {
        "name": "roughness",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "metalness",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "map",
        "documentation": "",
        "type": "Texture"
      },
      {
        "name": "lightMap",
        "documentation": "",
        "type": "Texture"
      },
      {
        "name": "lightMapIntensity",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "aoMap",
        "documentation": "",
        "type": "Texture"
      },
      {
        "name": "aoMapIntensity",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "emissive",
        "documentation": "",
        "type": "Color"
      },
      {
        "name": "emissiveIntensity",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "emissiveMap",
        "documentation": "",
        "type": "Texture"
      },
      {
        "name": "bumpMap",
        "documentation": "",
        "type": "Texture"
      },
      {
        "name": "bumpScale",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "normalMap",
        "documentation": "",
        "type": "Texture"
      },
      {
        "name": "normalScale",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "displacementMap",
        "documentation": "",
        "type": "Texture"
      },
      {
        "name": "displacementScale",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "displacementBias",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "roughnessMap",
        "documentation": "",
        "type": "Texture"
      },
      {
        "name": "metalnessMap",
        "documentation": "",
        "type": "Texture"
      },
      {
        "name": "alphaMap",
        "documentation": "",
        "type": "Texture"
      },
      {
        "name": "envMap",
        "documentation": "",
        "type": "Texture"
      },
      {
        "name": "envMapIntensity",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "refractionRatio",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "wireframe",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "wireframeLinewidth",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "skinning",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "morphTargets",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "morphNormals",
        "documentation": "",
        "type": "boolean"
      }
    ],
    "methods": [
      {
        "name": "setValues",
        "documentation": "",
        "type": "(parameters: MeshStandardMaterialParameters) => void"
      }
    ]
  },
  {
    "name": "MeshNormalMaterial",
    "documentation": "",
    "type": "typeof MeshNormalMaterial",
    "constructors": [
      {
        "parameters": [
          {
            "name": "parameters",
            "documentation": "",
            "type": "MeshNormalMaterialParameters"
          }
        ],
        "returnType": "MeshNormalMaterial",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "wireframe",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "wireframeLinewidth",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "morphTargets",
        "documentation": "",
        "type": "boolean"
      }
    ],
    "methods": [
      {
        "name": "setValues",
        "documentation": "",
        "type": "(parameters: MeshNormalMaterialParameters) => void"
      }
    ]
  },
  {
    "name": "MeshPhongMaterial",
    "documentation": "",
    "type": "typeof MeshPhongMaterial",
    "constructors": [
      {
        "parameters": [
          {
            "name": "parameters",
            "documentation": "",
            "type": "MeshPhongMaterialParameters"
          }
        ],
        "returnType": "MeshPhongMaterial",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "color",
        "documentation": "",
        "type": "Color"
      },
      {
        "name": "specular",
        "documentation": "",
        "type": "Color"
      },
      {
        "name": "shininess",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "map",
        "documentation": "",
        "type": "Texture"
      },
      {
        "name": "lightMap",
        "documentation": "",
        "type": "Texture"
      },
      {
        "name": "lightMapIntensity",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "aoMap",
        "documentation": "",
        "type": "Texture"
      },
      {
        "name": "aoMapIntensity",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "emissive",
        "documentation": "",
        "type": "Color"
      },
      {
        "name": "emissiveIntensity",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "emissiveMap",
        "documentation": "",
        "type": "Texture"
      },
      {
        "name": "bumpMap",
        "documentation": "",
        "type": "Texture"
      },
      {
        "name": "bumpScale",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "normalMap",
        "documentation": "",
        "type": "Texture"
      },
      {
        "name": "normalScale",
        "documentation": "",
        "type": "Vector2"
      },
      {
        "name": "displacementMap",
        "documentation": "",
        "type": "Texture"
      },
      {
        "name": "displacementScale",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "displacementBias",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "specularMap",
        "documentation": "",
        "type": "Texture"
      },
      {
        "name": "alphaMap",
        "documentation": "",
        "type": "Texture"
      },
      {
        "name": "envMap",
        "documentation": "",
        "type": "Texture"
      },
      {
        "name": "combine",
        "documentation": "",
        "type": "Combine"
      },
      {
        "name": "reflectivity",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "refractionRatio",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "wireframe",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "wireframeLinewidth",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "wireframeLinecap",
        "documentation": "",
        "type": "string"
      },
      {
        "name": "wireframeLinejoin",
        "documentation": "",
        "type": "string"
      },
      {
        "name": "skinning",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "morphTargets",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "morphNormals",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "metal",
        "documentation": "",
        "type": "boolean"
      }
    ],
    "methods": [
      {
        "name": "setValues",
        "documentation": "",
        "type": "(parameters: MeshPhongMaterialParameters) => void"
      }
    ]
  },
  {
    "name": "MeshPhysicalMaterial",
    "documentation": "",
    "type": "typeof MeshPhysicalMaterial",
    "constructors": [
      {
        "parameters": [
          {
            "name": "parameters",
            "documentation": "",
            "type": "MeshPhysicalMaterialParameters"
          }
        ],
        "returnType": "MeshPhysicalMaterial",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "defines",
        "documentation": "",
        "type": "any"
      },
      {
        "name": "reflectivity",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "clearCoat",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "clearCoatRoughness",
        "documentation": "",
        "type": "number"
      }
    ],
    "methods": []
  },
  {
    "name": "MultiMaterial",
    "documentation": "",
    "type": "typeof MultiMaterial",
    "constructors": [
      {
        "parameters": [
          {
            "name": "materials",
            "documentation": "",
            "type": "Material[]"
          }
        ],
        "returnType": "MultiMaterial",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "isMultiMaterial",
        "documentation": "",
        "type": "true"
      },
      {
        "name": "materials",
        "documentation": "",
        "type": "Material[]"
      }
    ],
    "methods": [
      {
        "name": "toJSON",
        "documentation": "",
        "type": "(meta: any) => any"
      }
    ]
  },
  {
    "name": "MeshFaceMaterial",
    "documentation": "",
    "type": "typeof MeshFaceMaterial",
    "constructors": [
      {
        "parameters": [
          {
            "name": "materials",
            "documentation": "",
            "type": "Material[]"
          }
        ],
        "returnType": "MeshFaceMaterial",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": []
  },
  {
    "name": "PointsMaterial",
    "documentation": "",
    "type": "typeof PointsMaterial",
    "constructors": [
      {
        "parameters": [
          {
            "name": "parameters",
            "documentation": "",
            "type": "PointsMaterialParameters"
          }
        ],
        "returnType": "PointsMaterial",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "color",
        "documentation": "",
        "type": "Color"
      },
      {
        "name": "map",
        "documentation": "",
        "type": "Texture"
      },
      {
        "name": "size",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "sizeAttenuation",
        "documentation": "",
        "type": "boolean"
      }
    ],
    "methods": [
      {
        "name": "setValues",
        "documentation": "",
        "type": "(parameters: PointsMaterialParameters) => void"
      }
    ]
  },
  {
    "name": "PointCloudMaterial",
    "documentation": "",
    "type": "typeof PointCloudMaterial",
    "constructors": [
      {
        "parameters": [
          {
            "name": "parameters",
            "documentation": "",
            "type": "PointsMaterialParameters"
          }
        ],
        "returnType": "PointCloudMaterial",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": []
  },
  {
    "name": "ParticleBasicMaterial",
    "documentation": "",
    "type": "typeof ParticleBasicMaterial",
    "constructors": [
      {
        "parameters": [
          {
            "name": "parameters",
            "documentation": "",
            "type": "PointsMaterialParameters"
          }
        ],
        "returnType": "ParticleBasicMaterial",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": []
  },
  {
    "name": "ParticleSystemMaterial",
    "documentation": "",
    "type": "typeof ParticleSystemMaterial",
    "constructors": [
      {
        "parameters": [
          {
            "name": "parameters",
            "documentation": "",
            "type": "PointsMaterialParameters"
          }
        ],
        "returnType": "ParticleSystemMaterial",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": []
  },
  {
    "name": "ShaderMaterial",
    "documentation": "",
    "type": "typeof ShaderMaterial",
    "constructors": [
      {
        "parameters": [
          {
            "name": "parameters",
            "documentation": "",
            "type": "ShaderMaterialParameters"
          }
        ],
        "returnType": "ShaderMaterial",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "defines",
        "documentation": "",
        "type": "any"
      },
      {
        "name": "uniforms",
        "documentation": "",
        "type": "{ [uniform: string]: IUniform; }"
      },
      {
        "name": "vertexShader",
        "documentation": "",
        "type": "string"
      },
      {
        "name": "fragmentShader",
        "documentation": "",
        "type": "string"
      },
      {
        "name": "linewidth",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "wireframe",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "wireframeLinewidth",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "lights",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "clipping",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "skinning",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "morphTargets",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "morphNormals",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "derivatives",
        "documentation": "",
        "type": "any"
      },
      {
        "name": "extensions",
        "documentation": "",
        "type": "{ derivatives: boolean; fragDepth: boolean; drawBuffers: boolean; shaderTextureLOD: boolean; }"
      },
      {
        "name": "defaultAttributeValues",
        "documentation": "",
        "type": "any"
      },
      {
        "name": "index0AttributeName",
        "documentation": "",
        "type": "string"
      }
    ],
    "methods": [
      {
        "name": "setValues",
        "documentation": "",
        "type": "(parameters: ShaderMaterialParameters) => void"
      },
      {
        "name": "toJSON",
        "documentation": "",
        "type": "(meta: any) => any"
      }
    ]
  },
  {
    "name": "RawShaderMaterial",
    "documentation": "",
    "type": "typeof RawShaderMaterial",
    "constructors": [
      {
        "parameters": [
          {
            "name": "parameters",
            "documentation": "",
            "type": "ShaderMaterialParameters"
          }
        ],
        "returnType": "RawShaderMaterial",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": []
  },
  {
    "name": "SpriteMaterial",
    "documentation": "",
    "type": "typeof SpriteMaterial",
    "constructors": [
      {
        "parameters": [
          {
            "name": "parameters",
            "documentation": "",
            "type": "SpriteMaterialParameters"
          }
        ],
        "returnType": "SpriteMaterial",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "color",
        "documentation": "",
        "type": "Color"
      },
      {
        "name": "map",
        "documentation": "",
        "type": "Texture"
      },
      {
        "name": "rotation",
        "documentation": "",
        "type": "number"
      }
    ],
    "methods": [
      {
        "name": "setValues",
        "documentation": "",
        "type": "(parameters: SpriteMaterialParameters) => void"
      }
    ]
  },
  {
    "name": "ShadowMaterial",
    "documentation": "",
    "type": "typeof ShadowMaterial",
    "constructors": [
      {
        "parameters": [
          {
            "name": "parameters",
            "documentation": "",
            "type": "ShaderMaterialParameters"
          }
        ],
        "returnType": "ShadowMaterial",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": []
  },
  {
    "name": "Box2",
    "documentation": "",
    "type": "typeof Box2",
    "constructors": [
      {
        "parameters": [
          {
            "name": "min",
            "documentation": "",
            "type": "Vector2"
          },
          {
            "name": "max",
            "documentation": "",
            "type": "Vector2"
          }
        ],
        "returnType": "Box2",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "max",
        "documentation": "",
        "type": "Vector2"
      },
      {
        "name": "min",
        "documentation": "",
        "type": "Vector2"
      }
    ],
    "methods": [
      {
        "name": "set",
        "documentation": "",
        "type": "(min: Vector2, max: Vector2) => Box2"
      },
      {
        "name": "setFromPoints",
        "documentation": "",
        "type": "(points: Vector2[]) => Box2"
      },
      {
        "name": "setFromCenterAndSize",
        "documentation": "",
        "type": "(center: Vector2, size: Vector2) => Box2"
      },
      {
        "name": "clone",
        "documentation": "",
        "type": "() => this"
      },
      {
        "name": "copy",
        "documentation": "",
        "type": "(box: this) => this"
      },
      {
        "name": "makeEmpty",
        "documentation": "",
        "type": "() => Box2"
      },
      {
        "name": "isEmpty",
        "documentation": "",
        "type": "() => boolean"
      },
      {
        "name": "getCenter",
        "documentation": "",
        "type": "(optionalTarget?: Vector2) => Vector2"
      },
      {
        "name": "getSize",
        "documentation": "",
        "type": "(optionalTarget?: Vector2) => Vector2"
      },
      {
        "name": "expandByPoint",
        "documentation": "",
        "type": "(point: Vector2) => Box2"
      },
      {
        "name": "expandByVector",
        "documentation": "",
        "type": "(vector: Vector2) => Box2"
      },
      {
        "name": "expandByScalar",
        "documentation": "",
        "type": "(scalar: number) => Box2"
      },
      {
        "name": "containsPoint",
        "documentation": "",
        "type": "(point: Vector2) => boolean"
      },
      {
        "name": "containsBox",
        "documentation": "",
        "type": "(box: Box2) => boolean"
      },
      {
        "name": "getParameter",
        "documentation": "",
        "type": "(point: Vector2) => Vector2"
      },
      {
        "name": "intersectsBox",
        "documentation": "",
        "type": "(box: Box2) => boolean"
      },
      {
        "name": "clampPoint",
        "documentation": "",
        "type": "(point: Vector2, optionalTarget?: Vector2) => Vector2"
      },
      {
        "name": "distanceToPoint",
        "documentation": "",
        "type": "(point: Vector2) => number"
      },
      {
        "name": "intersect",
        "documentation": "",
        "type": "(box: Box2) => Box2"
      },
      {
        "name": "union",
        "documentation": "",
        "type": "(box: Box2) => Box2"
      },
      {
        "name": "translate",
        "documentation": "",
        "type": "(offset: Vector2) => Box2"
      },
      {
        "name": "equals",
        "documentation": "",
        "type": "(box: Box2) => boolean"
      },
      {
        "name": "empty",
        "documentation": "",
        "type": "() => any"
      },
      {
        "name": "isIntersectionBox",
        "documentation": "",
        "type": "(b: any) => any"
      }
    ]
  },
  {
    "name": "Box3",
    "documentation": "",
    "type": "typeof Box3",
    "constructors": [
      {
        "parameters": [
          {
            "name": "min",
            "documentation": "",
            "type": "Vector3"
          },
          {
            "name": "max",
            "documentation": "",
            "type": "Vector3"
          }
        ],
        "returnType": "Box3",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "max",
        "documentation": "",
        "type": "Vector3"
      },
      {
        "name": "min",
        "documentation": "",
        "type": "Vector3"
      }
    ],
    "methods": [
      {
        "name": "set",
        "documentation": "",
        "type": "(min: Vector3, max: Vector3) => Box3"
      },
      {
        "name": "setFromArray",
        "documentation": "",
        "type": "(array: ArrayLike<number>) => Box3"
      },
      {
        "name": "setFromPoints",
        "documentation": "",
        "type": "(points: Vector3[]) => Box3"
      },
      {
        "name": "setFromCenterAndSize",
        "documentation": "",
        "type": "(center: Vector3, size: Vector3) => Box3"
      },
      {
        "name": "setFromObject",
        "documentation": "",
        "type": "(object: Object3D) => Box3"
      },
      {
        "name": "clone",
        "documentation": "",
        "type": "() => this"
      },
      {
        "name": "copy",
        "documentation": "",
        "type": "(box: this) => this"
      },
      {
        "name": "makeEmpty",
        "documentation": "",
        "type": "() => Box3"
      },
      {
        "name": "isEmpty",
        "documentation": "",
        "type": "() => boolean"
      },
      {
        "name": "getCenter",
        "documentation": "",
        "type": "(optionalTarget?: Vector3) => Vector3"
      },
      {
        "name": "getSize",
        "documentation": "",
        "type": "(optionalTarget?: Vector3) => Vector3"
      },
      {
        "name": "expandByPoint",
        "documentation": "",
        "type": "(point: Vector3) => Box3"
      },
      {
        "name": "expandByVector",
        "documentation": "",
        "type": "(vector: Vector3) => Box3"
      },
      {
        "name": "expandByScalar",
        "documentation": "",
        "type": "(scalar: number) => Box3"
      },
      {
        "name": "expandByObject",
        "documentation": "",
        "type": "(object: Object3D) => Box3"
      },
      {
        "name": "containsPoint",
        "documentation": "",
        "type": "(point: Vector3) => boolean"
      },
      {
        "name": "containsBox",
        "documentation": "",
        "type": "(box: Box3) => boolean"
      },
      {
        "name": "getParameter",
        "documentation": "",
        "type": "(point: Vector3) => Vector3"
      },
      {
        "name": "intersectsBox",
        "documentation": "",
        "type": "(box: Box3) => boolean"
      },
      {
        "name": "intersectsSphere",
        "documentation": "",
        "type": "(sphere: Sphere) => boolean"
      },
      {
        "name": "intersectsPlane",
        "documentation": "",
        "type": "(plane: Plane) => boolean"
      },
      {
        "name": "clampPoint",
        "documentation": "",
        "type": "(point: Vector3, optionalTarget?: Vector3) => Vector3"
      },
      {
        "name": "distanceToPoint",
        "documentation": "",
        "type": "(point: Vector3) => number"
      },
      {
        "name": "getBoundingSphere",
        "documentation": "",
        "type": "(optionalTarget?: Sphere) => Sphere"
      },
      {
        "name": "intersect",
        "documentation": "",
        "type": "(box: Box3) => Box3"
      },
      {
        "name": "union",
        "documentation": "",
        "type": "(box: Box3) => Box3"
      },
      {
        "name": "applyMatrix4",
        "documentation": "",
        "type": "(matrix: Matrix4) => Box3"
      },
      {
        "name": "translate",
        "documentation": "",
        "type": "(offset: Vector3) => Box3"
      },
      {
        "name": "equals",
        "documentation": "",
        "type": "(box: Box3) => boolean"
      },
      {
        "name": "empty",
        "documentation": "",
        "type": "() => any"
      },
      {
        "name": "isIntersectionBox",
        "documentation": "",
        "type": "(b: any) => any"
      },
      {
        "name": "isIntersectionSphere",
        "documentation": "",
        "type": "(s: any) => any"
      }
    ]
  },
  {
    "name": "Color",
    "documentation": "Represents a color. See also {@link ColorUtils}.",
    "type": "typeof Color",
    "constructors": [
      {
        "parameters": [
          {
            "name": "color",
            "documentation": "",
            "type": "Color"
          }
        ],
        "returnType": "Color",
        "documentation": ""
      },
      {
        "parameters": [
          {
            "name": "color",
            "documentation": "",
            "type": "string"
          }
        ],
        "returnType": "Color",
        "documentation": ""
      },
      {
        "parameters": [
          {
            "name": "color",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "Color",
        "documentation": ""
      },
      {
        "parameters": [
          {
            "name": "r",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "g",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "b",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "Color",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "r",
        "documentation": "Red channel value between 0 and 1. Default is 1.",
        "type": "number"
      },
      {
        "name": "g",
        "documentation": "Green channel value between 0 and 1. Default is 1.",
        "type": "number"
      },
      {
        "name": "b",
        "documentation": "Blue channel value between 0 and 1. Default is 1.",
        "type": "number"
      },
      {
        "name": "set",
        "documentation": "",
        "type": "{ (color: Color): Color; (color: number): Color; (color: string): Color; }"
      }
    ],
    "methods": [
      {
        "name": "setScalar",
        "documentation": "",
        "type": "(scalar: number) => Color"
      },
      {
        "name": "setHex",
        "documentation": "",
        "type": "(hex: number) => Color"
      },
      {
        "name": "setRGB",
        "documentation": "Sets this color from RGB values.",
        "type": "(r: number, g: number, b: number) => Color"
      },
      {
        "name": "setHSL",
        "documentation": "Sets this color from HSL values.\r\nBased on MochiKit implementation by Bob Ippolito.",
        "type": "(h: number, s: number, l: number) => Color"
      },
      {
        "name": "setStyle",
        "documentation": "Sets this color from a CSS context style string.",
        "type": "(style: string) => Color"
      },
      {
        "name": "clone",
        "documentation": "Clones this color.",
        "type": "() => this"
      },
      {
        "name": "copy",
        "documentation": "Copies given color.",
        "type": "(color: this) => this"
      },
      {
        "name": "copyGammaToLinear",
        "documentation": "Copies given color making conversion from gamma to linear space.",
        "type": "(color: Color, gammaFactor?: number) => Color"
      },
      {
        "name": "copyLinearToGamma",
        "documentation": "Copies given color making conversion from linear to gamma space.",
        "type": "(color: Color, gammaFactor?: number) => Color"
      },
      {
        "name": "convertGammaToLinear",
        "documentation": "Converts this color from gamma to linear space.",
        "type": "() => Color"
      },
      {
        "name": "convertLinearToGamma",
        "documentation": "Converts this color from linear to gamma space.",
        "type": "() => Color"
      },
      {
        "name": "getHex",
        "documentation": "Returns the hexadecimal value of this color.",
        "type": "() => number"
      },
      {
        "name": "getHexString",
        "documentation": "Returns the string formated hexadecimal value of this color.",
        "type": "() => string"
      },
      {
        "name": "getHSL",
        "documentation": "",
        "type": "() => HSL"
      },
      {
        "name": "getStyle",
        "documentation": "Returns the value of this color in CSS context style.\r\nExample: rgb(r, g, b)",
        "type": "() => string"
      },
      {
        "name": "offsetHSL",
        "documentation": "",
        "type": "(h: number, s: number, l: number) => Color"
      },
      {
        "name": "add",
        "documentation": "",
        "type": "(color: Color) => Color"
      },
      {
        "name": "addColors",
        "documentation": "",
        "type": "(color1: Color, color2: Color) => Color"
      },
      {
        "name": "addScalar",
        "documentation": "",
        "type": "(s: number) => Color"
      },
      {
        "name": "sub",
        "documentation": "",
        "type": "(color: Color) => Color"
      },
      {
        "name": "multiply",
        "documentation": "",
        "type": "(color: Color) => Color"
      },
      {
        "name": "multiplyScalar",
        "documentation": "",
        "type": "(s: number) => Color"
      },
      {
        "name": "lerp",
        "documentation": "",
        "type": "(color: Color, alpha: number) => Color"
      },
      {
        "name": "equals",
        "documentation": "",
        "type": "(color: Color) => boolean"
      },
      {
        "name": "fromArray",
        "documentation": "",
        "type": "(rgb: number[], offset?: number) => Color"
      },
      {
        "name": "toArray",
        "documentation": "",
        "type": "(array?: number[], offset?: number) => number[]"
      }
    ]
  },
  {
    "name": "Euler",
    "documentation": "",
    "type": "typeof Euler",
    "constructors": [
      {
        "parameters": [
          {
            "name": "x",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "y",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "z",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "order",
            "documentation": "",
            "type": "string"
          }
        ],
        "returnType": "Euler",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "x",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "y",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "z",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "order",
        "documentation": "",
        "type": "string"
      },
      {
        "name": "onChangeCallback",
        "documentation": "",
        "type": "Function"
      }
    ],
    "methods": [
      {
        "name": "set",
        "documentation": "",
        "type": "(x: number, y: number, z: number, order?: string) => Euler"
      },
      {
        "name": "clone",
        "documentation": "",
        "type": "() => this"
      },
      {
        "name": "copy",
        "documentation": "",
        "type": "(euler: this) => this"
      },
      {
        "name": "setFromRotationMatrix",
        "documentation": "",
        "type": "(m: Matrix4, order?: string, update?: boolean) => Euler"
      },
      {
        "name": "setFromQuaternion",
        "documentation": "",
        "type": "(q: Quaternion, order?: string, update?: boolean) => Euler"
      },
      {
        "name": "setFromVector3",
        "documentation": "",
        "type": "(v: Vector3, order?: string) => Euler"
      },
      {
        "name": "reorder",
        "documentation": "",
        "type": "(newOrder: string) => Euler"
      },
      {
        "name": "equals",
        "documentation": "",
        "type": "(euler: Euler) => boolean"
      },
      {
        "name": "fromArray",
        "documentation": "",
        "type": "(xyzo: any[]) => Euler"
      },
      {
        "name": "toArray",
        "documentation": "",
        "type": "(array?: number[], offset?: number) => number[]"
      },
      {
        "name": "toVector3",
        "documentation": "",
        "type": "(optionalResult?: Vector3) => Vector3"
      },
      {
        "name": "onChange",
        "documentation": "",
        "type": "(callback: Function) => void"
      }
    ]
  },
  {
    "name": "Frustum",
    "documentation": "Frustums are used to determine what is inside the camera's field of view. They help speed up the rendering process.",
    "type": "typeof Frustum",
    "constructors": [
      {
        "parameters": [
          {
            "name": "p0",
            "documentation": "",
            "type": "Plane"
          },
          {
            "name": "p1",
            "documentation": "",
            "type": "Plane"
          },
          {
            "name": "p2",
            "documentation": "",
            "type": "Plane"
          },
          {
            "name": "p3",
            "documentation": "",
            "type": "Plane"
          },
          {
            "name": "p4",
            "documentation": "",
            "type": "Plane"
          },
          {
            "name": "p5",
            "documentation": "",
            "type": "Plane"
          }
        ],
        "returnType": "Frustum",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "planes",
        "documentation": "Array of 6 vectors.",
        "type": "Plane[]"
      },
      {
        "name": "intersectsObject",
        "documentation": "",
        "type": "{ (object: Object3D): boolean; (sprite: Sprite): boolean; }"
      }
    ],
    "methods": [
      {
        "name": "set",
        "documentation": "",
        "type": "(p0?: number, p1?: number, p2?: number, p3?: number, p4?: number, p5?: number) => Frustum"
      },
      {
        "name": "clone",
        "documentation": "",
        "type": "() => this"
      },
      {
        "name": "copy",
        "documentation": "",
        "type": "(frustum: this) => this"
      },
      {
        "name": "setFromMatrix",
        "documentation": "",
        "type": "(m: Matrix4) => Frustum"
      },
      {
        "name": "intersectsSphere",
        "documentation": "",
        "type": "(sphere: Sphere) => boolean"
      },
      {
        "name": "intersectsBox",
        "documentation": "",
        "type": "(box: Box3) => boolean"
      },
      {
        "name": "containsPoint",
        "documentation": "",
        "type": "(point: Vector3) => boolean"
      }
    ]
  },
  {
    "name": "Line3",
    "documentation": "",
    "type": "typeof Line3",
    "constructors": [
      {
        "parameters": [
          {
            "name": "start",
            "documentation": "",
            "type": "Vector3"
          },
          {
            "name": "end",
            "documentation": "",
            "type": "Vector3"
          }
        ],
        "returnType": "Line3",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "start",
        "documentation": "",
        "type": "Vector3"
      },
      {
        "name": "end",
        "documentation": "",
        "type": "Vector3"
      }
    ],
    "methods": [
      {
        "name": "set",
        "documentation": "",
        "type": "(start?: Vector3, end?: Vector3) => Line3"
      },
      {
        "name": "clone",
        "documentation": "",
        "type": "() => this"
      },
      {
        "name": "copy",
        "documentation": "",
        "type": "(line: this) => this"
      },
      {
        "name": "getCenter",
        "documentation": "",
        "type": "(optionalTarget?: Vector3) => Vector3"
      },
      {
        "name": "delta",
        "documentation": "",
        "type": "(optionalTarget?: Vector3) => Vector3"
      },
      {
        "name": "distanceSq",
        "documentation": "",
        "type": "() => number"
      },
      {
        "name": "distance",
        "documentation": "",
        "type": "() => number"
      },
      {
        "name": "at",
        "documentation": "",
        "type": "(t: number, optionalTarget?: Vector3) => Vector3"
      },
      {
        "name": "closestPointToPointParameter",
        "documentation": "",
        "type": "(point: Vector3, clampToLine?: boolean) => number"
      },
      {
        "name": "closestPointToPoint",
        "documentation": "",
        "type": "(point: Vector3, clampToLine?: boolean, optionalTarget?: Vector3) => Vector3"
      },
      {
        "name": "applyMatrix4",
        "documentation": "",
        "type": "(matrix: Matrix4) => Line3"
      },
      {
        "name": "equals",
        "documentation": "",
        "type": "(line: Line3) => boolean"
      }
    ]
  },
  {
    "name": "Matrix3",
    "documentation": "( class Matrix3 implements Matrix&lt;Matrix3&gt; )",
    "type": "typeof Matrix3",
    "constructors": [
      {
        "parameters": [],
        "returnType": "Matrix3",
        "documentation": "Creates an identity matrix."
      }
    ],
    "properties": [
      {
        "name": "elements",
        "documentation": "Float32Array with matrix values.",
        "type": "Float32Array"
      },
      {
        "name": "getInverse",
        "documentation": "",
        "type": "{ (matrix: Matrix3, throwOnDegenerate?: boolean): Matrix3; (matrix: Matrix4, throwOnDegenerate?: ..."
      }
    ],
    "methods": [
      {
        "name": "set",
        "documentation": "",
        "type": "(n11: number, n12: number, n13: number, n21: number, n22: number, n23: number, n31: number, n32: ..."
      },
      {
        "name": "identity",
        "documentation": "",
        "type": "() => Matrix3"
      },
      {
        "name": "clone",
        "documentation": "",
        "type": "() => this"
      },
      {
        "name": "copy",
        "documentation": "",
        "type": "(m: this) => this"
      },
      {
        "name": "setFromMatrix4",
        "documentation": "",
        "type": "(m: Matrix4) => Matrix3"
      },
      {
        "name": "applyToBuffer",
        "documentation": "",
        "type": "(buffer: BufferAttribute, offset?: number, length?: number) => BufferAttribute"
      },
      {
        "name": "multiplyScalar",
        "documentation": "",
        "type": "(s: number) => Matrix3"
      },
      {
        "name": "determinant",
        "documentation": "",
        "type": "() => number"
      },
      {
        "name": "transpose",
        "documentation": "Transposes this matrix in place.",
        "type": "() => Matrix3"
      },
      {
        "name": "getNormalMatrix",
        "documentation": "",
        "type": "(matrix4: Matrix4) => Matrix3"
      },
      {
        "name": "transposeIntoArray",
        "documentation": "Transposes this matrix into the supplied array r, and returns itself.",
        "type": "(r: number[]) => number[]"
      },
      {
        "name": "fromArray",
        "documentation": "",
        "type": "(array: number[], offset?: number) => Matrix3"
      },
      {
        "name": "toArray",
        "documentation": "",
        "type": "() => number[]"
      },
      {
        "name": "multiply",
        "documentation": "Multiplies this matrix by m.",
        "type": "(m: Matrix3) => Matrix3"
      },
      {
        "name": "premultiply",
        "documentation": "",
        "type": "(m: Matrix3) => Matrix3"
      },
      {
        "name": "multiplyMatrices",
        "documentation": "Sets this matrix to a x b.",
        "type": "(a: Matrix3, b: Matrix3) => Matrix3"
      },
      {
        "name": "multiplyVector3",
        "documentation": "",
        "type": "(vector: Vector3) => any"
      },
      {
        "name": "multiplyVector3Array",
        "documentation": "",
        "type": "(a: any) => any"
      },
      {
        "name": "flattenToArrayOffset",
        "documentation": "",
        "type": "(array: number[], offset: number) => number[]"
      }
    ]
  },
  {
    "name": "Matrix4",
    "documentation": "A 4x4 Matrix.",
    "type": "typeof Matrix4",
    "constructors": [
      {
        "parameters": [],
        "returnType": "Matrix4",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "elements",
        "documentation": "Float32Array with matrix values.",
        "type": "Float32Array"
      },
      {
        "name": "makePerspective",
        "documentation": "Creates a frustum matrix.\nCreates a perspective projection matrix.",
        "type": "{ (left: number, right: number, bottom: number, top: number, near: number, far: number): Matrix4;..."
      }
    ],
    "methods": [
      {
        "name": "set",
        "documentation": "Sets all fields of this matrix.",
        "type": "(n11: number, n12: number, n13: number, n14: number, n21: number, n22: number, n23: number, n24: ..."
      },
      {
        "name": "identity",
        "documentation": "Resets this matrix to identity.",
        "type": "() => Matrix4"
      },
      {
        "name": "clone",
        "documentation": "",
        "type": "() => this"
      },
      {
        "name": "copy",
        "documentation": "",
        "type": "(m: this) => this"
      },
      {
        "name": "copyPosition",
        "documentation": "",
        "type": "(m: Matrix4) => Matrix4"
      },
      {
        "name": "extractBasis",
        "documentation": "",
        "type": "(xAxis: Vector3, yAxis: Vector3, zAxis: Vector3) => Matrix4"
      },
      {
        "name": "makeBasis",
        "documentation": "",
        "type": "(xAxis: Vector3, yAxis: Vector3, zAxis: Vector3) => Matrix4"
      },
      {
        "name": "extractRotation",
        "documentation": "Copies the rotation component of the supplied matrix m into this matrix rotation component.",
        "type": "(m: Matrix4) => Matrix4"
      },
      {
        "name": "makeRotationFromEuler",
        "documentation": "",
        "type": "(euler: Euler) => Matrix4"
      },
      {
        "name": "makeRotationFromQuaternion",
        "documentation": "",
        "type": "(q: Quaternion) => Matrix4"
      },
      {
        "name": "lookAt",
        "documentation": "Constructs a rotation matrix, looking from eye towards center with defined up vector.",
        "type": "(eye: Vector3, target: Vector3, up: Vector3) => Matrix4"
      },
      {
        "name": "multiply",
        "documentation": "Multiplies this matrix by m.",
        "type": "(m: Matrix4) => Matrix4"
      },
      {
        "name": "premultiply",
        "documentation": "",
        "type": "(m: Matrix4) => Matrix4"
      },
      {
        "name": "multiplyMatrices",
        "documentation": "Sets this matrix to a x b.",
        "type": "(a: Matrix4, b: Matrix4) => Matrix4"
      },
      {
        "name": "multiplyToArray",
        "documentation": "Sets this matrix to a x b and stores the result into the flat array r.\r\nr can be either a regular Array or a TypedArray.",
        "type": "(a: Matrix4, b: Matrix4, r: number[]) => Matrix4"
      },
      {
        "name": "multiplyScalar",
        "documentation": "Multiplies this matrix by s.",
        "type": "(s: number) => Matrix4"
      },
      {
        "name": "applyToBuffer",
        "documentation": "",
        "type": "(buffer: BufferAttribute, offset?: number, length?: number) => BufferAttribute"
      },
      {
        "name": "determinant",
        "documentation": "Computes determinant of this matrix.\r\nBased on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm",
        "type": "() => number"
      },
      {
        "name": "transpose",
        "documentation": "Transposes this matrix.",
        "type": "() => Matrix4"
      },
      {
        "name": "setPosition",
        "documentation": "Sets the position component for this matrix from vector v.",
        "type": "(v: Vector3) => Matrix4"
      },
      {
        "name": "getInverse",
        "documentation": "Sets this matrix to the inverse of matrix m.\r\nBased on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm.",
        "type": "(m: Matrix4, throwOnDegeneratee?: boolean) => Matrix4"
      },
      {
        "name": "scale",
        "documentation": "Multiplies the columns of this matrix by vector v.",
        "type": "(v: Vector3) => Matrix4"
      },
      {
        "name": "getMaxScaleOnAxis",
        "documentation": "",
        "type": "() => number"
      },
      {
        "name": "makeTranslation",
        "documentation": "Sets this matrix as translation transform.",
        "type": "(x: number, y: number, z: number) => Matrix4"
      },
      {
        "name": "makeRotationX",
        "documentation": "Sets this matrix as rotation transform around x axis by theta radians.",
        "type": "(theta: number) => Matrix4"
      },
      {
        "name": "makeRotationY",
        "documentation": "Sets this matrix as rotation transform around y axis by theta radians.",
        "type": "(theta: number) => Matrix4"
      },
      {
        "name": "makeRotationZ",
        "documentation": "Sets this matrix as rotation transform around z axis by theta radians.",
        "type": "(theta: number) => Matrix4"
      },
      {
        "name": "makeRotationAxis",
        "documentation": "Sets this matrix as rotation transform around axis by angle radians.\r\nBased on http://www.gamedev.net/reference/articles/article1199.asp.",
        "type": "(axis: Vector3, angle: number) => Matrix4"
      },
      {
        "name": "makeScale",
        "documentation": "Sets this matrix as scale transform.",
        "type": "(x: number, y: number, z: number) => Matrix4"
      },
      {
        "name": "compose",
        "documentation": "Sets this matrix to the transformation composed of translation, rotation and scale.",
        "type": "(translation: Vector3, rotation: Quaternion, scale: Vector3) => Matrix4"
      },
      {
        "name": "decompose",
        "documentation": "Decomposes this matrix into the translation, rotation and scale components.\r\nIf parameters are not passed, new instances will be created.",
        "type": "(translation?: Vector3, rotation?: Quaternion, scale?: Vector3) => Object[]"
      },
      {
        "name": "makeOrthographic",
        "documentation": "Creates an orthographic projection matrix.",
        "type": "(left: number, right: number, top: number, bottom: number, near: number, far: number) => Matrix4"
      },
      {
        "name": "equals",
        "documentation": "",
        "type": "(matrix: Matrix4) => boolean"
      },
      {
        "name": "fromArray",
        "documentation": "",
        "type": "(array: number[], offset?: number) => Matrix4"
      },
      {
        "name": "toArray",
        "documentation": "",
        "type": "() => number[]"
      },
      {
        "name": "extractPosition",
        "documentation": "",
        "type": "(m: Matrix4) => Matrix4"
      },
      {
        "name": "setRotationFromQuaternion",
        "documentation": "",
        "type": "(q: Quaternion) => Matrix4"
      },
      {
        "name": "multiplyVector3",
        "documentation": "",
        "type": "(v: any) => any"
      },
      {
        "name": "multiplyVector4",
        "documentation": "",
        "type": "(v: any) => any"
      },
      {
        "name": "multiplyVector3Array",
        "documentation": "",
        "type": "(array: number[]) => number[]"
      },
      {
        "name": "rotateAxis",
        "documentation": "",
        "type": "(v: any) => void"
      },
      {
        "name": "crossVector",
        "documentation": "",
        "type": "(v: any) => void"
      },
      {
        "name": "flattenToArrayOffset",
        "documentation": "",
        "type": "(array: number[], offset: number) => number[]"
      }
    ]
  },
  {
    "name": "Plane",
    "documentation": "",
    "type": "typeof Plane",
    "constructors": [
      {
        "parameters": [
          {
            "name": "normal",
            "documentation": "",
            "type": "Vector3"
          },
          {
            "name": "constant",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "Plane",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "normal",
        "documentation": "",
        "type": "Vector3"
      },
      {
        "name": "constant",
        "documentation": "",
        "type": "number"
      }
    ],
    "methods": [
      {
        "name": "set",
        "documentation": "",
        "type": "(normal: Vector3, constant: number) => Plane"
      },
      {
        "name": "setComponents",
        "documentation": "",
        "type": "(x: number, y: number, z: number, w: number) => Plane"
      },
      {
        "name": "setFromNormalAndCoplanarPoint",
        "documentation": "",
        "type": "(normal: Vector3, point: Vector3) => Plane"
      },
      {
        "name": "setFromCoplanarPoints",
        "documentation": "",
        "type": "(a: Vector3, b: Vector3, c: Vector3) => Plane"
      },
      {
        "name": "clone",
        "documentation": "",
        "type": "() => this"
      },
      {
        "name": "copy",
        "documentation": "",
        "type": "(plane: this) => this"
      },
      {
        "name": "normalize",
        "documentation": "",
        "type": "() => Plane"
      },
      {
        "name": "negate",
        "documentation": "",
        "type": "() => Plane"
      },
      {
        "name": "distanceToPoint",
        "documentation": "",
        "type": "(point: Vector3) => number"
      },
      {
        "name": "distanceToSphere",
        "documentation": "",
        "type": "(sphere: Sphere) => number"
      },
      {
        "name": "projectPoint",
        "documentation": "",
        "type": "(point: Vector3, optionalTarget?: Vector3) => Vector3"
      },
      {
        "name": "orthoPoint",
        "documentation": "",
        "type": "(point: Vector3, optionalTarget?: Vector3) => Vector3"
      },
      {
        "name": "intersectLine",
        "documentation": "",
        "type": "(line: Line3, optionalTarget?: Vector3) => Vector3"
      },
      {
        "name": "intersectsLine",
        "documentation": "",
        "type": "(line: Line3) => boolean"
      },
      {
        "name": "intersectsBox",
        "documentation": "",
        "type": "(box: Box3) => boolean"
      },
      {
        "name": "coplanarPoint",
        "documentation": "",
        "type": "(optionalTarget?: boolean) => Vector3"
      },
      {
        "name": "applyMatrix4",
        "documentation": "",
        "type": "(matrix: Matrix4, optionalNormalMatrix?: Matrix3) => Plane"
      },
      {
        "name": "translate",
        "documentation": "",
        "type": "(offset: Vector3) => Plane"
      },
      {
        "name": "equals",
        "documentation": "",
        "type": "(plane: Plane) => boolean"
      },
      {
        "name": "isIntersectionLine",
        "documentation": "",
        "type": "(l: any) => any"
      }
    ]
  },
  {
    "name": "Spherical",
    "documentation": "",
    "type": "typeof Spherical",
    "constructors": [
      {
        "parameters": [
          {
            "name": "radius",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "phi",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "theta",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "Spherical",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "radius",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "phi",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "theta",
        "documentation": "",
        "type": "number"
      }
    ],
    "methods": [
      {
        "name": "set",
        "documentation": "",
        "type": "(radius: number, phi: number, theta: number) => Spherical"
      },
      {
        "name": "clone",
        "documentation": "",
        "type": "() => this"
      },
      {
        "name": "copy",
        "documentation": "",
        "type": "(other: this) => this"
      },
      {
        "name": "makeSafe",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "setFromVector3",
        "documentation": "",
        "type": "(vec3: Vector3) => Spherical"
      }
    ]
  },
  {
    "name": "Quaternion",
    "documentation": "Implementation of a quaternion. This is used for rotating things without incurring in the dreaded gimbal lock issue, amongst other advantages.",
    "type": "typeof Quaternion",
    "constructors": [
      {
        "parameters": [
          {
            "name": "x",
            "documentation": "x coordinate",
            "type": "number"
          },
          {
            "name": "y",
            "documentation": "y coordinate",
            "type": "number"
          },
          {
            "name": "z",
            "documentation": "z coordinate",
            "type": "number"
          },
          {
            "name": "w",
            "documentation": "w coordinate",
            "type": "number"
          }
        ],
        "returnType": "Quaternion",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "x",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "y",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "z",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "w",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "fromArray",
        "documentation": "",
        "type": "{ (n: number[]): Quaternion; (xyzw: number[], offset?: number): Quaternion; }"
      },
      {
        "name": "toArray",
        "documentation": "",
        "type": "{ (): number[]; (xyzw?: number[], offset?: number): number[]; }"
      },
      {
        "name": "onChangeCallback",
        "documentation": "",
        "type": "Function"
      }
    ],
    "methods": [
      {
        "name": "set",
        "documentation": "Sets values of this quaternion.",
        "type": "(x: number, y: number, z: number, w: number) => Quaternion"
      },
      {
        "name": "clone",
        "documentation": "Clones this quaternion.",
        "type": "() => this"
      },
      {
        "name": "copy",
        "documentation": "Copies values of q to this quaternion.",
        "type": "(q: this) => this"
      },
      {
        "name": "setFromEuler",
        "documentation": "Sets this quaternion from rotation specified by Euler angles.",
        "type": "(euler: Euler, update?: boolean) => Quaternion"
      },
      {
        "name": "setFromAxisAngle",
        "documentation": "Sets this quaternion from rotation specified by axis and angle.\r\nAdapted from http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm.\r\nAxis have to be normalized, angle is in radians.",
        "type": "(axis: Vector3, angle: number) => Quaternion"
      },
      {
        "name": "setFromRotationMatrix",
        "documentation": "Sets this quaternion from rotation component of m. Adapted from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm.",
        "type": "(m: Matrix4) => Quaternion"
      },
      {
        "name": "setFromUnitVectors",
        "documentation": "",
        "type": "(vFrom: Vector3, vTo: Vector3) => Quaternion"
      },
      {
        "name": "inverse",
        "documentation": "Inverts this quaternion.",
        "type": "() => Quaternion"
      },
      {
        "name": "conjugate",
        "documentation": "",
        "type": "() => Quaternion"
      },
      {
        "name": "dot",
        "documentation": "",
        "type": "(v: Quaternion) => number"
      },
      {
        "name": "lengthSq",
        "documentation": "",
        "type": "() => number"
      },
      {
        "name": "length",
        "documentation": "Computes length of this quaternion.",
        "type": "() => number"
      },
      {
        "name": "normalize",
        "documentation": "Normalizes this quaternion.",
        "type": "() => Quaternion"
      },
      {
        "name": "multiply",
        "documentation": "Multiplies this quaternion by b.",
        "type": "(q: Quaternion) => Quaternion"
      },
      {
        "name": "premultiply",
        "documentation": "",
        "type": "(q: Quaternion) => Quaternion"
      },
      {
        "name": "multiplyQuaternions",
        "documentation": "Sets this quaternion to a x b\r\nAdapted from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm.",
        "type": "(a: Quaternion, b: Quaternion) => Quaternion"
      },
      {
        "name": "slerp",
        "documentation": "",
        "type": "(qb: Quaternion, t: number) => Quaternion"
      },
      {
        "name": "equals",
        "documentation": "",
        "type": "(v: Quaternion) => boolean"
      },
      {
        "name": "onChange",
        "documentation": "",
        "type": "(callback: Function) => Quaternion"
      },
      {
        "name": "multiplyVector3",
        "documentation": "",
        "type": "(v: any) => any"
      }
    ]
  },
  {
    "name": "Ray",
    "documentation": "",
    "type": "typeof Ray",
    "constructors": [
      {
        "parameters": [
          {
            "name": "origin",
            "documentation": "",
            "type": "Vector3"
          },
          {
            "name": "direction",
            "documentation": "",
            "type": "Vector3"
          }
        ],
        "returnType": "Ray",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "origin",
        "documentation": "",
        "type": "Vector3"
      },
      {
        "name": "direction",
        "documentation": "",
        "type": "Vector3"
      }
    ],
    "methods": [
      {
        "name": "set",
        "documentation": "",
        "type": "(origin: Vector3, direction: Vector3) => Ray"
      },
      {
        "name": "clone",
        "documentation": "",
        "type": "() => this"
      },
      {
        "name": "copy",
        "documentation": "",
        "type": "(ray: this) => this"
      },
      {
        "name": "at",
        "documentation": "",
        "type": "(t: number, optionalTarget?: Vector3) => Vector3"
      },
      {
        "name": "lookAt",
        "documentation": "",
        "type": "(v: Vector3) => Vector3"
      },
      {
        "name": "recast",
        "documentation": "",
        "type": "(t: number) => Ray"
      },
      {
        "name": "closestPointToPoint",
        "documentation": "",
        "type": "(point: Vector3, optionalTarget?: Vector3) => Vector3"
      },
      {
        "name": "distanceToPoint",
        "documentation": "",
        "type": "(point: Vector3) => number"
      },
      {
        "name": "distanceSqToPoint",
        "documentation": "",
        "type": "(point: Vector3) => number"
      },
      {
        "name": "distanceSqToSegment",
        "documentation": "",
        "type": "(v0: Vector3, v1: Vector3, optionalPointOnRay?: Vector3, optionalPointOnSegment?: Vector3) => num..."
      },
      {
        "name": "intersectSphere",
        "documentation": "",
        "type": "(sphere: Sphere, optionalTarget?: Vector3) => Vector3"
      },
      {
        "name": "intersectsSphere",
        "documentation": "",
        "type": "(sphere: Sphere) => boolean"
      },
      {
        "name": "distanceToPlane",
        "documentation": "",
        "type": "(plane: Plane) => number"
      },
      {
        "name": "intersectPlane",
        "documentation": "",
        "type": "(plane: Plane, optionalTarget?: Vector3) => Vector3"
      },
      {
        "name": "intersectsPlane",
        "documentation": "",
        "type": "(plane: Plane) => boolean"
      },
      {
        "name": "intersectBox",
        "documentation": "",
        "type": "(box: Box3, optionalTarget?: Vector3) => Vector3"
      },
      {
        "name": "intersectsBox",
        "documentation": "",
        "type": "(box: Box3) => boolean"
      },
      {
        "name": "intersectTriangle",
        "documentation": "",
        "type": "(a: Vector3, b: Vector3, c: Vector3, backfaceCulling: boolean, optionalTarget?: Vector3) => Vector3"
      },
      {
        "name": "applyMatrix4",
        "documentation": "",
        "type": "(matrix4: Matrix4) => Ray"
      },
      {
        "name": "equals",
        "documentation": "",
        "type": "(ray: Ray) => boolean"
      },
      {
        "name": "isIntersectionBox",
        "documentation": "",
        "type": "(b: any) => any"
      },
      {
        "name": "isIntersectionPlane",
        "documentation": "",
        "type": "(p: any) => any"
      },
      {
        "name": "isIntersectionSphere",
        "documentation": "",
        "type": "(s: any) => any"
      }
    ]
  },
  {
    "name": "Sphere",
    "documentation": "",
    "type": "typeof Sphere",
    "constructors": [
      {
        "parameters": [
          {
            "name": "center",
            "documentation": "",
            "type": "Vector3"
          },
          {
            "name": "radius",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "Sphere",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "center",
        "documentation": "",
        "type": "Vector3"
      },
      {
        "name": "radius",
        "documentation": "",
        "type": "number"
      }
    ],
    "methods": [
      {
        "name": "set",
        "documentation": "",
        "type": "(center: Vector3, radius: number) => Sphere"
      },
      {
        "name": "setFromPoints",
        "documentation": "",
        "type": "(points: Vector3[], optionalCenter?: Vector3) => Sphere"
      },
      {
        "name": "clone",
        "documentation": "",
        "type": "() => this"
      },
      {
        "name": "copy",
        "documentation": "",
        "type": "(sphere: this) => this"
      },
      {
        "name": "empty",
        "documentation": "",
        "type": "() => boolean"
      },
      {
        "name": "containsPoint",
        "documentation": "",
        "type": "(point: Vector3) => boolean"
      },
      {
        "name": "distanceToPoint",
        "documentation": "",
        "type": "(point: Vector3) => number"
      },
      {
        "name": "intersectsSphere",
        "documentation": "",
        "type": "(sphere: Sphere) => boolean"
      },
      {
        "name": "intersectsBox",
        "documentation": "",
        "type": "(box: Box3) => boolean"
      },
      {
        "name": "intersectsPlane",
        "documentation": "",
        "type": "(plane: Plane) => boolean"
      },
      {
        "name": "clampPoint",
        "documentation": "",
        "type": "(point: Vector3, optionalTarget?: Vector3) => Vector3"
      },
      {
        "name": "getBoundingBox",
        "documentation": "",
        "type": "(optionalTarget?: Box3) => Box3"
      },
      {
        "name": "applyMatrix4",
        "documentation": "",
        "type": "(matrix: Matrix4) => Sphere"
      },
      {
        "name": "translate",
        "documentation": "",
        "type": "(offset: Vector3) => Sphere"
      },
      {
        "name": "equals",
        "documentation": "",
        "type": "(sphere: Sphere) => boolean"
      }
    ]
  },
  {
    "name": "Triangle",
    "documentation": "",
    "type": "typeof Triangle",
    "constructors": [
      {
        "parameters": [
          {
            "name": "a",
            "documentation": "",
            "type": "Vector3"
          },
          {
            "name": "b",
            "documentation": "",
            "type": "Vector3"
          },
          {
            "name": "c",
            "documentation": "",
            "type": "Vector3"
          }
        ],
        "returnType": "Triangle",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "a",
        "documentation": "",
        "type": "Vector3"
      },
      {
        "name": "b",
        "documentation": "",
        "type": "Vector3"
      },
      {
        "name": "c",
        "documentation": "",
        "type": "Vector3"
      }
    ],
    "methods": [
      {
        "name": "set",
        "documentation": "",
        "type": "(a: Vector3, b: Vector3, c: Vector3) => Triangle"
      },
      {
        "name": "setFromPointsAndIndices",
        "documentation": "",
        "type": "(points: Vector3[], i0: number, i1: number, i2: number) => Triangle"
      },
      {
        "name": "clone",
        "documentation": "",
        "type": "() => this"
      },
      {
        "name": "copy",
        "documentation": "",
        "type": "(triangle: this) => this"
      },
      {
        "name": "area",
        "documentation": "",
        "type": "() => number"
      },
      {
        "name": "midpoint",
        "documentation": "",
        "type": "(optionalTarget?: Vector3) => Vector3"
      },
      {
        "name": "normal",
        "documentation": "",
        "type": "(optionalTarget?: Vector3) => Vector3"
      },
      {
        "name": "plane",
        "documentation": "",
        "type": "(optionalTarget?: Vector3) => Plane"
      },
      {
        "name": "barycoordFromPoint",
        "documentation": "",
        "type": "(point: Vector3, optionalTarget?: Vector3) => Vector3"
      },
      {
        "name": "containsPoint",
        "documentation": "",
        "type": "(point: Vector3) => boolean"
      },
      {
        "name": "closestPointToPoint",
        "documentation": "",
        "type": "(point: Vector3, optionalTarget?: Vector3) => Vector3"
      },
      {
        "name": "equals",
        "documentation": "",
        "type": "(triangle: Triangle) => boolean"
      }
    ]
  },
  {
    "name": "Vector2",
    "documentation": "2D vector.\r\n\r\n( class Vector2 implements Vector<Vector2> )",
    "type": "typeof Vector2",
    "constructors": [
      {
        "parameters": [
          {
            "name": "x",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "y",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "Vector2",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "x",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "y",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "width",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "height",
        "documentation": "",
        "type": "number"
      }
    ],
    "methods": [
      {
        "name": "set",
        "documentation": "Sets value of this vector.",
        "type": "(x: number, y: number) => Vector2"
      },
      {
        "name": "setScalar",
        "documentation": "",
        "type": "(scalar: number) => Vector2"
      },
      {
        "name": "setX",
        "documentation": "Sets X component of this vector.",
        "type": "(x: number) => Vector2"
      },
      {
        "name": "setY",
        "documentation": "Sets Y component of this vector.",
        "type": "(y: number) => Vector2"
      },
      {
        "name": "setComponent",
        "documentation": "Sets a component of this vector.",
        "type": "(index: number, value: number) => void"
      },
      {
        "name": "getComponent",
        "documentation": "Gets a component of this vector.",
        "type": "(index: number) => number"
      },
      {
        "name": "clone",
        "documentation": "Clones this vector.",
        "type": "() => this"
      },
      {
        "name": "copy",
        "documentation": "Copies value of v to this vector.",
        "type": "(v: this) => this"
      },
      {
        "name": "add",
        "documentation": "Adds v to this vector.",
        "type": "(v: Vector2) => Vector2"
      },
      {
        "name": "addScalar",
        "documentation": "Sets this vector to a + b.",
        "type": "(s: number) => Vector2"
      },
      {
        "name": "addVectors",
        "documentation": "",
        "type": "(a: Vector2, b: Vector2) => Vector2"
      },
      {
        "name": "addScaledVector",
        "documentation": "",
        "type": "(v: Vector2, s: number) => Vector2"
      },
      {
        "name": "sub",
        "documentation": "Subtracts v from this vector.",
        "type": "(v: Vector2) => Vector2"
      },
      {
        "name": "subVectors",
        "documentation": "Sets this vector to a - b.",
        "type": "(a: Vector2, b: Vector2) => Vector2"
      },
      {
        "name": "multiply",
        "documentation": "",
        "type": "(v: Vector2) => Vector2"
      },
      {
        "name": "multiplyScalar",
        "documentation": "Multiplies this vector by scalar s.",
        "type": "(scalar: number) => Vector2"
      },
      {
        "name": "divide",
        "documentation": "",
        "type": "(v: Vector2) => Vector2"
      },
      {
        "name": "divideScalar",
        "documentation": "Divides this vector by scalar s.\r\nSet vector to ( 0, 0 ) if s == 0.",
        "type": "(s: number) => Vector2"
      },
      {
        "name": "min",
        "documentation": "",
        "type": "(v: Vector2) => Vector2"
      },
      {
        "name": "max",
        "documentation": "",
        "type": "(v: Vector2) => Vector2"
      },
      {
        "name": "clamp",
        "documentation": "",
        "type": "(min: Vector2, max: Vector2) => Vector2"
      },
      {
        "name": "clampScalar",
        "documentation": "",
        "type": "(min: number, max: number) => Vector2"
      },
      {
        "name": "clampLength",
        "documentation": "",
        "type": "(min: number, max: number) => Vector2"
      },
      {
        "name": "floor",
        "documentation": "",
        "type": "() => Vector2"
      },
      {
        "name": "ceil",
        "documentation": "",
        "type": "() => Vector2"
      },
      {
        "name": "round",
        "documentation": "",
        "type": "() => Vector2"
      },
      {
        "name": "roundToZero",
        "documentation": "",
        "type": "() => Vector2"
      },
      {
        "name": "negate",
        "documentation": "Inverts this vector.",
        "type": "() => Vector2"
      },
      {
        "name": "dot",
        "documentation": "Computes dot product of this vector and v.",
        "type": "(v: Vector2) => number"
      },
      {
        "name": "lengthSq",
        "documentation": "Computes squared length of this vector.",
        "type": "() => number"
      },
      {
        "name": "length",
        "documentation": "Computes length of this vector.",
        "type": "() => number"
      },
      {
        "name": "lengthManhattan",
        "documentation": "",
        "type": "() => number"
      },
      {
        "name": "normalize",
        "documentation": "Normalizes this vector.",
        "type": "() => Vector2"
      },
      {
        "name": "angle",
        "documentation": "computes the angle in radians with respect to the positive x-axis",
        "type": "() => number"
      },
      {
        "name": "distanceTo",
        "documentation": "Computes distance of this vector to v.",
        "type": "(v: Vector2) => number"
      },
      {
        "name": "distanceToSquared",
        "documentation": "Computes squared distance of this vector to v.",
        "type": "(v: Vector2) => number"
      },
      {
        "name": "distanceToManhattan",
        "documentation": "",
        "type": "(v: Vector2) => number"
      },
      {
        "name": "setLength",
        "documentation": "Normalizes this vector and multiplies it by l.",
        "type": "(length: number) => Vector2"
      },
      {
        "name": "lerp",
        "documentation": "",
        "type": "(v: Vector2, alpha: number) => Vector2"
      },
      {
        "name": "lerpVectors",
        "documentation": "",
        "type": "(v1: Vector2, v2: Vector2, alpha: number) => Vector2"
      },
      {
        "name": "equals",
        "documentation": "Checks for strict equality of this vector and v.",
        "type": "(v: Vector2) => boolean"
      },
      {
        "name": "fromArray",
        "documentation": "",
        "type": "(xy: number[], offset?: number) => Vector2"
      },
      {
        "name": "toArray",
        "documentation": "",
        "type": "(xy?: number[], offset?: number) => number[]"
      },
      {
        "name": "fromBufferAttribute",
        "documentation": "",
        "type": "(attribute: BufferAttribute, index: number, offset?: number) => Vector2"
      },
      {
        "name": "rotateAround",
        "documentation": "",
        "type": "(center: Vector2, angle: number) => Vector2"
      }
    ]
  },
  {
    "name": "Vector3",
    "documentation": "3D vector.",
    "type": "typeof Vector3",
    "constructors": [
      {
        "parameters": [
          {
            "name": "x",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "y",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "z",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "Vector3",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "x",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "y",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "z",
        "documentation": "",
        "type": "number"
      }
    ],
    "methods": [
      {
        "name": "set",
        "documentation": "Sets value of this vector.",
        "type": "(x: number, y: number, z: number) => Vector3"
      },
      {
        "name": "setScalar",
        "documentation": "Sets all values of this vector.",
        "type": "(scalar: number) => Vector3"
      },
      {
        "name": "setX",
        "documentation": "Sets x value of this vector.",
        "type": "(x: number) => Vector3"
      },
      {
        "name": "setY",
        "documentation": "Sets y value of this vector.",
        "type": "(y: number) => Vector3"
      },
      {
        "name": "setZ",
        "documentation": "Sets z value of this vector.",
        "type": "(z: number) => Vector3"
      },
      {
        "name": "setComponent",
        "documentation": "",
        "type": "(index: number, value: number) => void"
      },
      {
        "name": "getComponent",
        "documentation": "",
        "type": "(index: number) => number"
      },
      {
        "name": "clone",
        "documentation": "Clones this vector.",
        "type": "() => this"
      },
      {
        "name": "copy",
        "documentation": "Copies value of v to this vector.",
        "type": "(v: this) => this"
      },
      {
        "name": "add",
        "documentation": "Adds v to this vector.",
        "type": "(a: Vector3) => Vector3"
      },
      {
        "name": "addScalar",
        "documentation": "",
        "type": "(s: number) => Vector3"
      },
      {
        "name": "addScaledVector",
        "documentation": "",
        "type": "(v: Vector3, s: number) => Vector3"
      },
      {
        "name": "addVectors",
        "documentation": "Sets this vector to a + b.",
        "type": "(a: Vector3, b: Vector3) => Vector3"
      },
      {
        "name": "sub",
        "documentation": "Subtracts v from this vector.",
        "type": "(a: Vector3) => Vector3"
      },
      {
        "name": "subScalar",
        "documentation": "",
        "type": "(s: number) => Vector3"
      },
      {
        "name": "subVectors",
        "documentation": "Sets this vector to a - b.",
        "type": "(a: Vector3, b: Vector3) => Vector3"
      },
      {
        "name": "multiply",
        "documentation": "",
        "type": "(v: Vector3) => Vector3"
      },
      {
        "name": "multiplyScalar",
        "documentation": "Multiplies this vector by scalar s.",
        "type": "(s: number) => Vector3"
      },
      {
        "name": "multiplyVectors",
        "documentation": "",
        "type": "(a: Vector3, b: Vector3) => Vector3"
      },
      {
        "name": "applyEuler",
        "documentation": "",
        "type": "(euler: Euler) => Vector3"
      },
      {
        "name": "applyAxisAngle",
        "documentation": "",
        "type": "(axis: Vector3, angle: number) => Vector3"
      },
      {
        "name": "applyMatrix3",
        "documentation": "",
        "type": "(m: Matrix3) => Vector3"
      },
      {
        "name": "applyMatrix4",
        "documentation": "",
        "type": "(m: Matrix4) => Vector3"
      },
      {
        "name": "applyQuaternion",
        "documentation": "",
        "type": "(q: Quaternion) => Vector3"
      },
      {
        "name": "project",
        "documentation": "",
        "type": "(camrea: Camera) => Vector3"
      },
      {
        "name": "unproject",
        "documentation": "",
        "type": "(camera: Camera) => Vector3"
      },
      {
        "name": "transformDirection",
        "documentation": "",
        "type": "(m: Matrix4) => Vector3"
      },
      {
        "name": "divide",
        "documentation": "",
        "type": "(v: Vector3) => Vector3"
      },
      {
        "name": "divideScalar",
        "documentation": "Divides this vector by scalar s.\r\nSet vector to ( 0, 0, 0 ) if s == 0.",
        "type": "(s: number) => Vector3"
      },
      {
        "name": "min",
        "documentation": "",
        "type": "(v: Vector3) => Vector3"
      },
      {
        "name": "max",
        "documentation": "",
        "type": "(v: Vector3) => Vector3"
      },
      {
        "name": "clamp",
        "documentation": "",
        "type": "(min: Vector3, max: Vector3) => Vector3"
      },
      {
        "name": "clampScalar",
        "documentation": "",
        "type": "(min: number, max: number) => Vector3"
      },
      {
        "name": "clampLength",
        "documentation": "",
        "type": "(min: number, max: number) => Vector3"
      },
      {
        "name": "floor",
        "documentation": "",
        "type": "() => Vector3"
      },
      {
        "name": "ceil",
        "documentation": "",
        "type": "() => Vector3"
      },
      {
        "name": "round",
        "documentation": "",
        "type": "() => Vector3"
      },
      {
        "name": "roundToZero",
        "documentation": "",
        "type": "() => Vector3"
      },
      {
        "name": "negate",
        "documentation": "Inverts this vector.",
        "type": "() => Vector3"
      },
      {
        "name": "dot",
        "documentation": "Computes dot product of this vector and v.",
        "type": "(v: Vector3) => number"
      },
      {
        "name": "lengthSq",
        "documentation": "Computes squared length of this vector.",
        "type": "() => number"
      },
      {
        "name": "length",
        "documentation": "Computes length of this vector.",
        "type": "() => number"
      },
      {
        "name": "lengthManhattan",
        "documentation": "Computes Manhattan length of this vector.\r\nhttp://en.wikipedia.org/wiki/Taxicab_geometry",
        "type": "() => number"
      },
      {
        "name": "normalize",
        "documentation": "Normalizes this vector.",
        "type": "() => Vector3"
      },
      {
        "name": "setLength",
        "documentation": "Normalizes this vector and multiplies it by l.",
        "type": "(l: number) => Vector3"
      },
      {
        "name": "lerp",
        "documentation": "",
        "type": "(v: Vector3, alpha: number) => Vector3"
      },
      {
        "name": "lerpVectors",
        "documentation": "",
        "type": "(v1: Vector3, v2: Vector3, alpha: number) => Vector3"
      },
      {
        "name": "cross",
        "documentation": "Sets this vector to cross product of itself and v.",
        "type": "(a: Vector3) => Vector3"
      },
      {
        "name": "crossVectors",
        "documentation": "Sets this vector to cross product of a and b.",
        "type": "(a: Vector3, b: Vector3) => Vector3"
      },
      {
        "name": "projectOnVector",
        "documentation": "",
        "type": "(v: Vector3) => Vector3"
      },
      {
        "name": "projectOnPlane",
        "documentation": "",
        "type": "(planeNormal: Vector3) => Vector3"
      },
      {
        "name": "reflect",
        "documentation": "",
        "type": "(vector: Vector3) => Vector3"
      },
      {
        "name": "angleTo",
        "documentation": "",
        "type": "(v: Vector3) => number"
      },
      {
        "name": "distanceTo",
        "documentation": "Computes distance of this vector to v.",
        "type": "(v: Vector3) => number"
      },
      {
        "name": "distanceToSquared",
        "documentation": "Computes squared distance of this vector to v.",
        "type": "(v: Vector3) => number"
      },
      {
        "name": "distanceToManhattan",
        "documentation": "",
        "type": "(v: Vector3) => number"
      },
      {
        "name": "setFromSpherical",
        "documentation": "",
        "type": "(s: Spherical) => Vector3"
      },
      {
        "name": "setFromMatrixPosition",
        "documentation": "",
        "type": "(m: Matrix4) => Vector3"
      },
      {
        "name": "setFromMatrixScale",
        "documentation": "",
        "type": "(m: Matrix4) => Vector3"
      },
      {
        "name": "setFromMatrixColumn",
        "documentation": "",
        "type": "(matrix: Matrix4, index: number) => Vector3"
      },
      {
        "name": "equals",
        "documentation": "Checks for strict equality of this vector and v.",
        "type": "(v: Vector3) => boolean"
      },
      {
        "name": "fromArray",
        "documentation": "",
        "type": "(xyz: number[], offset?: number) => Vector3"
      },
      {
        "name": "toArray",
        "documentation": "",
        "type": "(xyz?: number[], offset?: number) => number[]"
      },
      {
        "name": "fromBufferAttribute",
        "documentation": "",
        "type": "(attribute: BufferAttribute, index: number, offset?: number) => Vector3"
      },
      {
        "name": "getPositionFromMatrix",
        "documentation": "",
        "type": "(m: Matrix4) => Vector3"
      },
      {
        "name": "getScaleFromMatrix",
        "documentation": "",
        "type": "(m: Matrix4) => Vector3"
      },
      {
        "name": "getColumnFromMatrix",
        "documentation": "",
        "type": "(index: number, matrix: Matrix4) => Vector3"
      }
    ]
  },
  {
    "name": "Vertex",
    "documentation": "",
    "type": "typeof Vertex",
    "constructors": [
      {
        "parameters": [
          {
            "name": "x",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "y",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "z",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "Vertex",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": []
  },
  {
    "name": "Vector4",
    "documentation": "4D vector.\r\n\r\n( class Vector4 implements Vector<Vector4> )",
    "type": "typeof Vector4",
    "constructors": [
      {
        "parameters": [
          {
            "name": "x",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "y",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "z",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "w",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "Vector4",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "x",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "y",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "z",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "w",
        "documentation": "",
        "type": "number"
      }
    ],
    "methods": [
      {
        "name": "set",
        "documentation": "Sets value of this vector.",
        "type": "(x: number, y: number, z: number, w: number) => Vector4"
      },
      {
        "name": "setScalar",
        "documentation": "Sets all values of this vector.",
        "type": "(scalar: number) => Vector4"
      },
      {
        "name": "setX",
        "documentation": "Sets X component of this vector.",
        "type": "(x: number) => Vector4"
      },
      {
        "name": "setY",
        "documentation": "Sets Y component of this vector.",
        "type": "(y: number) => Vector4"
      },
      {
        "name": "setZ",
        "documentation": "Sets Z component of this vector.",
        "type": "(z: number) => Vector4"
      },
      {
        "name": "setW",
        "documentation": "Sets w component of this vector.",
        "type": "(w: number) => Vector4"
      },
      {
        "name": "setComponent",
        "documentation": "",
        "type": "(index: number, value: number) => void"
      },
      {
        "name": "getComponent",
        "documentation": "",
        "type": "(index: number) => number"
      },
      {
        "name": "clone",
        "documentation": "Clones this vector.",
        "type": "() => this"
      },
      {
        "name": "copy",
        "documentation": "Copies value of v to this vector.",
        "type": "(v: this) => this"
      },
      {
        "name": "add",
        "documentation": "Adds v to this vector.",
        "type": "(v: Vector4) => Vector4"
      },
      {
        "name": "addScalar",
        "documentation": "",
        "type": "(s: number) => Vector4"
      },
      {
        "name": "addVectors",
        "documentation": "Sets this vector to a + b.",
        "type": "(a: Vector4, b: Vector4) => Vector4"
      },
      {
        "name": "addScaledVector",
        "documentation": "",
        "type": "(v: Vector4, s: number) => Vector4"
      },
      {
        "name": "sub",
        "documentation": "Subtracts v from this vector.",
        "type": "(v: Vector4) => Vector4"
      },
      {
        "name": "subScalar",
        "documentation": "",
        "type": "(s: number) => Vector4"
      },
      {
        "name": "subVectors",
        "documentation": "Sets this vector to a - b.",
        "type": "(a: Vector4, b: Vector4) => Vector4"
      },
      {
        "name": "multiplyScalar",
        "documentation": "Multiplies this vector by scalar s.",
        "type": "(s: number) => Vector4"
      },
      {
        "name": "applyMatrix4",
        "documentation": "",
        "type": "(m: Matrix4) => Vector4"
      },
      {
        "name": "divideScalar",
        "documentation": "Divides this vector by scalar s.\r\nSet vector to ( 0, 0, 0 ) if s == 0.",
        "type": "(s: number) => Vector4"
      },
      {
        "name": "setAxisAngleFromQuaternion",
        "documentation": "http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm",
        "type": "(q: Quaternion) => Vector4"
      },
      {
        "name": "setAxisAngleFromRotationMatrix",
        "documentation": "http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm",
        "type": "(m: Matrix3) => Vector4"
      },
      {
        "name": "min",
        "documentation": "",
        "type": "(v: Vector4) => Vector4"
      },
      {
        "name": "max",
        "documentation": "",
        "type": "(v: Vector4) => Vector4"
      },
      {
        "name": "clamp",
        "documentation": "",
        "type": "(min: Vector4, max: Vector4) => Vector4"
      },
      {
        "name": "clampScalar",
        "documentation": "",
        "type": "(min: number, max: number) => Vector4"
      },
      {
        "name": "floor",
        "documentation": "",
        "type": "() => Vector4"
      },
      {
        "name": "ceil",
        "documentation": "",
        "type": "() => Vector4"
      },
      {
        "name": "round",
        "documentation": "",
        "type": "() => Vector4"
      },
      {
        "name": "roundToZero",
        "documentation": "",
        "type": "() => Vector4"
      },
      {
        "name": "negate",
        "documentation": "Inverts this vector.",
        "type": "() => Vector4"
      },
      {
        "name": "dot",
        "documentation": "Computes dot product of this vector and v.",
        "type": "(v: Vector4) => number"
      },
      {
        "name": "lengthSq",
        "documentation": "Computes squared length of this vector.",
        "type": "() => number"
      },
      {
        "name": "length",
        "documentation": "Computes length of this vector.",
        "type": "() => number"
      },
      {
        "name": "lengthManhattan",
        "documentation": "",
        "type": "() => number"
      },
      {
        "name": "normalize",
        "documentation": "Normalizes this vector.",
        "type": "() => Vector4"
      },
      {
        "name": "setLength",
        "documentation": "Normalizes this vector and multiplies it by l.",
        "type": "(length: number) => Vector4"
      },
      {
        "name": "lerp",
        "documentation": "Linearly interpolate between this vector and v with alpha factor.",
        "type": "(v: Vector4, alpha: number) => Vector4"
      },
      {
        "name": "lerpVectors",
        "documentation": "",
        "type": "(v1: Vector4, v2: Vector4, alpha: number) => Vector4"
      },
      {
        "name": "equals",
        "documentation": "Checks for strict equality of this vector and v.",
        "type": "(v: Vector4) => boolean"
      },
      {
        "name": "fromArray",
        "documentation": "",
        "type": "(xyzw: number[], offset?: number) => Vector4"
      },
      {
        "name": "toArray",
        "documentation": "",
        "type": "(xyzw?: number[], offset?: number) => number[]"
      },
      {
        "name": "fromBufferAttribute",
        "documentation": "",
        "type": "(attribute: BufferAttribute, index: number, offset?: number) => Vector4"
      }
    ]
  },
  {
    "name": "Interpolant",
    "documentation": "",
    "type": "typeof Interpolant",
    "constructors": [
      {
        "parameters": [
          {
            "name": "parameterPositions",
            "documentation": "",
            "type": "any"
          },
          {
            "name": "samplesValues",
            "documentation": "",
            "type": "any"
          },
          {
            "name": "sampleSize",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "resultBuffer",
            "documentation": "",
            "type": "any"
          }
        ],
        "returnType": "Interpolant",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "parameterPositions",
        "documentation": "",
        "type": "any"
      },
      {
        "name": "samplesValues",
        "documentation": "",
        "type": "any"
      },
      {
        "name": "valueSize",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "resultBuffer",
        "documentation": "",
        "type": "any"
      }
    ],
    "methods": [
      {
        "name": "evaluate",
        "documentation": "",
        "type": "(time: number) => any"
      }
    ]
  },
  {
    "name": "CubicInterpolant",
    "documentation": "",
    "type": "typeof CubicInterpolant",
    "constructors": [
      {
        "parameters": [
          {
            "name": "parameterPositions",
            "documentation": "",
            "type": "any"
          },
          {
            "name": "samplesValues",
            "documentation": "",
            "type": "any"
          },
          {
            "name": "sampleSize",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "resultBuffer",
            "documentation": "",
            "type": "any"
          }
        ],
        "returnType": "CubicInterpolant",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": [
      {
        "name": "interpolate_",
        "documentation": "",
        "type": "(i1: number, t0: number, t: number, t1: number) => any"
      }
    ]
  },
  {
    "name": "DiscreteInterpolant",
    "documentation": "",
    "type": "typeof DiscreteInterpolant",
    "constructors": [
      {
        "parameters": [
          {
            "name": "parameterPositions",
            "documentation": "",
            "type": "any"
          },
          {
            "name": "samplesValues",
            "documentation": "",
            "type": "any"
          },
          {
            "name": "sampleSize",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "resultBuffer",
            "documentation": "",
            "type": "any"
          }
        ],
        "returnType": "DiscreteInterpolant",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": [
      {
        "name": "interpolate_",
        "documentation": "",
        "type": "(i1: number, t0: number, t: number, t1: number) => any"
      }
    ]
  },
  {
    "name": "LinearInterpolant",
    "documentation": "",
    "type": "typeof LinearInterpolant",
    "constructors": [
      {
        "parameters": [
          {
            "name": "parameterPositions",
            "documentation": "",
            "type": "any"
          },
          {
            "name": "samplesValues",
            "documentation": "",
            "type": "any"
          },
          {
            "name": "sampleSize",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "resultBuffer",
            "documentation": "",
            "type": "any"
          }
        ],
        "returnType": "LinearInterpolant",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": [
      {
        "name": "interpolate_",
        "documentation": "",
        "type": "(i1: number, t0: number, t: number, t1: number) => any"
      }
    ]
  },
  {
    "name": "QuaternionLinearInterpolant",
    "documentation": "",
    "type": "typeof QuaternionLinearInterpolant",
    "constructors": [
      {
        "parameters": [
          {
            "name": "parameterPositions",
            "documentation": "",
            "type": "any"
          },
          {
            "name": "samplesValues",
            "documentation": "",
            "type": "any"
          },
          {
            "name": "sampleSize",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "resultBuffer",
            "documentation": "",
            "type": "any"
          }
        ],
        "returnType": "QuaternionLinearInterpolant",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": [
      {
        "name": "interpolate_",
        "documentation": "",
        "type": "(i1: number, t0: number, t: number, t1: number) => any"
      }
    ]
  },
  {
    "name": "Bone",
    "documentation": "",
    "type": "typeof Bone",
    "constructors": [
      {
        "parameters": [
          {
            "name": "skin",
            "documentation": "",
            "type": "SkinnedMesh"
          }
        ],
        "returnType": "Bone",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "skin",
        "documentation": "",
        "type": "SkinnedMesh"
      }
    ],
    "methods": []
  },
  {
    "name": "Group",
    "documentation": "",
    "type": "typeof Group",
    "constructors": [
      {
        "parameters": [],
        "returnType": "Group",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": []
  },
  {
    "name": "LOD",
    "documentation": "",
    "type": "typeof LOD",
    "constructors": [
      {
        "parameters": [],
        "returnType": "LOD",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "levels",
        "documentation": "",
        "type": "any[]"
      },
      {
        "name": "objects",
        "documentation": "",
        "type": "any[]"
      }
    ],
    "methods": [
      {
        "name": "addLevel",
        "documentation": "",
        "type": "(object: Object3D, distance?: number) => void"
      },
      {
        "name": "getObjectForDistance",
        "documentation": "",
        "type": "(distance: number) => Object3D"
      },
      {
        "name": "raycast",
        "documentation": "",
        "type": "(raycaster: Raycaster, intersects: any) => void"
      },
      {
        "name": "update",
        "documentation": "",
        "type": "(camera: Camera) => void"
      },
      {
        "name": "toJSON",
        "documentation": "",
        "type": "(meta: any) => any"
      }
    ]
  },
  {
    "name": "LensFlare",
    "documentation": "",
    "type": "typeof LensFlare",
    "constructors": [
      {
        "parameters": [
          {
            "name": "texture",
            "documentation": "",
            "type": "Texture"
          },
          {
            "name": "size",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "distance",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "blending",
            "documentation": "",
            "type": "Blending"
          },
          {
            "name": "color",
            "documentation": "",
            "type": "Color"
          }
        ],
        "returnType": "LensFlare",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "lensFlares",
        "documentation": "",
        "type": "LensFlareProperty[]"
      },
      {
        "name": "positionScreen",
        "documentation": "",
        "type": "Vector3"
      },
      {
        "name": "add",
        "documentation": "",
        "type": "{ (object: Object3D): void; (texture: Texture, size?: number, distance?: number, blending?: Blend..."
      }
    ],
    "methods": [
      {
        "name": "customUpdateCallback",
        "documentation": "",
        "type": "(object: LensFlare) => void"
      },
      {
        "name": "updateLensFlares",
        "documentation": "",
        "type": "() => void"
      }
    ]
  },
  {
    "name": "Line",
    "documentation": "",
    "type": "typeof Line",
    "constructors": [
      {
        "parameters": [
          {
            "name": "geometry",
            "documentation": "",
            "type": "BufferGeometry | Geometry"
          },
          {
            "name": "material",
            "documentation": "",
            "type": "LineBasicMaterial | LineDashedMaterial | ShaderMaterial"
          },
          {
            "name": "mode",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "Line",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "geometry",
        "documentation": "",
        "type": "BufferGeometry | Geometry"
      },
      {
        "name": "material",
        "documentation": "",
        "type": "Material"
      }
    ],
    "methods": [
      {
        "name": "raycast",
        "documentation": "",
        "type": "(raycaster: Raycaster, intersects: any) => void"
      }
    ]
  },
  {
    "name": "LineSegments",
    "documentation": "",
    "type": "typeof LineSegments",
    "constructors": [
      {
        "parameters": [
          {
            "name": "geometry",
            "documentation": "",
            "type": "BufferGeometry | Geometry"
          },
          {
            "name": "material",
            "documentation": "",
            "type": "LineBasicMaterial | LineDashedMaterial | ShaderMaterial | (LineBasicMaterial | LineDashedMaterial..."
          },
          {
            "name": "mode",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "LineSegments",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": []
  },
  {
    "name": "Mesh",
    "documentation": "",
    "type": "typeof Mesh",
    "constructors": [
      {
        "parameters": [
          {
            "name": "geometry",
            "documentation": "",
            "type": "BufferGeometry | Geometry"
          },
          {
            "name": "material",
            "documentation": "",
            "type": "Material | Material[]"
          }
        ],
        "returnType": "Mesh",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "geometry",
        "documentation": "",
        "type": "BufferGeometry | Geometry"
      },
      {
        "name": "material",
        "documentation": "",
        "type": "Material | Material[]"
      },
      {
        "name": "drawMode",
        "documentation": "",
        "type": "TrianglesDrawModes"
      }
    ],
    "methods": [
      {
        "name": "setDrawMode",
        "documentation": "",
        "type": "(drawMode: TrianglesDrawModes) => void"
      },
      {
        "name": "updateMorphTargets",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "getMorphTargetIndexByName",
        "documentation": "",
        "type": "(name: string) => number"
      },
      {
        "name": "raycast",
        "documentation": "",
        "type": "(raycaster: Raycaster, intersects: any) => void"
      }
    ]
  },
  {
    "name": "Points",
    "documentation": "A class for displaying particles in the form of variable size points. For example, if using the WebGLRenderer, the particles are displayed using GL_POINTS.",
    "type": "typeof Points",
    "constructors": [
      {
        "parameters": [
          {
            "name": "geometry",
            "documentation": "An instance of Geometry or BufferGeometry.",
            "type": "BufferGeometry | Geometry"
          },
          {
            "name": "material",
            "documentation": "An instance of Material (optional).",
            "type": "Material"
          }
        ],
        "returnType": "Points",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "geometry",
        "documentation": "An instance of Geometry or BufferGeometry, where each vertex designates the position of a particle in the system.",
        "type": "BufferGeometry | Geometry"
      },
      {
        "name": "material",
        "documentation": "An instance of Material, defining the object's appearance. Default is a PointsMaterial with randomised colour.",
        "type": "Material"
      }
    ],
    "methods": [
      {
        "name": "raycast",
        "documentation": "",
        "type": "(raycaster: Raycaster, intersects: any) => void"
      }
    ]
  },
  {
    "name": "PointCloud",
    "documentation": "",
    "type": "typeof PointCloud",
    "constructors": [
      {
        "parameters": [
          {
            "name": "geometry",
            "documentation": "An instance of Geometry or BufferGeometry.",
            "type": "BufferGeometry | Geometry"
          },
          {
            "name": "material",
            "documentation": "An instance of Material (optional).",
            "type": "Material"
          }
        ],
        "returnType": "PointCloud",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": []
  },
  {
    "name": "ParticleSystem",
    "documentation": "",
    "type": "typeof ParticleSystem",
    "constructors": [
      {
        "parameters": [
          {
            "name": "geometry",
            "documentation": "An instance of Geometry or BufferGeometry.",
            "type": "BufferGeometry | Geometry"
          },
          {
            "name": "material",
            "documentation": "An instance of Material (optional).",
            "type": "Material"
          }
        ],
        "returnType": "ParticleSystem",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": []
  },
  {
    "name": "Skeleton",
    "documentation": "",
    "type": "typeof Skeleton",
    "constructors": [
      {
        "parameters": [
          {
            "name": "bones",
            "documentation": "",
            "type": "Bone[]"
          },
          {
            "name": "boneInverses",
            "documentation": "",
            "type": "Matrix4[]"
          },
          {
            "name": "useVertexTexture",
            "documentation": "",
            "type": "boolean"
          }
        ],
        "returnType": "Skeleton",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "useVertexTexture",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "identityMatrix",
        "documentation": "",
        "type": "Matrix4"
      },
      {
        "name": "bones",
        "documentation": "",
        "type": "Bone[]"
      },
      {
        "name": "boneTextureWidth",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "boneTextureHeight",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "boneMatrices",
        "documentation": "",
        "type": "Float32Array"
      },
      {
        "name": "boneTexture",
        "documentation": "",
        "type": "DataTexture"
      },
      {
        "name": "boneInverses",
        "documentation": "",
        "type": "Matrix4[]"
      }
    ],
    "methods": [
      {
        "name": "calculateInverses",
        "documentation": "",
        "type": "(bone: Bone) => void"
      },
      {
        "name": "pose",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "update",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "clone",
        "documentation": "",
        "type": "() => this"
      }
    ]
  },
  {
    "name": "SkinnedMesh",
    "documentation": "",
    "type": "typeof SkinnedMesh",
    "constructors": [
      {
        "parameters": [
          {
            "name": "geometry",
            "documentation": "",
            "type": "BufferGeometry | Geometry"
          },
          {
            "name": "material",
            "documentation": "",
            "type": "MeshBasicMaterial"
          },
          {
            "name": "useVertexTexture",
            "documentation": "",
            "type": "boolean"
          }
        ],
        "returnType": "SkinnedMesh",
        "documentation": ""
      },
      {
        "parameters": [
          {
            "name": "geometry",
            "documentation": "",
            "type": "BufferGeometry | Geometry"
          },
          {
            "name": "material",
            "documentation": "",
            "type": "MeshDepthMaterial"
          },
          {
            "name": "useVertexTexture",
            "documentation": "",
            "type": "boolean"
          }
        ],
        "returnType": "SkinnedMesh",
        "documentation": ""
      },
      {
        "parameters": [
          {
            "name": "geometry",
            "documentation": "",
            "type": "BufferGeometry | Geometry"
          },
          {
            "name": "material",
            "documentation": "",
            "type": "MultiMaterial"
          },
          {
            "name": "useVertexTexture",
            "documentation": "",
            "type": "boolean"
          }
        ],
        "returnType": "SkinnedMesh",
        "documentation": ""
      },
      {
        "parameters": [
          {
            "name": "geometry",
            "documentation": "",
            "type": "BufferGeometry | Geometry"
          },
          {
            "name": "material",
            "documentation": "",
            "type": "MeshLambertMaterial"
          },
          {
            "name": "useVertexTexture",
            "documentation": "",
            "type": "boolean"
          }
        ],
        "returnType": "SkinnedMesh",
        "documentation": ""
      },
      {
        "parameters": [
          {
            "name": "geometry",
            "documentation": "",
            "type": "BufferGeometry | Geometry"
          },
          {
            "name": "material",
            "documentation": "",
            "type": "MeshNormalMaterial"
          },
          {
            "name": "useVertexTexture",
            "documentation": "",
            "type": "boolean"
          }
        ],
        "returnType": "SkinnedMesh",
        "documentation": ""
      },
      {
        "parameters": [
          {
            "name": "geometry",
            "documentation": "",
            "type": "BufferGeometry | Geometry"
          },
          {
            "name": "material",
            "documentation": "",
            "type": "MeshPhongMaterial"
          },
          {
            "name": "useVertexTexture",
            "documentation": "",
            "type": "boolean"
          }
        ],
        "returnType": "SkinnedMesh",
        "documentation": ""
      },
      {
        "parameters": [
          {
            "name": "geometry",
            "documentation": "",
            "type": "BufferGeometry | Geometry"
          },
          {
            "name": "material",
            "documentation": "",
            "type": "ShaderMaterial"
          },
          {
            "name": "useVertexTexture",
            "documentation": "",
            "type": "boolean"
          }
        ],
        "returnType": "SkinnedMesh",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "bindMode",
        "documentation": "",
        "type": "string"
      },
      {
        "name": "bindMatrix",
        "documentation": "",
        "type": "Matrix4"
      },
      {
        "name": "bindMatrixInverse",
        "documentation": "",
        "type": "Matrix4"
      },
      {
        "name": "skeleton",
        "documentation": "",
        "type": "Skeleton"
      }
    ],
    "methods": [
      {
        "name": "bind",
        "documentation": "",
        "type": "(skeleton: Skeleton, bindMatrix?: Matrix4) => void"
      },
      {
        "name": "pose",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "normalizeSkinWeights",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "updateMatrixWorld",
        "documentation": "",
        "type": "(force?: boolean) => void"
      }
    ]
  },
  {
    "name": "Sprite",
    "documentation": "",
    "type": "typeof Sprite",
    "constructors": [
      {
        "parameters": [
          {
            "name": "material",
            "documentation": "",
            "type": "Material"
          }
        ],
        "returnType": "Sprite",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "geometry",
        "documentation": "",
        "type": "BufferGeometry"
      },
      {
        "name": "material",
        "documentation": "",
        "type": "SpriteMaterial"
      }
    ],
    "methods": [
      {
        "name": "raycast",
        "documentation": "",
        "type": "(raycaster: Raycaster, intersects: any) => void"
      }
    ]
  },
  {
    "name": "Particle",
    "documentation": "",
    "type": "typeof Particle",
    "constructors": [
      {
        "parameters": [
          {
            "name": "material",
            "documentation": "",
            "type": "Material"
          }
        ],
        "returnType": "Particle",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": []
  },
  {
    "name": "WebGLRenderer",
    "documentation": "The WebGL renderer displays your beautifully crafted scenes using WebGL, if your device supports it.\r\nThis renderer has way better performance than CanvasRenderer.",
    "type": "typeof WebGLRenderer",
    "constructors": [
      {
        "parameters": [
          {
            "name": "parameters",
            "documentation": "",
            "type": "WebGLRendererParameters"
          }
        ],
        "returnType": "WebGLRenderer",
        "documentation": "parameters is an optional object with properties defining the renderer's behaviour. The constructor also accepts no parameters at all. In all cases, it will assume sane defaults when parameters are missing."
      }
    ],
    "properties": [
      {
        "name": "domElement",
        "documentation": "A Canvas where the renderer draws its output.\r\nThis is automatically created by the renderer in the constructor (if not provided already); you just need to add it to your page.",
        "type": "HTMLCanvasElement"
      },
      {
        "name": "context",
        "documentation": "The HTML5 Canvas's 'webgl' context obtained from the canvas where the renderer will draw.",
        "type": "WebGLRenderingContext"
      },
      {
        "name": "autoClear",
        "documentation": "Defines whether the renderer should automatically clear its output before rendering.",
        "type": "boolean"
      },
      {
        "name": "autoClearColor",
        "documentation": "If autoClear is true, defines whether the renderer should clear the color buffer. Default is true.",
        "type": "boolean"
      },
      {
        "name": "autoClearDepth",
        "documentation": "If autoClear is true, defines whether the renderer should clear the depth buffer. Default is true.",
        "type": "boolean"
      },
      {
        "name": "autoClearStencil",
        "documentation": "If autoClear is true, defines whether the renderer should clear the stencil buffer. Default is true.",
        "type": "boolean"
      },
      {
        "name": "sortObjects",
        "documentation": "Defines whether the renderer should sort objects. Default is true.",
        "type": "boolean"
      },
      {
        "name": "clippingPlanes",
        "documentation": "",
        "type": "any[]"
      },
      {
        "name": "localClippingEnabled",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "extensions",
        "documentation": "",
        "type": "WebGLExtensions"
      },
      {
        "name": "gammaInput",
        "documentation": "Default is false.",
        "type": "boolean"
      },
      {
        "name": "gammaOutput",
        "documentation": "Default is false.",
        "type": "boolean"
      },
      {
        "name": "physicallyCorrectLights",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "toneMapping",
        "documentation": "",
        "type": "ToneMapping"
      },
      {
        "name": "toneMappingExposure",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "toneMappingWhitePoint",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "shadowMapDebug",
        "documentation": "Default is false.",
        "type": "boolean"
      },
      {
        "name": "maxMorphTargets",
        "documentation": "Default is 8.",
        "type": "number"
      },
      {
        "name": "maxMorphNormals",
        "documentation": "Default is 4.",
        "type": "number"
      },
      {
        "name": "info",
        "documentation": "An object with a series of statistical information about the graphics board memory and the rendering process. Useful for debugging or just for the sake of curiosity. The object contains the following fields:",
        "type": "{ memory: { geometries: number; textures: number; }; render: { calls: number; vertices: number; f..."
      },
      {
        "name": "shadowMap",
        "documentation": "",
        "type": "WebGLShadowMap"
      },
      {
        "name": "pixelRation",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "capabilities",
        "documentation": "",
        "type": "WebGLCapabilities"
      },
      {
        "name": "properties",
        "documentation": "",
        "type": "WebGLProperties"
      },
      {
        "name": "renderLists",
        "documentation": "",
        "type": "WebGLRenderLists"
      },
      {
        "name": "state",
        "documentation": "",
        "type": "WebGLState"
      },
      {
        "name": "allocTextureUnit",
        "documentation": "",
        "type": "any"
      },
      {
        "name": "setClearColor",
        "documentation": "Sets the clear color, using color for the color and alpha for the opacity.",
        "type": "{ (color: Color, alpha?: number): void; (color: string, alpha?: number): void; (color: number, al..."
      },
      {
        "name": "gammaFactor",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "shadowMapEnabled",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "shadowMapType",
        "documentation": "",
        "type": "ShadowMapType"
      },
      {
        "name": "shadowMapCullFace",
        "documentation": "",
        "type": "CullFace"
      }
    ],
    "methods": [
      {
        "name": "getContext",
        "documentation": "Return the WebGL context.",
        "type": "() => WebGLRenderingContext"
      },
      {
        "name": "getContextAttributes",
        "documentation": "",
        "type": "() => any"
      },
      {
        "name": "forceContextLoss",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "getMaxAnisotropy",
        "documentation": "",
        "type": "() => number"
      },
      {
        "name": "getPrecision",
        "documentation": "",
        "type": "() => string"
      },
      {
        "name": "getPixelRatio",
        "documentation": "",
        "type": "() => number"
      },
      {
        "name": "setPixelRatio",
        "documentation": "",
        "type": "(value: number) => void"
      },
      {
        "name": "getSize",
        "documentation": "",
        "type": "() => { width: number; height: number; }"
      },
      {
        "name": "setSize",
        "documentation": "Resizes the output canvas to (width, height), and also sets the viewport to fit that size, starting in (0, 0).",
        "type": "(width: number, height: number, updateStyle?: boolean) => void"
      },
      {
        "name": "setViewport",
        "documentation": "Sets the viewport to render from (x, y) to (x + width, y + height).",
        "type": "(x?: number, y?: number, width?: number, height?: number) => void"
      },
      {
        "name": "setScissor",
        "documentation": "Sets the scissor area from (x, y) to (x + width, y + height).",
        "type": "(x: number, y: number, width: number, height: number) => void"
      },
      {
        "name": "setScissorTest",
        "documentation": "Enable the scissor test. When this is enabled, only the pixels within the defined scissor area will be affected by further renderer actions.",
        "type": "(enable: boolean) => void"
      },
      {
        "name": "getClearColor",
        "documentation": "Returns a THREE.Color instance with the current clear color.",
        "type": "() => Color"
      },
      {
        "name": "getClearAlpha",
        "documentation": "Returns a float with the current clear alpha. Ranges from 0 to 1.",
        "type": "() => number"
      },
      {
        "name": "setClearAlpha",
        "documentation": "",
        "type": "(alpha: number) => void"
      },
      {
        "name": "clear",
        "documentation": "Tells the renderer to clear its color, depth or stencil drawing buffer(s).\r\nArguments default to true",
        "type": "(color?: boolean, depth?: boolean, stencil?: boolean) => void"
      },
      {
        "name": "clearColor",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "clearDepth",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "clearStencil",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "clearTarget",
        "documentation": "",
        "type": "(renderTarget: WebGLRenderTarget, color: boolean, depth: boolean, stencil: boolean) => void"
      },
      {
        "name": "resetGLState",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "dispose",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "renderBufferImmediate",
        "documentation": "Tells the shadow map plugin to update using the passed scene and camera parameters.",
        "type": "(object: Object3D, program: Object, material: Material) => void"
      },
      {
        "name": "renderBufferDirect",
        "documentation": "",
        "type": "(camera: Camera, fog: Fog, material: Material, geometryGroup: any, object: Object3D) => void"
      },
      {
        "name": "render",
        "documentation": "Render a scene using a camera.\r\nThe render is done to the renderTarget (if specified) or to the canvas as usual.\r\nIf forceClear is true, the canvas will be cleared before rendering, even if the renderer's autoClear property is false.",
        "type": "(scene: Scene, camera: Camera, renderTarget?: RenderTarget, forceClear?: boolean) => void"
      },
      {
        "name": "setFaceCulling",
        "documentation": "Used for setting the gl frontFace, cullFace states in the GPU, thus enabling/disabling face culling when rendering.\r\nIf cullFace is false, culling will be disabled.",
        "type": "(cullFace?: CullFace, frontFace?: FrontFaceDirection) => void"
      },
      {
        "name": "setTexture",
        "documentation": "",
        "type": "(texture: Texture, slot: number) => void"
      },
      {
        "name": "setTexture2D",
        "documentation": "",
        "type": "(texture: Texture, slot: number) => void"
      },
      {
        "name": "setTextureCube",
        "documentation": "",
        "type": "(texture: Texture, slot: number) => void"
      },
      {
        "name": "getCurrentRenderTarget",
        "documentation": "",
        "type": "() => RenderTarget"
      },
      {
        "name": "setRenderTarget",
        "documentation": "",
        "type": "(renderTarget: RenderTarget) => void"
      },
      {
        "name": "readRenderTargetPixels",
        "documentation": "",
        "type": "(renderTarget: RenderTarget, x: number, y: number, width: number, height: number, buffer: any) =>..."
      },
      {
        "name": "supportsFloatTextures",
        "documentation": "",
        "type": "() => any"
      },
      {
        "name": "supportsHalfFloatTextures",
        "documentation": "",
        "type": "() => any"
      },
      {
        "name": "supportsStandardDerivatives",
        "documentation": "",
        "type": "() => any"
      },
      {
        "name": "supportsCompressedTextureS3TC",
        "documentation": "",
        "type": "() => any"
      },
      {
        "name": "supportsCompressedTexturePVRTC",
        "documentation": "",
        "type": "() => any"
      },
      {
        "name": "supportsBlendMinMax",
        "documentation": "",
        "type": "() => any"
      },
      {
        "name": "supportsVertexTextures",
        "documentation": "",
        "type": "() => any"
      },
      {
        "name": "supportsInstancedArrays",
        "documentation": "",
        "type": "() => any"
      },
      {
        "name": "enableScissorTest",
        "documentation": "",
        "type": "(boolean: any) => any"
      }
    ]
  },
  {
    "name": "WebGLRenderList",
    "documentation": "",
    "type": "typeof WebGLRenderList",
    "constructors": [
      {
        "parameters": [],
        "returnType": "WebGLRenderList",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "transparent",
        "documentation": "",
        "type": "any[]"
      }
    ],
    "methods": [
      {
        "name": "init",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "push",
        "documentation": "",
        "type": "(object: Object3D, geometry: BufferGeometry | Geometry, material: Material, z: number, group: Gro..."
      },
      {
        "name": "sort",
        "documentation": "",
        "type": "() => void"
      }
    ]
  },
  {
    "name": "WebGLRenderLists",
    "documentation": "",
    "type": "typeof WebGLRenderLists",
    "constructors": [
      {
        "parameters": [],
        "returnType": "WebGLRenderLists",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": [
      {
        "name": "get",
        "documentation": "returns {<String> : <WebGLRenderList>}",
        "type": "(scene: Scene, camera: Camera) => WebGLRenderList"
      }
    ]
  },
  {
    "name": "WebGLRenderTarget",
    "documentation": "",
    "type": "typeof WebGLRenderTarget",
    "constructors": [
      {
        "parameters": [
          {
            "name": "width",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "height",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "options",
            "documentation": "",
            "type": "WebGLRenderTargetOptions"
          }
        ],
        "returnType": "WebGLRenderTarget",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "uuid",
        "documentation": "",
        "type": "string"
      },
      {
        "name": "width",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "height",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "scissor",
        "documentation": "",
        "type": "Vector4"
      },
      {
        "name": "scissorTest",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "viewport",
        "documentation": "",
        "type": "Vector4"
      },
      {
        "name": "texture",
        "documentation": "",
        "type": "Texture"
      },
      {
        "name": "depthBuffer",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "stencilBuffer",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "depthTexture",
        "documentation": "",
        "type": "Texture"
      },
      {
        "name": "wrapS",
        "documentation": "",
        "type": "any"
      },
      {
        "name": "wrapT",
        "documentation": "",
        "type": "any"
      },
      {
        "name": "magFilter",
        "documentation": "",
        "type": "any"
      },
      {
        "name": "minFilter",
        "documentation": "",
        "type": "any"
      },
      {
        "name": "anisotropy",
        "documentation": "",
        "type": "any"
      },
      {
        "name": "offset",
        "documentation": "",
        "type": "any"
      },
      {
        "name": "repeat",
        "documentation": "",
        "type": "any"
      },
      {
        "name": "format",
        "documentation": "",
        "type": "any"
      },
      {
        "name": "type",
        "documentation": "",
        "type": "any"
      },
      {
        "name": "generateMipmaps",
        "documentation": "",
        "type": "any"
      }
    ],
    "methods": [
      {
        "name": "setSize",
        "documentation": "",
        "type": "(width: number, height: number) => void"
      },
      {
        "name": "clone",
        "documentation": "",
        "type": "() => this"
      },
      {
        "name": "copy",
        "documentation": "",
        "type": "(source: this) => this"
      },
      {
        "name": "dispose",
        "documentation": "",
        "type": "() => void"
      }
    ]
  },
  {
    "name": "WebGLRenderTargetCube",
    "documentation": "",
    "type": "typeof WebGLRenderTargetCube",
    "constructors": [
      {
        "parameters": [
          {
            "name": "width",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "height",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "options",
            "documentation": "",
            "type": "WebGLRenderTargetOptions"
          }
        ],
        "returnType": "WebGLRenderTargetCube",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "activeCubeFace",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "activeMipMapLevel",
        "documentation": "",
        "type": "number"
      }
    ],
    "methods": []
  },
  {
    "name": "Uniform",
    "documentation": "",
    "type": "typeof Uniform",
    "constructors": [
      {
        "parameters": [
          {
            "name": "value",
            "documentation": "",
            "type": "any"
          }
        ],
        "returnType": "Uniform",
        "documentation": ""
      },
      {
        "parameters": [
          {
            "name": "type",
            "documentation": "",
            "type": "string"
          },
          {
            "name": "value",
            "documentation": "",
            "type": "any"
          }
        ],
        "returnType": "Uniform",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "type",
        "documentation": "",
        "type": "string"
      },
      {
        "name": "value",
        "documentation": "",
        "type": "any"
      },
      {
        "name": "dynamic",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "onUpdateCallback",
        "documentation": "",
        "type": "Function"
      }
    ],
    "methods": [
      {
        "name": "onUpdate",
        "documentation": "",
        "type": "(callback: Function) => Uniform"
      }
    ]
  },
  {
    "name": "WebGLBufferRenderer",
    "documentation": "",
    "type": "typeof WebGLBufferRenderer",
    "constructors": [
      {
        "parameters": [
          {
            "name": "_gl",
            "documentation": "",
            "type": "WebGLRenderingContext"
          },
          {
            "name": "extensions",
            "documentation": "",
            "type": "any"
          },
          {
            "name": "_infoRender",
            "documentation": "",
            "type": "any"
          }
        ],
        "returnType": "WebGLBufferRenderer",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": [
      {
        "name": "setMode",
        "documentation": "",
        "type": "(value: any) => void"
      },
      {
        "name": "render",
        "documentation": "",
        "type": "(start: any, count: number) => void"
      },
      {
        "name": "renderInstances",
        "documentation": "",
        "type": "(geometry: any) => void"
      }
    ]
  },
  {
    "name": "WebGLClipping",
    "documentation": "",
    "type": "typeof WebGLClipping",
    "constructors": [
      {
        "parameters": [],
        "returnType": "WebGLClipping",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "numPlanes",
        "documentation": "",
        "type": "number"
      }
    ],
    "methods": [
      {
        "name": "init",
        "documentation": "",
        "type": "(planes: any[], enableLocalClipping: boolean, camera: Camera) => boolean"
      },
      {
        "name": "beginShadows",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "endShadows",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "setState",
        "documentation": "",
        "type": "(planes: any[], clipShadows: boolean, camera: Camera, cache: boolean, fromCache: boolean) => void"
      }
    ]
  },
  {
    "name": "WebGLCapabilities",
    "documentation": "",
    "type": "typeof WebGLCapabilities",
    "constructors": [
      {
        "parameters": [
          {
            "name": "gl",
            "documentation": "",
            "type": "WebGLRenderingContext"
          },
          {
            "name": "extensions",
            "documentation": "",
            "type": "any"
          },
          {
            "name": "parameters",
            "documentation": "",
            "type": "WebGLCapabilitiesParameters"
          }
        ],
        "returnType": "WebGLCapabilities",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "precision",
        "documentation": "",
        "type": "any"
      },
      {
        "name": "logarithmicDepthBuffer",
        "documentation": "",
        "type": "any"
      },
      {
        "name": "maxTextures",
        "documentation": "",
        "type": "any"
      },
      {
        "name": "maxVertexTextures",
        "documentation": "",
        "type": "any"
      },
      {
        "name": "maxTextureSize",
        "documentation": "",
        "type": "any"
      },
      {
        "name": "maxCubemapSize",
        "documentation": "",
        "type": "any"
      },
      {
        "name": "maxAttributes",
        "documentation": "",
        "type": "any"
      },
      {
        "name": "maxVertexUniforms",
        "documentation": "",
        "type": "any"
      },
      {
        "name": "maxVaryings",
        "documentation": "",
        "type": "any"
      },
      {
        "name": "maxFragmentUniforms",
        "documentation": "",
        "type": "any"
      },
      {
        "name": "vertexTextures",
        "documentation": "",
        "type": "any"
      },
      {
        "name": "floatFragmentTextures",
        "documentation": "",
        "type": "any"
      },
      {
        "name": "floatVertexTextures",
        "documentation": "",
        "type": "any"
      }
    ],
    "methods": [
      {
        "name": "getMaxAnisotropy",
        "documentation": "",
        "type": "() => number"
      },
      {
        "name": "getMaxPrecision",
        "documentation": "",
        "type": "(precision: string) => string"
      }
    ]
  },
  {
    "name": "WebGLExtensions",
    "documentation": "",
    "type": "typeof WebGLExtensions",
    "constructors": [
      {
        "parameters": [
          {
            "name": "gl",
            "documentation": "",
            "type": "WebGLRenderingContext"
          }
        ],
        "returnType": "WebGLExtensions",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": [
      {
        "name": "get",
        "documentation": "",
        "type": "(name: string) => any"
      }
    ]
  },
  {
    "name": "WebGLGeometries",
    "documentation": "",
    "type": "typeof WebGLGeometries",
    "constructors": [
      {
        "parameters": [
          {
            "name": "gl",
            "documentation": "",
            "type": "WebGLRenderingContext"
          },
          {
            "name": "extensions",
            "documentation": "",
            "type": "any"
          },
          {
            "name": "_infoRender",
            "documentation": "",
            "type": "any"
          }
        ],
        "returnType": "WebGLGeometries",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": [
      {
        "name": "get",
        "documentation": "",
        "type": "(object: any) => any"
      }
    ]
  },
  {
    "name": "WebGLLights",
    "documentation": "",
    "type": "typeof WebGLLights",
    "constructors": [
      {
        "parameters": [
          {
            "name": "gl",
            "documentation": "",
            "type": "WebGLRenderingContext"
          },
          {
            "name": "properties",
            "documentation": "",
            "type": "any"
          },
          {
            "name": "info",
            "documentation": "",
            "type": "any"
          }
        ],
        "returnType": "WebGLLights",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": [
      {
        "name": "get",
        "documentation": "",
        "type": "(light: any) => any"
      }
    ]
  },
  {
    "name": "WebGLIndexedBufferRenderer",
    "documentation": "",
    "type": "typeof WebGLIndexedBufferRenderer",
    "constructors": [
      {
        "parameters": [
          {
            "name": "gl",
            "documentation": "",
            "type": "WebGLRenderingContext"
          },
          {
            "name": "properties",
            "documentation": "",
            "type": "any"
          },
          {
            "name": "info",
            "documentation": "",
            "type": "any"
          }
        ],
        "returnType": "WebGLIndexedBufferRenderer",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": [
      {
        "name": "setMode",
        "documentation": "",
        "type": "(value: any) => void"
      },
      {
        "name": "setIndex",
        "documentation": "",
        "type": "(index: any) => void"
      },
      {
        "name": "render",
        "documentation": "",
        "type": "(start: any, count: number) => void"
      },
      {
        "name": "renderInstances",
        "documentation": "",
        "type": "(geometry: any, start: any, count: number) => void"
      }
    ]
  },
  {
    "name": "WebGLObjects",
    "documentation": "",
    "type": "typeof WebGLObjects",
    "constructors": [
      {
        "parameters": [
          {
            "name": "gl",
            "documentation": "",
            "type": "WebGLRenderingContext"
          },
          {
            "name": "properties",
            "documentation": "",
            "type": "any"
          },
          {
            "name": "info",
            "documentation": "",
            "type": "any"
          }
        ],
        "returnType": "WebGLObjects",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": [
      {
        "name": "getAttributeBuffer",
        "documentation": "",
        "type": "(attribute: any) => any"
      },
      {
        "name": "getWireframeAttribute",
        "documentation": "",
        "type": "(geometry: any) => any"
      },
      {
        "name": "update",
        "documentation": "",
        "type": "(object: any) => void"
      }
    ]
  },
  {
    "name": "WebGLProgram",
    "documentation": "",
    "type": "typeof WebGLProgram",
    "constructors": [
      {
        "parameters": [
          {
            "name": "renderer",
            "documentation": "",
            "type": "WebGLRenderer"
          },
          {
            "name": "code",
            "documentation": "",
            "type": "string"
          },
          {
            "name": "material",
            "documentation": "",
            "type": "ShaderMaterial"
          },
          {
            "name": "parameters",
            "documentation": "",
            "type": "WebGLRendererParameters"
          }
        ],
        "returnType": "WebGLProgram",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "id",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "code",
        "documentation": "",
        "type": "string"
      },
      {
        "name": "usedTimes",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "program",
        "documentation": "",
        "type": "any"
      },
      {
        "name": "vertexShader",
        "documentation": "",
        "type": "WebGLShader"
      },
      {
        "name": "fragmentShader",
        "documentation": "",
        "type": "WebGLShader"
      },
      {
        "name": "uniforms",
        "documentation": "",
        "type": "any"
      },
      {
        "name": "attributes",
        "documentation": "",
        "type": "any"
      }
    ],
    "methods": [
      {
        "name": "getUniforms",
        "documentation": "",
        "type": "() => WebGLUniforms"
      },
      {
        "name": "getAttributes",
        "documentation": "",
        "type": "() => any"
      },
      {
        "name": "destroy",
        "documentation": "",
        "type": "() => void"
      }
    ]
  },
  {
    "name": "WebGLPrograms",
    "documentation": "",
    "type": "typeof WebGLPrograms",
    "constructors": [
      {
        "parameters": [
          {
            "name": "renderer",
            "documentation": "",
            "type": "WebGLRenderer"
          },
          {
            "name": "capabilities",
            "documentation": "",
            "type": "any"
          }
        ],
        "returnType": "WebGLPrograms",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "programs",
        "documentation": "",
        "type": "any[]"
      }
    ],
    "methods": [
      {
        "name": "getParameters",
        "documentation": "",
        "type": "(material: ShaderMaterial, lights: any, fog: any, nClipPlanes: number, object: any) => any"
      },
      {
        "name": "getProgramCode",
        "documentation": "",
        "type": "(material: ShaderMaterial, parameters: any) => string"
      },
      {
        "name": "acquireProgram",
        "documentation": "",
        "type": "(material: ShaderMaterial, parameters: any, code: string) => WebGLProgram"
      },
      {
        "name": "releaseProgram",
        "documentation": "",
        "type": "(program: WebGLProgram) => void"
      }
    ]
  },
  {
    "name": "WebGLTextures",
    "documentation": "",
    "type": "typeof WebGLTextures",
    "constructors": [
      {
        "parameters": [
          {
            "name": "gl",
            "documentation": "",
            "type": "any"
          },
          {
            "name": "extensions",
            "documentation": "",
            "type": "any"
          },
          {
            "name": "state",
            "documentation": "",
            "type": "any"
          },
          {
            "name": "properties",
            "documentation": "",
            "type": "any"
          },
          {
            "name": "capabilities",
            "documentation": "",
            "type": "any"
          },
          {
            "name": "paramThreeToGL",
            "documentation": "",
            "type": "Function"
          },
          {
            "name": "info",
            "documentation": "",
            "type": "any"
          }
        ],
        "returnType": "WebGLTextures",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": [
      {
        "name": "setTexture2D",
        "documentation": "",
        "type": "(texture: any, slot: number) => void"
      },
      {
        "name": "setTextureCube",
        "documentation": "",
        "type": "(texture: any, slot: number) => void"
      },
      {
        "name": "setTextureCubeDynamic",
        "documentation": "",
        "type": "(texture: any, slot: number) => void"
      },
      {
        "name": "setupRenderTarget",
        "documentation": "",
        "type": "(renderTarget: any) => void"
      },
      {
        "name": "updateRenderTargetMipmap",
        "documentation": "",
        "type": "(renderTarget: any) => void"
      }
    ]
  },
  {
    "name": "WebGLUniforms",
    "documentation": "",
    "type": "typeof WebGLUniforms",
    "constructors": [
      {
        "parameters": [
          {
            "name": "gl",
            "documentation": "",
            "type": "any"
          },
          {
            "name": "program",
            "documentation": "",
            "type": "WebGLProgram"
          },
          {
            "name": "renderer",
            "documentation": "",
            "type": "WebGLRenderer"
          }
        ],
        "returnType": "WebGLUniforms",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "renderer",
        "documentation": "",
        "type": "WebGLRenderer"
      }
    ],
    "methods": [
      {
        "name": "setValue",
        "documentation": "",
        "type": "(gl: any, value: any, renderer?: any) => void"
      },
      {
        "name": "set",
        "documentation": "",
        "type": "(gl: any, object: any, name: string) => void"
      },
      {
        "name": "setOptional",
        "documentation": "",
        "type": "(gl: any, object: any, name: string) => void"
      }
    ]
  },
  {
    "name": "WebGLProperties",
    "documentation": "",
    "type": "typeof WebGLProperties",
    "constructors": [
      {
        "parameters": [],
        "returnType": "WebGLProperties",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": [
      {
        "name": "get",
        "documentation": "",
        "type": "(object: any) => any"
      },
      {
        "name": "delete",
        "documentation": "",
        "type": "(object: any) => void"
      },
      {
        "name": "clear",
        "documentation": "",
        "type": "() => void"
      }
    ]
  },
  {
    "name": "WebGLShader",
    "documentation": "",
    "type": "typeof WebGLShader",
    "constructors": [
      {
        "parameters": [
          {
            "name": "gl",
            "documentation": "",
            "type": "any"
          },
          {
            "name": "type",
            "documentation": "",
            "type": "string"
          },
          {
            "name": "string",
            "documentation": "",
            "type": "string"
          }
        ],
        "returnType": "WebGLShader",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": []
  },
  {
    "name": "WebGLShadowMap",
    "documentation": "",
    "type": "typeof WebGLShadowMap",
    "constructors": [
      {
        "parameters": [
          {
            "name": "_renderer",
            "documentation": "",
            "type": "Renderer"
          },
          {
            "name": "_lights",
            "documentation": "",
            "type": "any[]"
          },
          {
            "name": "_objects",
            "documentation": "",
            "type": "any[]"
          },
          {
            "name": "capabilities",
            "documentation": "",
            "type": "any"
          }
        ],
        "returnType": "WebGLShadowMap",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "enabled",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "autoUpdate",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "needsUpdate",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "type",
        "documentation": "",
        "type": "ShadowMapType"
      },
      {
        "name": "renderReverseSided",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "renderSingleSided",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "cullFace",
        "documentation": "",
        "type": "any"
      }
    ],
    "methods": [
      {
        "name": "render",
        "documentation": "",
        "type": "(scene: Scene, camera: Camera) => void"
      }
    ]
  },
  {
    "name": "WebGLState",
    "documentation": "",
    "type": "typeof WebGLState",
    "constructors": [
      {
        "parameters": [
          {
            "name": "gl",
            "documentation": "",
            "type": "any"
          },
          {
            "name": "extensions",
            "documentation": "",
            "type": "any"
          },
          {
            "name": "paramThreeToGL",
            "documentation": "",
            "type": "Function"
          }
        ],
        "returnType": "WebGLState",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "buffers",
        "documentation": "",
        "type": "{ color: WebGLColorBuffer; depth: WebGLDepthBuffer; stencil: WebGLStencilBuffer; }"
      }
    ],
    "methods": [
      {
        "name": "init",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "initAttributes",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "enableAttribute",
        "documentation": "",
        "type": "(attribute: string) => void"
      },
      {
        "name": "enableAttributeAndDivisor",
        "documentation": "",
        "type": "(attribute: string, meshPerAttribute: any, extension: any) => void"
      },
      {
        "name": "disableUnusedAttributes",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "enable",
        "documentation": "",
        "type": "(id: string) => void"
      },
      {
        "name": "disable",
        "documentation": "",
        "type": "(id: string) => void"
      },
      {
        "name": "getCompressedTextureFormats",
        "documentation": "",
        "type": "() => any[]"
      },
      {
        "name": "setBlending",
        "documentation": "",
        "type": "(blending: number, blendEquation: number, blendSrc: number, blendDst: number, blendEquationAlpha:..."
      },
      {
        "name": "setColorWrite",
        "documentation": "",
        "type": "(colorWrite: number) => void"
      },
      {
        "name": "setDepthTest",
        "documentation": "",
        "type": "(depthTest: number) => void"
      },
      {
        "name": "setDepthWrite",
        "documentation": "",
        "type": "(depthWrite: number) => void"
      },
      {
        "name": "setDepthFunc",
        "documentation": "",
        "type": "(depthFunc: Function) => void"
      },
      {
        "name": "setStencilTest",
        "documentation": "",
        "type": "(stencilTest: boolean) => void"
      },
      {
        "name": "setStencilWrite",
        "documentation": "",
        "type": "(stencilWrite: any) => void"
      },
      {
        "name": "setStencilFunc",
        "documentation": "",
        "type": "(stencilFunc: Function, stencilRef: any, stencilMask: number) => void"
      },
      {
        "name": "setStencilOp",
        "documentation": "",
        "type": "(stencilFail: any, stencilZFail: any, stencilZPass: any) => void"
      },
      {
        "name": "setFlipSided",
        "documentation": "",
        "type": "(flipSided: number) => void"
      },
      {
        "name": "setCullFace",
        "documentation": "",
        "type": "(cullFace: CullFace) => void"
      },
      {
        "name": "setLineWidth",
        "documentation": "",
        "type": "(width: number) => void"
      },
      {
        "name": "setPolygonOffset",
        "documentation": "",
        "type": "(polygonoffset: number, factor: number, units: number) => void"
      },
      {
        "name": "setScissorTest",
        "documentation": "",
        "type": "(scissorTest: boolean) => void"
      },
      {
        "name": "getScissorTest",
        "documentation": "",
        "type": "() => boolean"
      },
      {
        "name": "activeTexture",
        "documentation": "",
        "type": "(webglSlot: any) => void"
      },
      {
        "name": "bindTexture",
        "documentation": "",
        "type": "(webglType: any, webglTexture: any) => void"
      },
      {
        "name": "compressedTexImage2D",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "texImage2D",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "clearColor",
        "documentation": "",
        "type": "(r: number, g: number, b: number, a: number) => void"
      },
      {
        "name": "clearDepth",
        "documentation": "",
        "type": "(depth: number) => void"
      },
      {
        "name": "clearStencil",
        "documentation": "",
        "type": "(stencil: any) => void"
      },
      {
        "name": "scissor",
        "documentation": "",
        "type": "(scissor: any) => void"
      },
      {
        "name": "viewport",
        "documentation": "",
        "type": "(viewport: any) => void"
      },
      {
        "name": "reset",
        "documentation": "",
        "type": "() => void"
      }
    ]
  },
  {
    "name": "WebGLColorBuffer",
    "documentation": "",
    "type": "typeof WebGLColorBuffer",
    "constructors": [
      {
        "parameters": [
          {
            "name": "gl",
            "documentation": "",
            "type": "any"
          },
          {
            "name": "state",
            "documentation": "",
            "type": "any"
          }
        ],
        "returnType": "WebGLColorBuffer",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": [
      {
        "name": "setMask",
        "documentation": "",
        "type": "(colorMask: number) => void"
      },
      {
        "name": "setLocked",
        "documentation": "",
        "type": "(lock: boolean) => void"
      },
      {
        "name": "setClear",
        "documentation": "",
        "type": "(r: number, g: number, b: number, a: number) => void"
      },
      {
        "name": "reset",
        "documentation": "",
        "type": "() => void"
      }
    ]
  },
  {
    "name": "WebGLDepthBuffer",
    "documentation": "",
    "type": "typeof WebGLDepthBuffer",
    "constructors": [
      {
        "parameters": [
          {
            "name": "gl",
            "documentation": "",
            "type": "any"
          },
          {
            "name": "state",
            "documentation": "",
            "type": "any"
          }
        ],
        "returnType": "WebGLDepthBuffer",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": [
      {
        "name": "setTest",
        "documentation": "",
        "type": "(depthTest: boolean) => void"
      },
      {
        "name": "sertMask",
        "documentation": "",
        "type": "(depthMask: number) => void"
      },
      {
        "name": "setFunc",
        "documentation": "",
        "type": "(depthFunc: Function) => void"
      },
      {
        "name": "setLocked",
        "documentation": "",
        "type": "(lock: boolean) => void"
      },
      {
        "name": "setClear",
        "documentation": "",
        "type": "(depth: any) => void"
      },
      {
        "name": "reset",
        "documentation": "",
        "type": "() => void"
      }
    ]
  },
  {
    "name": "WebGLStencilBuffer",
    "documentation": "",
    "type": "typeof WebGLStencilBuffer",
    "constructors": [
      {
        "parameters": [
          {
            "name": "gl",
            "documentation": "",
            "type": "any"
          },
          {
            "name": "state",
            "documentation": "",
            "type": "any"
          }
        ],
        "returnType": "WebGLStencilBuffer",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": [
      {
        "name": "setTest",
        "documentation": "",
        "type": "(stencilTest: boolean) => void"
      },
      {
        "name": "sertMask",
        "documentation": "",
        "type": "(stencilMask: number) => void"
      },
      {
        "name": "setFunc",
        "documentation": "",
        "type": "(stencilFunc: Function, stencilRef: any, stencilMask: number) => void"
      },
      {
        "name": "setOp",
        "documentation": "",
        "type": "(stencilFail: any, stencilZFail: any, stencilZPass: any) => void"
      },
      {
        "name": "setLocked",
        "documentation": "",
        "type": "(lock: boolean) => void"
      },
      {
        "name": "setClear",
        "documentation": "",
        "type": "(stencil: any) => void"
      },
      {
        "name": "reset",
        "documentation": "",
        "type": "() => void"
      }
    ]
  },
  {
    "name": "LensFlarePlugin",
    "documentation": "",
    "type": "typeof LensFlarePlugin",
    "constructors": [
      {
        "parameters": [
          {
            "name": "renderer",
            "documentation": "",
            "type": "WebGLRenderer"
          },
          {
            "name": "flares",
            "documentation": "",
            "type": "any[]"
          }
        ],
        "returnType": "LensFlarePlugin",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": [
      {
        "name": "render",
        "documentation": "",
        "type": "(scene: Scene, camera: Camera, viewportWidth: number, viewportHeight: number) => void"
      }
    ]
  },
  {
    "name": "SpritePlugin",
    "documentation": "",
    "type": "typeof SpritePlugin",
    "constructors": [
      {
        "parameters": [
          {
            "name": "renderer",
            "documentation": "",
            "type": "WebGLRenderer"
          },
          {
            "name": "sprites",
            "documentation": "",
            "type": "any[]"
          }
        ],
        "returnType": "SpritePlugin",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": [
      {
        "name": "render",
        "documentation": "",
        "type": "(scene: Scene, camera: Camera, viewportWidth: number, viewportHeight: number) => void"
      }
    ]
  },
  {
    "name": "Scene",
    "documentation": "Scenes allow you to set up what and where is to be rendered by three.js. This is where you place objects, lights and cameras.",
    "type": "typeof Scene",
    "constructors": [
      {
        "parameters": [],
        "returnType": "Scene",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "fog",
        "documentation": "A fog instance defining the type of fog that affects everything rendered in the scene. Default is null.",
        "type": "IFog"
      },
      {
        "name": "overrideMaterial",
        "documentation": "If not null, it will force everything in the scene to be rendered with that material. Default is null.",
        "type": "Material"
      },
      {
        "name": "autoUpdate",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "background",
        "documentation": "",
        "type": "any"
      }
    ],
    "methods": [
      {
        "name": "toJSON",
        "documentation": "",
        "type": "(meta?: any) => any"
      }
    ]
  },
  {
    "name": "Fog",
    "documentation": "This class contains the parameters that define linear fog, i.e., that grows linearly denser with the distance.",
    "type": "typeof Fog",
    "constructors": [
      {
        "parameters": [
          {
            "name": "hex",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "near",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "far",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "Fog",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "name",
        "documentation": "",
        "type": "string"
      },
      {
        "name": "color",
        "documentation": "Fog color.",
        "type": "Color"
      },
      {
        "name": "near",
        "documentation": "The minimum distance to start applying fog. Objects that are less than 'near' units from the active camera won't be affected by fog.",
        "type": "number"
      },
      {
        "name": "far",
        "documentation": "The maximum distance at which fog stops being calculated and applied. Objects that are more than 'far' units away from the active camera won't be affected by fog.\r\nDefault is 1000.",
        "type": "number"
      }
    ],
    "methods": [
      {
        "name": "clone",
        "documentation": "",
        "type": "() => this"
      },
      {
        "name": "toJSON",
        "documentation": "",
        "type": "() => any"
      }
    ]
  },
  {
    "name": "FogExp2",
    "documentation": "This class contains the parameters that define linear fog, i.e., that grows exponentially denser with the distance.",
    "type": "typeof FogExp2",
    "constructors": [
      {
        "parameters": [
          {
            "name": "hex",
            "documentation": "",
            "type": "string | number"
          },
          {
            "name": "density",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "FogExp2",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "name",
        "documentation": "",
        "type": "string"
      },
      {
        "name": "color",
        "documentation": "",
        "type": "Color"
      },
      {
        "name": "density",
        "documentation": "Defines how fast the fog will grow dense.\r\nDefault is 0.00025.",
        "type": "number"
      }
    ],
    "methods": [
      {
        "name": "clone",
        "documentation": "",
        "type": "() => this"
      },
      {
        "name": "toJSON",
        "documentation": "",
        "type": "() => any"
      }
    ]
  },
  {
    "name": "Texture",
    "documentation": "",
    "type": "typeof Texture",
    "constructors": [
      {
        "parameters": [
          {
            "name": "image",
            "documentation": "",
            "type": "HTMLImageElement | HTMLCanvasElement | HTMLVideoElement"
          },
          {
            "name": "mapping",
            "documentation": "",
            "type": "Mapping"
          },
          {
            "name": "wrapS",
            "documentation": "",
            "type": "Wrapping"
          },
          {
            "name": "wrapT",
            "documentation": "",
            "type": "Wrapping"
          },
          {
            "name": "magFilter",
            "documentation": "",
            "type": "TextureFilter"
          },
          {
            "name": "minFilter",
            "documentation": "",
            "type": "TextureFilter"
          },
          {
            "name": "format",
            "documentation": "",
            "type": "PixelFormat"
          },
          {
            "name": "type",
            "documentation": "",
            "type": "TextureDataType"
          },
          {
            "name": "anisotropy",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "encoding",
            "documentation": "",
            "type": "TextureEncoding"
          }
        ],
        "returnType": "Texture",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "id",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "uuid",
        "documentation": "",
        "type": "string"
      },
      {
        "name": "name",
        "documentation": "",
        "type": "string"
      },
      {
        "name": "sourceFile",
        "documentation": "",
        "type": "string"
      },
      {
        "name": "image",
        "documentation": "",
        "type": "any"
      },
      {
        "name": "mipmaps",
        "documentation": "",
        "type": "ImageData[]"
      },
      {
        "name": "mapping",
        "documentation": "",
        "type": "Mapping"
      },
      {
        "name": "wrapS",
        "documentation": "",
        "type": "Wrapping"
      },
      {
        "name": "wrapT",
        "documentation": "",
        "type": "Wrapping"
      },
      {
        "name": "magFilter",
        "documentation": "",
        "type": "TextureFilter"
      },
      {
        "name": "minFilter",
        "documentation": "",
        "type": "TextureFilter"
      },
      {
        "name": "anisotropy",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "format",
        "documentation": "",
        "type": "PixelFormat"
      },
      {
        "name": "type",
        "documentation": "",
        "type": "TextureDataType"
      },
      {
        "name": "offset",
        "documentation": "",
        "type": "Vector2"
      },
      {
        "name": "repeat",
        "documentation": "",
        "type": "Vector2"
      },
      {
        "name": "generateMipmaps",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "premultiplyAlpha",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "flipY",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "unpackAlignment",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "encoding",
        "documentation": "",
        "type": "TextureEncoding"
      },
      {
        "name": "version",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "needsUpdate",
        "documentation": "",
        "type": "boolean"
      }
    ],
    "methods": [
      {
        "name": "onUpdate",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "clone",
        "documentation": "",
        "type": "() => this"
      },
      {
        "name": "copy",
        "documentation": "",
        "type": "(source: this) => this"
      },
      {
        "name": "toJSON",
        "documentation": "",
        "type": "(meta: any) => any"
      },
      {
        "name": "dispose",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "transformUv",
        "documentation": "",
        "type": "(uv: Vector) => void"
      }
    ]
  },
  {
    "name": "DepthTexture",
    "documentation": "",
    "type": "typeof DepthTexture",
    "constructors": [
      {
        "parameters": [
          {
            "name": "width",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "heighht",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "type",
            "documentation": "",
            "type": "TextureDataType"
          },
          {
            "name": "mapping",
            "documentation": "",
            "type": "Mapping"
          },
          {
            "name": "wrapS",
            "documentation": "",
            "type": "Wrapping"
          },
          {
            "name": "wrapT",
            "documentation": "",
            "type": "Wrapping"
          },
          {
            "name": "magFilter",
            "documentation": "",
            "type": "TextureFilter"
          },
          {
            "name": "minFilter",
            "documentation": "",
            "type": "TextureFilter"
          },
          {
            "name": "anisotropy",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "DepthTexture",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "image",
        "documentation": "",
        "type": "{ width: number; height: number; }"
      }
    ],
    "methods": []
  },
  {
    "name": "CanvasTexture",
    "documentation": "",
    "type": "typeof CanvasTexture",
    "constructors": [
      {
        "parameters": [
          {
            "name": "canvas",
            "documentation": "",
            "type": "HTMLImageElement | HTMLCanvasElement | HTMLVideoElement"
          },
          {
            "name": "mapping",
            "documentation": "",
            "type": "Mapping"
          },
          {
            "name": "wrapS",
            "documentation": "",
            "type": "Wrapping"
          },
          {
            "name": "wrapT",
            "documentation": "",
            "type": "Wrapping"
          },
          {
            "name": "magFilter",
            "documentation": "",
            "type": "TextureFilter"
          },
          {
            "name": "minFilter",
            "documentation": "",
            "type": "TextureFilter"
          },
          {
            "name": "format",
            "documentation": "",
            "type": "PixelFormat"
          },
          {
            "name": "type",
            "documentation": "",
            "type": "TextureDataType"
          },
          {
            "name": "anisotropy",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "CanvasTexture",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": []
  },
  {
    "name": "CubeTexture",
    "documentation": "",
    "type": "typeof CubeTexture",
    "constructors": [
      {
        "parameters": [
          {
            "name": "images",
            "documentation": "",
            "type": "any[]"
          },
          {
            "name": "mapping",
            "documentation": "",
            "type": "Mapping"
          },
          {
            "name": "wrapS",
            "documentation": "",
            "type": "Wrapping"
          },
          {
            "name": "wrapT",
            "documentation": "",
            "type": "Wrapping"
          },
          {
            "name": "magFilter",
            "documentation": "",
            "type": "TextureFilter"
          },
          {
            "name": "minFilter",
            "documentation": "",
            "type": "TextureFilter"
          },
          {
            "name": "format",
            "documentation": "",
            "type": "PixelFormat"
          },
          {
            "name": "type",
            "documentation": "",
            "type": "TextureDataType"
          },
          {
            "name": "anisotropy",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "encoding",
            "documentation": "",
            "type": "TextureEncoding"
          }
        ],
        "returnType": "CubeTexture",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "images",
        "documentation": "",
        "type": "any"
      }
    ],
    "methods": []
  },
  {
    "name": "CompressedTexture",
    "documentation": "",
    "type": "typeof CompressedTexture",
    "constructors": [
      {
        "parameters": [
          {
            "name": "mipmaps",
            "documentation": "",
            "type": "ImageData[]"
          },
          {
            "name": "width",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "height",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "format",
            "documentation": "",
            "type": "PixelFormat"
          },
          {
            "name": "type",
            "documentation": "",
            "type": "TextureDataType"
          },
          {
            "name": "mapping",
            "documentation": "",
            "type": "Mapping"
          },
          {
            "name": "wrapS",
            "documentation": "",
            "type": "Wrapping"
          },
          {
            "name": "wrapT",
            "documentation": "",
            "type": "Wrapping"
          },
          {
            "name": "magFilter",
            "documentation": "",
            "type": "TextureFilter"
          },
          {
            "name": "minFilter",
            "documentation": "",
            "type": "TextureFilter"
          },
          {
            "name": "anisotropy",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "encoding",
            "documentation": "",
            "type": "TextureEncoding"
          }
        ],
        "returnType": "CompressedTexture",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "image",
        "documentation": "",
        "type": "{ width: number; height: number; }"
      }
    ],
    "methods": []
  },
  {
    "name": "DataTexture",
    "documentation": "",
    "type": "typeof DataTexture",
    "constructors": [
      {
        "parameters": [
          {
            "name": "data",
            "documentation": "",
            "type": "Float32Array | ArrayBuffer | Int8Array | Uint8Array | Uint8ClampedArray | Int16Array | Uint16Arra..."
          },
          {
            "name": "width",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "height",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "format",
            "documentation": "",
            "type": "PixelFormat"
          },
          {
            "name": "type",
            "documentation": "",
            "type": "TextureDataType"
          },
          {
            "name": "mapping",
            "documentation": "",
            "type": "Mapping"
          },
          {
            "name": "wrapS",
            "documentation": "",
            "type": "Wrapping"
          },
          {
            "name": "wrapT",
            "documentation": "",
            "type": "Wrapping"
          },
          {
            "name": "magFilter",
            "documentation": "",
            "type": "TextureFilter"
          },
          {
            "name": "minFilter",
            "documentation": "",
            "type": "TextureFilter"
          },
          {
            "name": "anisotropy",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "encoding",
            "documentation": "",
            "type": "TextureEncoding"
          }
        ],
        "returnType": "DataTexture",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "image",
        "documentation": "",
        "type": "ImageData"
      }
    ],
    "methods": []
  },
  {
    "name": "VideoTexture",
    "documentation": "",
    "type": "typeof VideoTexture",
    "constructors": [
      {
        "parameters": [
          {
            "name": "video",
            "documentation": "",
            "type": "HTMLVideoElement"
          },
          {
            "name": "mapping",
            "documentation": "",
            "type": "Mapping"
          },
          {
            "name": "wrapS",
            "documentation": "",
            "type": "Wrapping"
          },
          {
            "name": "wrapT",
            "documentation": "",
            "type": "Wrapping"
          },
          {
            "name": "magFilter",
            "documentation": "",
            "type": "TextureFilter"
          },
          {
            "name": "minFilter",
            "documentation": "",
            "type": "TextureFilter"
          },
          {
            "name": "format",
            "documentation": "",
            "type": "PixelFormat"
          },
          {
            "name": "type",
            "documentation": "",
            "type": "TextureDataType"
          },
          {
            "name": "anisotropy",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "VideoTexture",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": []
  },
  {
    "name": "Audio",
    "documentation": "",
    "type": "typeof Audio",
    "constructors": [
      {
        "parameters": [
          {
            "name": "listener",
            "documentation": "",
            "type": "AudioListener"
          }
        ],
        "returnType": "Audio",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "type",
        "documentation": "",
        "type": "string"
      },
      {
        "name": "context",
        "documentation": "",
        "type": "AudioContext"
      },
      {
        "name": "source",
        "documentation": "",
        "type": "AudioBufferSourceNode"
      },
      {
        "name": "gain",
        "documentation": "",
        "type": "GainNode"
      },
      {
        "name": "autoplay",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "startTime",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "playbackRate",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "hasPlaybackControl",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "isPlaying",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "sourceType",
        "documentation": "",
        "type": "string"
      },
      {
        "name": "filters",
        "documentation": "",
        "type": "any[]"
      },
      {
        "name": "setFilter",
        "documentation": "",
        "type": "{ (value: any[]): Audio; (filter: any): Audio; }"
      }
    ],
    "methods": [
      {
        "name": "getOutput",
        "documentation": "",
        "type": "() => GainNode"
      },
      {
        "name": "setNodeSource",
        "documentation": "",
        "type": "(audioNode: AudioBufferSourceNode) => Audio"
      },
      {
        "name": "setBuffer",
        "documentation": "",
        "type": "(audioBuffer: AudioBuffer) => Audio"
      },
      {
        "name": "play",
        "documentation": "",
        "type": "() => Audio"
      },
      {
        "name": "pause",
        "documentation": "",
        "type": "() => Audio"
      },
      {
        "name": "stop",
        "documentation": "",
        "type": "() => Audio"
      },
      {
        "name": "connect",
        "documentation": "",
        "type": "() => Audio"
      },
      {
        "name": "disconnect",
        "documentation": "",
        "type": "() => Audio"
      },
      {
        "name": "getFilters",
        "documentation": "",
        "type": "() => any[]"
      },
      {
        "name": "getFilter",
        "documentation": "",
        "type": "() => any"
      },
      {
        "name": "setPlaybackRate",
        "documentation": "",
        "type": "(value: number) => Audio"
      },
      {
        "name": "getPlaybackRate",
        "documentation": "",
        "type": "() => number"
      },
      {
        "name": "onEnded",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "getLoop",
        "documentation": "",
        "type": "() => boolean"
      },
      {
        "name": "setLoop",
        "documentation": "",
        "type": "(value: boolean) => void"
      },
      {
        "name": "getVolume",
        "documentation": "",
        "type": "() => number"
      },
      {
        "name": "setVolume",
        "documentation": "",
        "type": "(value: number) => Audio"
      },
      {
        "name": "load",
        "documentation": "",
        "type": "(file: string) => Audio"
      }
    ]
  },
  {
    "name": "AudioAnalyser",
    "documentation": "",
    "type": "typeof AudioAnalyser",
    "constructors": [
      {
        "parameters": [
          {
            "name": "audio",
            "documentation": "",
            "type": "any"
          },
          {
            "name": "fftSize",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "AudioAnalyser",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "analyser",
        "documentation": "",
        "type": "any"
      },
      {
        "name": "data",
        "documentation": "",
        "type": "Uint8Array"
      }
    ],
    "methods": [
      {
        "name": "getFrequencyData",
        "documentation": "",
        "type": "() => Uint8Array"
      },
      {
        "name": "getAverageFrequency",
        "documentation": "",
        "type": "() => number"
      },
      {
        "name": "getData",
        "documentation": "",
        "type": "(file: any) => any"
      }
    ]
  },
  {
    "name": "AudioBuffer",
    "documentation": "",
    "type": "typeof AudioBuffer",
    "constructors": [
      {
        "parameters": [
          {
            "name": "context",
            "documentation": "",
            "type": "any"
          }
        ],
        "returnType": "AudioBuffer",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "context",
        "documentation": "",
        "type": "any"
      },
      {
        "name": "ready",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "readyCallbacks",
        "documentation": "",
        "type": "Function[]"
      }
    ],
    "methods": [
      {
        "name": "load",
        "documentation": "",
        "type": "(file: string) => AudioBuffer"
      },
      {
        "name": "onReady",
        "documentation": "",
        "type": "(callback: Function) => void"
      }
    ]
  },
  {
    "name": "PositionalAudio",
    "documentation": "",
    "type": "typeof PositionalAudio",
    "constructors": [
      {
        "parameters": [
          {
            "name": "listener",
            "documentation": "",
            "type": "AudioListener"
          }
        ],
        "returnType": "PositionalAudio",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "panner",
        "documentation": "",
        "type": "PannerNode"
      }
    ],
    "methods": [
      {
        "name": "setRefDistance",
        "documentation": "",
        "type": "(value: number) => void"
      },
      {
        "name": "getRefDistance",
        "documentation": "",
        "type": "() => number"
      },
      {
        "name": "setRolloffFactor",
        "documentation": "",
        "type": "(value: number) => void"
      },
      {
        "name": "getRolloffFactor",
        "documentation": "",
        "type": "() => number"
      },
      {
        "name": "setDistanceModel",
        "documentation": "",
        "type": "(value: number) => void"
      },
      {
        "name": "getDistanceModel",
        "documentation": "",
        "type": "() => number"
      },
      {
        "name": "setMaxDistance",
        "documentation": "",
        "type": "(value: number) => void"
      },
      {
        "name": "getMaxDistance",
        "documentation": "",
        "type": "() => number"
      }
    ]
  },
  {
    "name": "AudioListener",
    "documentation": "",
    "type": "typeof AudioListener",
    "constructors": [
      {
        "parameters": [],
        "returnType": "AudioListener",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "type",
        "documentation": "",
        "type": "string"
      },
      {
        "name": "context",
        "documentation": "",
        "type": "AudioContext"
      },
      {
        "name": "gain",
        "documentation": "",
        "type": "GainNode"
      }
    ],
    "methods": [
      {
        "name": "getInput",
        "documentation": "",
        "type": "() => GainNode"
      },
      {
        "name": "removeFilter",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "setFilter",
        "documentation": "",
        "type": "(value: any) => void"
      },
      {
        "name": "getFilter",
        "documentation": "",
        "type": "() => any"
      },
      {
        "name": "setMasterVolume",
        "documentation": "",
        "type": "(value: number) => void"
      },
      {
        "name": "getMasterVolume",
        "documentation": "",
        "type": "() => number"
      }
    ]
  },
  {
    "name": "Curve",
    "documentation": "An extensible curve object which contains methods for interpolation\r\nclass Curve&lt;T extends Vector&gt;",
    "type": "typeof Curve",
    "constructors": [
      {
        "parameters": [],
        "returnType": "Curve<T>",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": [
      {
        "name": "getPoint",
        "documentation": "Returns a vector for point t of the curve where t is between 0 and 1\r\ngetPoint(t: number): T;",
        "type": "(t: number) => T"
      },
      {
        "name": "getPointAt",
        "documentation": "Returns a vector for point at relative position in curve according to arc length\r\ngetPointAt(u: number): T;",
        "type": "(u: number) => T"
      },
      {
        "name": "getPoints",
        "documentation": "Get sequence of points using getPoint( t )\r\ngetPoints(divisions?: number): T[];",
        "type": "(divisions?: number) => T[]"
      },
      {
        "name": "getSpacedPoints",
        "documentation": "Get sequence of equi-spaced points using getPointAt( u )\r\ngetSpacedPoints(divisions?: number): T[];",
        "type": "(divisions?: number) => T[]"
      },
      {
        "name": "getLength",
        "documentation": "Get total curve arc length",
        "type": "() => number"
      },
      {
        "name": "getLengths",
        "documentation": "Get list of cumulative segment lengths",
        "type": "(divisions?: number) => number[]"
      },
      {
        "name": "updateArcLengths",
        "documentation": "Update the cumlative segment distance cache",
        "type": "() => void"
      },
      {
        "name": "getUtoTmapping",
        "documentation": "Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equi distance",
        "type": "(u: number, distance: number) => number"
      },
      {
        "name": "getTangent",
        "documentation": "Returns a unit vector tangent at t. If the subclassed curve do not implement its tangent derivation, 2 points a small delta apart will be used to find its gradient which seems to give a reasonable approximation\r\ngetTangent(t: number): T;",
        "type": "(t: number) => T"
      },
      {
        "name": "getTangentAt",
        "documentation": "Returns tangent at equidistance point u on the curve\r\ngetTangentAt(u: number): T;",
        "type": "(u: number) => T"
      }
    ]
  },
  {
    "name": "CurvePath",
    "documentation": "",
    "type": "typeof CurvePath",
    "constructors": [
      {
        "parameters": [],
        "returnType": "CurvePath<T>",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "__constructor",
        "documentation": "",
        "type": "any"
      },
      {
        "name": "curves",
        "documentation": "",
        "type": "Curve<T>[]"
      },
      {
        "name": "autoClose",
        "documentation": "",
        "type": "boolean"
      }
    ],
    "methods": [
      {
        "name": "add",
        "documentation": "",
        "type": "(curve: Curve<T>) => void"
      },
      {
        "name": "checkConnection",
        "documentation": "",
        "type": "() => boolean"
      },
      {
        "name": "closePath",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "getPoint",
        "documentation": "",
        "type": "(t: number) => T"
      },
      {
        "name": "getLength",
        "documentation": "",
        "type": "() => number"
      },
      {
        "name": "updateArcLengths",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "getCurveLengths",
        "documentation": "",
        "type": "() => number[]"
      },
      {
        "name": "getSpacedPoints",
        "documentation": "",
        "type": "(divisions?: number) => T[]"
      },
      {
        "name": "getPoints",
        "documentation": "",
        "type": "(divisions?: number) => T[]"
      },
      {
        "name": "createPointsGeometry",
        "documentation": "",
        "type": "(divisions: number) => Geometry"
      },
      {
        "name": "createSpacedPointsGeometry",
        "documentation": "",
        "type": "(divisions: number) => Geometry"
      },
      {
        "name": "createGeometry",
        "documentation": "",
        "type": "(points: T[]) => Geometry"
      }
    ]
  },
  {
    "name": "Path",
    "documentation": "a 2d path representation, comprising of points, lines, and cubes, similar to the html5 2d canvas api. It extends CurvePath.",
    "type": "typeof Path",
    "constructors": [
      {
        "parameters": [
          {
            "name": "points",
            "documentation": "",
            "type": "Vector2[]"
          }
        ],
        "returnType": "Path",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "currentPoint",
        "documentation": "",
        "type": "Vector2"
      }
    ],
    "methods": [
      {
        "name": "fromPoints",
        "documentation": "",
        "type": "(vectors: Vector2[]) => void"
      },
      {
        "name": "moveTo",
        "documentation": "",
        "type": "(x: number, y: number) => void"
      },
      {
        "name": "lineTo",
        "documentation": "",
        "type": "(x: number, y: number) => void"
      },
      {
        "name": "quadraticCurveTo",
        "documentation": "",
        "type": "(aCPx: number, aCPy: number, aX: number, aY: number) => void"
      },
      {
        "name": "bezierCurveTo",
        "documentation": "",
        "type": "(aCP1x: number, aCP1y: number, aCP2x: number, aCP2y: number, aX: number, aY: number) => void"
      },
      {
        "name": "splineThru",
        "documentation": "",
        "type": "(pts: Vector2[]) => void"
      },
      {
        "name": "arc",
        "documentation": "",
        "type": "(aX: number, aY: number, aRadius: number, aStartAngle: number, aEndAngle: number, aClockwise: boo..."
      },
      {
        "name": "absarc",
        "documentation": "",
        "type": "(aX: number, aY: number, aRadius: number, aStartAngle: number, aEndAngle: number, aClockwise: boo..."
      },
      {
        "name": "ellipse",
        "documentation": "",
        "type": "(aX: number, aY: number, xRadius: number, yRadius: number, aStartAngle: number, aEndAngle: number..."
      },
      {
        "name": "absellipse",
        "documentation": "",
        "type": "(aX: number, aY: number, xRadius: number, yRadius: number, aStartAngle: number, aEndAngle: number..."
      }
    ]
  },
  {
    "name": "ShapePath",
    "documentation": "",
    "type": "typeof ShapePath",
    "constructors": [
      {
        "parameters": [],
        "returnType": "ShapePath",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "subPaths",
        "documentation": "",
        "type": "any[]"
      },
      {
        "name": "currentPath",
        "documentation": "",
        "type": "any"
      }
    ],
    "methods": [
      {
        "name": "moveTo",
        "documentation": "",
        "type": "(x: number, y: number) => void"
      },
      {
        "name": "lineTo",
        "documentation": "",
        "type": "(x: number, y: number) => void"
      },
      {
        "name": "quadraticCurveTo",
        "documentation": "",
        "type": "(aCPx: number, aCPy: number, aX: number, aY: number) => void"
      },
      {
        "name": "bezierCurveTo",
        "documentation": "",
        "type": "(aCP1x: number, aCP1y: number, aCP2x: number, aCP2y: number, aX: number, aY: number) => void"
      },
      {
        "name": "splineThru",
        "documentation": "",
        "type": "(pts: Vector2[]) => void"
      },
      {
        "name": "toShapes",
        "documentation": "",
        "type": "(isCCW: boolean, noHoles: any) => Shape[]"
      }
    ]
  },
  {
    "name": "Shape",
    "documentation": "Defines a 2d shape plane using paths.",
    "type": "typeof Shape",
    "constructors": [
      {
        "parameters": [
          {
            "name": "points",
            "documentation": "",
            "type": "Vector2[]"
          }
        ],
        "returnType": "Shape",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "holes",
        "documentation": "",
        "type": "Path[]"
      }
    ],
    "methods": [
      {
        "name": "extrude",
        "documentation": "",
        "type": "(options?: any) => ExtrudeGeometry"
      },
      {
        "name": "makeGeometry",
        "documentation": "",
        "type": "(options?: any) => ShapeGeometry"
      },
      {
        "name": "getPointsHoles",
        "documentation": "",
        "type": "(divisions: number) => Vector2[][]"
      },
      {
        "name": "extractAllPoints",
        "documentation": "",
        "type": "(divisions: number) => { shape: Vector2[]; holes: Vector2[][]; }"
      },
      {
        "name": "extractPoints",
        "documentation": "",
        "type": "(divisions: number) => Vector2[]"
      }
    ]
  },
  {
    "name": "CatmullRomCurve3",
    "documentation": "",
    "type": "typeof CatmullRomCurve3",
    "constructors": [
      {
        "parameters": [
          {
            "name": "points",
            "documentation": "",
            "type": "Vector3[]"
          }
        ],
        "returnType": "CatmullRomCurve3",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "points",
        "documentation": "",
        "type": "Vector3[]"
      }
    ],
    "methods": [
      {
        "name": "getPoint",
        "documentation": "",
        "type": "(t: number) => Vector3"
      }
    ]
  },
  {
    "name": "CubicBezierCurve",
    "documentation": "",
    "type": "typeof CubicBezierCurve",
    "constructors": [
      {
        "parameters": [
          {
            "name": "v0",
            "documentation": "",
            "type": "Vector2"
          },
          {
            "name": "v1",
            "documentation": "",
            "type": "Vector2"
          },
          {
            "name": "v2",
            "documentation": "",
            "type": "Vector2"
          },
          {
            "name": "v3",
            "documentation": "",
            "type": "Vector2"
          }
        ],
        "returnType": "CubicBezierCurve",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "v0",
        "documentation": "",
        "type": "Vector2"
      },
      {
        "name": "v1",
        "documentation": "",
        "type": "Vector2"
      },
      {
        "name": "v2",
        "documentation": "",
        "type": "Vector2"
      },
      {
        "name": "v3",
        "documentation": "",
        "type": "Vector2"
      }
    ],
    "methods": []
  },
  {
    "name": "CubicBezierCurve3",
    "documentation": "",
    "type": "typeof CubicBezierCurve3",
    "constructors": [
      {
        "parameters": [
          {
            "name": "v0",
            "documentation": "",
            "type": "Vector3"
          },
          {
            "name": "v1",
            "documentation": "",
            "type": "Vector3"
          },
          {
            "name": "v2",
            "documentation": "",
            "type": "Vector3"
          },
          {
            "name": "v3",
            "documentation": "",
            "type": "Vector3"
          }
        ],
        "returnType": "CubicBezierCurve3",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "v0",
        "documentation": "",
        "type": "Vector3"
      },
      {
        "name": "v1",
        "documentation": "",
        "type": "Vector3"
      },
      {
        "name": "v2",
        "documentation": "",
        "type": "Vector3"
      },
      {
        "name": "v3",
        "documentation": "",
        "type": "Vector3"
      }
    ],
    "methods": [
      {
        "name": "getPoint",
        "documentation": "",
        "type": "(t: number) => Vector3"
      }
    ]
  },
  {
    "name": "EllipseCurve",
    "documentation": "",
    "type": "typeof EllipseCurve",
    "constructors": [
      {
        "parameters": [
          {
            "name": "aX",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "aY",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "xRadius",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "yRadius",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "aStartAngle",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "aEndAngle",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "aClockwise",
            "documentation": "",
            "type": "boolean"
          },
          {
            "name": "aRotation",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "EllipseCurve",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "aX",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "aY",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "xRadius",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "yRadius",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "aStartAngle",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "aEndAngle",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "aClockwise",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "aRotation",
        "documentation": "",
        "type": "number"
      }
    ],
    "methods": []
  },
  {
    "name": "ArcCurve",
    "documentation": "",
    "type": "typeof ArcCurve",
    "constructors": [
      {
        "parameters": [
          {
            "name": "aX",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "aY",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "aRadius",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "aStartAngle",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "aEndAngle",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "aClockwise",
            "documentation": "",
            "type": "boolean"
          }
        ],
        "returnType": "ArcCurve",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": []
  },
  {
    "name": "LineCurve",
    "documentation": "",
    "type": "typeof LineCurve",
    "constructors": [
      {
        "parameters": [
          {
            "name": "v1",
            "documentation": "",
            "type": "Vector2"
          },
          {
            "name": "v2",
            "documentation": "",
            "type": "Vector2"
          }
        ],
        "returnType": "LineCurve",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "v1",
        "documentation": "",
        "type": "Vector2"
      },
      {
        "name": "v2",
        "documentation": "",
        "type": "Vector2"
      }
    ],
    "methods": []
  },
  {
    "name": "LineCurve3",
    "documentation": "",
    "type": "typeof LineCurve3",
    "constructors": [
      {
        "parameters": [
          {
            "name": "v1",
            "documentation": "",
            "type": "Vector3"
          },
          {
            "name": "v2",
            "documentation": "",
            "type": "Vector3"
          }
        ],
        "returnType": "LineCurve3",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "v1",
        "documentation": "",
        "type": "Vector3"
      },
      {
        "name": "v2",
        "documentation": "",
        "type": "Vector3"
      }
    ],
    "methods": [
      {
        "name": "getPoint",
        "documentation": "",
        "type": "(t: number) => Vector3"
      }
    ]
  },
  {
    "name": "QuadraticBezierCurve",
    "documentation": "",
    "type": "typeof QuadraticBezierCurve",
    "constructors": [
      {
        "parameters": [
          {
            "name": "v0",
            "documentation": "",
            "type": "Vector2"
          },
          {
            "name": "v1",
            "documentation": "",
            "type": "Vector2"
          },
          {
            "name": "v2",
            "documentation": "",
            "type": "Vector2"
          }
        ],
        "returnType": "QuadraticBezierCurve",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "v0",
        "documentation": "",
        "type": "Vector2"
      },
      {
        "name": "v1",
        "documentation": "",
        "type": "Vector2"
      },
      {
        "name": "v2",
        "documentation": "",
        "type": "Vector2"
      }
    ],
    "methods": []
  },
  {
    "name": "QuadraticBezierCurve3",
    "documentation": "",
    "type": "typeof QuadraticBezierCurve3",
    "constructors": [
      {
        "parameters": [
          {
            "name": "v0",
            "documentation": "",
            "type": "Vector3"
          },
          {
            "name": "v1",
            "documentation": "",
            "type": "Vector3"
          },
          {
            "name": "v2",
            "documentation": "",
            "type": "Vector3"
          }
        ],
        "returnType": "QuadraticBezierCurve3",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "v0",
        "documentation": "",
        "type": "Vector3"
      },
      {
        "name": "v1",
        "documentation": "",
        "type": "Vector3"
      },
      {
        "name": "v2",
        "documentation": "",
        "type": "Vector3"
      }
    ],
    "methods": [
      {
        "name": "getPoint",
        "documentation": "",
        "type": "(t: number) => Vector3"
      }
    ]
  },
  {
    "name": "SplineCurve",
    "documentation": "",
    "type": "typeof SplineCurve",
    "constructors": [
      {
        "parameters": [
          {
            "name": "points",
            "documentation": "",
            "type": "Vector2[]"
          }
        ],
        "returnType": "SplineCurve",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "points",
        "documentation": "",
        "type": "Vector2[]"
      }
    ],
    "methods": []
  },
  {
    "name": "BoxBufferGeometry",
    "documentation": "",
    "type": "typeof BoxBufferGeometry",
    "constructors": [
      {
        "parameters": [
          {
            "name": "width",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "height",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "depth",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "widthSegments",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "heightSegments",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "depthSegments",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "BoxBufferGeometry",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "parameters",
        "documentation": "",
        "type": "{ width: number; height: number; depth: number; widthSegments: number; heightSegments: number; de..."
      }
    ],
    "methods": []
  },
  {
    "name": "BoxGeometry",
    "documentation": "BoxGeometry is the quadrilateral primitive geometry class. It is typically used for creating a cube or irregular quadrilateral of the dimensions provided within the (optional) 'width', 'height', & 'depth' constructor arguments.",
    "type": "typeof BoxGeometry",
    "constructors": [
      {
        "parameters": [
          {
            "name": "width",
            "documentation": "— Width of the sides on the X axis.",
            "type": "number"
          },
          {
            "name": "height",
            "documentation": "— Height of the sides on the Y axis.",
            "type": "number"
          },
          {
            "name": "depth",
            "documentation": "— Depth of the sides on the Z axis.",
            "type": "number"
          },
          {
            "name": "widthSegments",
            "documentation": "— Number of segmented faces along the width of the sides.",
            "type": "number"
          },
          {
            "name": "heightSegments",
            "documentation": "— Number of segmented faces along the height of the sides.",
            "type": "number"
          },
          {
            "name": "depthSegments",
            "documentation": "— Number of segmented faces along the depth of the sides.",
            "type": "number"
          }
        ],
        "returnType": "BoxGeometry",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "parameters",
        "documentation": "",
        "type": "{ width: number; height: number; depth: number; widthSegments: number; heightSegments: number; de..."
      }
    ],
    "methods": []
  },
  {
    "name": "CubeGeometry",
    "documentation": "",
    "type": "typeof CubeGeometry",
    "constructors": [
      {
        "parameters": [
          {
            "name": "width",
            "documentation": "— Width of the sides on the X axis.",
            "type": "number"
          },
          {
            "name": "height",
            "documentation": "— Height of the sides on the Y axis.",
            "type": "number"
          },
          {
            "name": "depth",
            "documentation": "— Depth of the sides on the Z axis.",
            "type": "number"
          },
          {
            "name": "widthSegments",
            "documentation": "— Number of segmented faces along the width of the sides.",
            "type": "number"
          },
          {
            "name": "heightSegments",
            "documentation": "— Number of segmented faces along the height of the sides.",
            "type": "number"
          },
          {
            "name": "depthSegments",
            "documentation": "— Number of segmented faces along the depth of the sides.",
            "type": "number"
          }
        ],
        "returnType": "CubeGeometry",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": []
  },
  {
    "name": "CircleBufferGeometry",
    "documentation": "",
    "type": "typeof CircleBufferGeometry",
    "constructors": [
      {
        "parameters": [
          {
            "name": "radius",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "segments",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "thetaStart",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "thetaLength",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "CircleBufferGeometry",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "parameters",
        "documentation": "",
        "type": "{ radius: number; segments: number; thetaStart: number; thetaLength: number; }"
      }
    ],
    "methods": []
  },
  {
    "name": "CircleGeometry",
    "documentation": "",
    "type": "typeof CircleGeometry",
    "constructors": [
      {
        "parameters": [
          {
            "name": "radius",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "segments",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "thetaStart",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "thetaLength",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "CircleGeometry",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "parameters",
        "documentation": "",
        "type": "{ radius: number; segments: number; thetaStart: number; thetaLength: number; }"
      }
    ],
    "methods": []
  },
  {
    "name": "CylinderBufferGeometry",
    "documentation": "",
    "type": "typeof CylinderBufferGeometry",
    "constructors": [
      {
        "parameters": [
          {
            "name": "radiusTop",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "radiusBottom",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "height",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "radialSegments",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "heightSegments",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "openEnded",
            "documentation": "",
            "type": "boolean"
          },
          {
            "name": "thetaStart",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "thetaLength",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "CylinderBufferGeometry",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "parameters",
        "documentation": "",
        "type": "{ radiusTop: number; radiusBottom: number; height: number; radialSegments: number; heightSegments..."
      }
    ],
    "methods": []
  },
  {
    "name": "CylinderGeometry",
    "documentation": "",
    "type": "typeof CylinderGeometry",
    "constructors": [
      {
        "parameters": [
          {
            "name": "radiusTop",
            "documentation": "— Radius of the cylinder at the top.",
            "type": "number"
          },
          {
            "name": "radiusBottom",
            "documentation": "— Radius of the cylinder at the bottom.",
            "type": "number"
          },
          {
            "name": "height",
            "documentation": "— Height of the cylinder.",
            "type": "number"
          },
          {
            "name": "radiusSegments",
            "documentation": "— Number of segmented faces around the circumference of the cylinder.",
            "type": "number"
          },
          {
            "name": "heightSegments",
            "documentation": "— Number of rows of faces along the height of the cylinder.",
            "type": "number"
          },
          {
            "name": "openEnded",
            "documentation": "- A Boolean indicating whether or not to cap the ends of the cylinder.",
            "type": "boolean"
          },
          {
            "name": "thetaStart",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "thetaLength",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "CylinderGeometry",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "parameters",
        "documentation": "",
        "type": "{ radiusTop: number; radiusBottom: number; height: number; radialSegments: number; heightSegments..."
      }
    ],
    "methods": []
  },
  {
    "name": "ConeBufferGeometry",
    "documentation": "",
    "type": "typeof ConeBufferGeometry",
    "constructors": [
      {
        "parameters": [
          {
            "name": "radius",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "height",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "radialSegment",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "heightSegment",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "openEnded",
            "documentation": "",
            "type": "boolean"
          },
          {
            "name": "thetaStart",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "thetaLength",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "ConeBufferGeometry",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": []
  },
  {
    "name": "ConeGeometry",
    "documentation": "",
    "type": "typeof ConeGeometry",
    "constructors": [
      {
        "parameters": [
          {
            "name": "radius",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "height",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "radialSegment",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "heightSegment",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "openEnded",
            "documentation": "",
            "type": "boolean"
          },
          {
            "name": "thetaStart",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "thetaLength",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "ConeGeometry",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": []
  },
  {
    "name": "DodecahedronGeometry",
    "documentation": "",
    "type": "typeof DodecahedronGeometry",
    "constructors": [
      {
        "parameters": [
          {
            "name": "radius",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "detail",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "DodecahedronGeometry",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "parameters",
        "documentation": "",
        "type": "{ radius: number; detail: number; }"
      }
    ],
    "methods": []
  },
  {
    "name": "EdgesGeometry",
    "documentation": "",
    "type": "typeof EdgesGeometry",
    "constructors": [
      {
        "parameters": [
          {
            "name": "geometry",
            "documentation": "",
            "type": "BufferGeometry"
          },
          {
            "name": "thresholdAngle",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "EdgesGeometry",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": []
  },
  {
    "name": "ExtrudeGeometry",
    "documentation": "",
    "type": "typeof ExtrudeGeometry",
    "constructors": [
      {
        "parameters": [
          {
            "name": "shape",
            "documentation": "",
            "type": "Shape"
          },
          {
            "name": "options",
            "documentation": "",
            "type": "any"
          }
        ],
        "returnType": "ExtrudeGeometry",
        "documentation": ""
      },
      {
        "parameters": [
          {
            "name": "shapes",
            "documentation": "",
            "type": "Shape[]"
          },
          {
            "name": "options",
            "documentation": "",
            "type": "any"
          }
        ],
        "returnType": "ExtrudeGeometry",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": [
      {
        "name": "addShapeList",
        "documentation": "",
        "type": "(shapes: Shape[], options?: any) => void"
      },
      {
        "name": "addShape",
        "documentation": "",
        "type": "(shape: Shape, options?: any) => void"
      }
    ]
  },
  {
    "name": "IcosahedronGeometry",
    "documentation": "",
    "type": "typeof IcosahedronGeometry",
    "constructors": [
      {
        "parameters": [
          {
            "name": "radius",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "detail",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "IcosahedronGeometry",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": []
  },
  {
    "name": "LatheBufferGeometry",
    "documentation": "",
    "type": "typeof LatheBufferGeometry",
    "constructors": [
      {
        "parameters": [
          {
            "name": "points",
            "documentation": "",
            "type": "Vector3[]"
          },
          {
            "name": "segments",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "phiStart",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "phiLength",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "LatheBufferGeometry",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "parameters",
        "documentation": "",
        "type": "{ points: Vector3[]; segments: number; phiStart: number; phiLength: number; }"
      }
    ],
    "methods": []
  },
  {
    "name": "LatheGeometry",
    "documentation": "",
    "type": "typeof LatheGeometry",
    "constructors": [
      {
        "parameters": [
          {
            "name": "points",
            "documentation": "",
            "type": "Vector3[]"
          },
          {
            "name": "segments",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "phiStart",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "phiLength",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "LatheGeometry",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "parameters",
        "documentation": "",
        "type": "{ points: Vector3[]; segments: number; phiStart: number; phiLength: number; }"
      }
    ],
    "methods": []
  },
  {
    "name": "OctahedronGeometry",
    "documentation": "",
    "type": "typeof OctahedronGeometry",
    "constructors": [
      {
        "parameters": [
          {
            "name": "radius",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "detail",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "OctahedronGeometry",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": []
  },
  {
    "name": "ParametricGeometry",
    "documentation": "",
    "type": "typeof ParametricGeometry",
    "constructors": [
      {
        "parameters": [
          {
            "name": "func",
            "documentation": "",
            "type": "(u: number, v: number) => Vector3"
          },
          {
            "name": "slices",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "stacks",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "ParametricGeometry",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "parameters",
        "documentation": "",
        "type": "{ func: (u: number, v: number) => Vector3; slices: number; stacks: number; }"
      }
    ],
    "methods": []
  },
  {
    "name": "PlaneBufferGeometry",
    "documentation": "",
    "type": "typeof PlaneBufferGeometry",
    "constructors": [
      {
        "parameters": [
          {
            "name": "width",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "height",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "widthSegments",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "heightSegments",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "PlaneBufferGeometry",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "parameters",
        "documentation": "",
        "type": "{ width: number; height: number; widthSegments: number; heightSegments: number; }"
      }
    ],
    "methods": []
  },
  {
    "name": "PlaneGeometry",
    "documentation": "",
    "type": "typeof PlaneGeometry",
    "constructors": [
      {
        "parameters": [
          {
            "name": "width",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "height",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "widthSegments",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "heightSegments",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "PlaneGeometry",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "parameters",
        "documentation": "",
        "type": "{ width: number; height: number; widthSegments: number; heightSegments: number; }"
      }
    ],
    "methods": []
  },
  {
    "name": "PolyhedronGeometry",
    "documentation": "",
    "type": "typeof PolyhedronGeometry",
    "constructors": [
      {
        "parameters": [
          {
            "name": "vertices",
            "documentation": "",
            "type": "number[]"
          },
          {
            "name": "indices",
            "documentation": "",
            "type": "number[]"
          },
          {
            "name": "radius",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "detail",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "PolyhedronGeometry",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "parameters",
        "documentation": "",
        "type": "{ vertices: number[]; indices: number[]; radius: number; detail: number; }"
      },
      {
        "name": "boundingSphere",
        "documentation": "",
        "type": "Sphere"
      }
    ],
    "methods": []
  },
  {
    "name": "RingBufferGeometry",
    "documentation": "",
    "type": "typeof RingBufferGeometry",
    "constructors": [
      {
        "parameters": [
          {
            "name": "innerRadius",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "outerRadius",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "thetaSegments",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "phiSegments",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "thetaStart",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "thetaLength",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "RingBufferGeometry",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "parameters",
        "documentation": "",
        "type": "{ innerRadius: number; outerRadius: number; thetaSegments: number; phiSegments: number; thetaStar..."
      }
    ],
    "methods": []
  },
  {
    "name": "RingGeometry",
    "documentation": "",
    "type": "typeof RingGeometry",
    "constructors": [
      {
        "parameters": [
          {
            "name": "innerRadius",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "outerRadius",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "thetaSegments",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "phiSegments",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "thetaStart",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "thetaLength",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "RingGeometry",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "parameters",
        "documentation": "",
        "type": "{ innerRadius: number; outerRadius: number; thetaSegments: number; phiSegments: number; thetaStar..."
      }
    ],
    "methods": []
  },
  {
    "name": "ShapeGeometry",
    "documentation": "",
    "type": "typeof ShapeGeometry",
    "constructors": [
      {
        "parameters": [
          {
            "name": "shape",
            "documentation": "",
            "type": "Shape"
          },
          {
            "name": "options",
            "documentation": "",
            "type": "any"
          }
        ],
        "returnType": "ShapeGeometry",
        "documentation": ""
      },
      {
        "parameters": [
          {
            "name": "shapes",
            "documentation": "",
            "type": "Shape[]"
          },
          {
            "name": "options",
            "documentation": "",
            "type": "any"
          }
        ],
        "returnType": "ShapeGeometry",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": [
      {
        "name": "addShapeList",
        "documentation": "",
        "type": "(shapes: Shape[], options: any) => ShapeGeometry"
      },
      {
        "name": "addShape",
        "documentation": "",
        "type": "(shape: Shape, options?: any) => void"
      }
    ]
  },
  {
    "name": "SphereBufferGeometry",
    "documentation": "",
    "type": "typeof SphereBufferGeometry",
    "constructors": [
      {
        "parameters": [
          {
            "name": "radius",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "widthSegments",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "heightSegments",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "phiStart",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "phiLength",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "thetaStart",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "thetaLength",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "SphereBufferGeometry",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "parameters",
        "documentation": "",
        "type": "{ radius: number; widthSegments: number; heightSegments: number; phiStart: number; phiLength: num..."
      }
    ],
    "methods": []
  },
  {
    "name": "SphereGeometry",
    "documentation": "A class for generating sphere geometries",
    "type": "typeof SphereGeometry",
    "constructors": [
      {
        "parameters": [
          {
            "name": "radius",
            "documentation": "— sphere radius. Default is 50.",
            "type": "number"
          },
          {
            "name": "widthSegments",
            "documentation": "— number of horizontal segments. Minimum value is 3, and the default is 8.",
            "type": "number"
          },
          {
            "name": "heightSegments",
            "documentation": "— number of vertical segments. Minimum value is 2, and the default is 6.",
            "type": "number"
          },
          {
            "name": "phiStart",
            "documentation": "— specify horizontal starting angle. Default is 0.",
            "type": "number"
          },
          {
            "name": "phiLength",
            "documentation": "— specify horizontal sweep angle size. Default is Math.PI * 2.",
            "type": "number"
          },
          {
            "name": "thetaStart",
            "documentation": "— specify vertical starting angle. Default is 0.",
            "type": "number"
          },
          {
            "name": "thetaLength",
            "documentation": "— specify vertical sweep angle size. Default is Math.PI.",
            "type": "number"
          }
        ],
        "returnType": "SphereGeometry",
        "documentation": "The geometry is created by sweeping and calculating vertexes around the Y axis (horizontal sweep) and the Z axis (vertical sweep). Thus, incomplete spheres (akin to 'sphere slices') can be created through the use of different values of phiStart, phiLength, thetaStart and thetaLength, in order to define the points in which we start (or end) calculating those vertices."
      }
    ],
    "properties": [
      {
        "name": "parameters",
        "documentation": "",
        "type": "{ radius: number; widthSegments: number; heightSegments: number; phiStart: number; phiLength: num..."
      }
    ],
    "methods": []
  },
  {
    "name": "TetrahedronGeometry",
    "documentation": "",
    "type": "typeof TetrahedronGeometry",
    "constructors": [
      {
        "parameters": [
          {
            "name": "radius",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "detail",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "TetrahedronGeometry",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": []
  },
  {
    "name": "TextGeometry",
    "documentation": "",
    "type": "typeof TextGeometry",
    "constructors": [
      {
        "parameters": [
          {
            "name": "text",
            "documentation": "",
            "type": "string"
          },
          {
            "name": "parameters",
            "documentation": "",
            "type": "TextGeometryParameters"
          }
        ],
        "returnType": "TextGeometry",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "parameters",
        "documentation": "",
        "type": "{ font: Font; size: number; height: number; curveSegments: number; bevelEnabled: boolean; bevelTh..."
      }
    ],
    "methods": []
  },
  {
    "name": "TorusBufferGeometry",
    "documentation": "",
    "type": "typeof TorusBufferGeometry",
    "constructors": [
      {
        "parameters": [
          {
            "name": "radius",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "tube",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "radialSegments",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "tubularSegments",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "arc",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "TorusBufferGeometry",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "parameters",
        "documentation": "",
        "type": "{ radius: number; tube: number; radialSegments: number; tubularSegments: number; arc: number; }"
      }
    ],
    "methods": []
  },
  {
    "name": "TorusGeometry",
    "documentation": "",
    "type": "typeof TorusGeometry",
    "constructors": [
      {
        "parameters": [
          {
            "name": "radius",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "tube",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "radialSegments",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "tubularSegments",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "arc",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "TorusGeometry",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "parameters",
        "documentation": "",
        "type": "{ radius: number; tube: number; radialSegments: number; tubularSegments: number; arc: number; }"
      }
    ],
    "methods": []
  },
  {
    "name": "TorusKnotBufferGeometry",
    "documentation": "",
    "type": "typeof TorusKnotBufferGeometry",
    "constructors": [
      {
        "parameters": [
          {
            "name": "radius",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "tube",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "radialSegments",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "tubularSegments",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "p",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "q",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "heightScale",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "TorusKnotBufferGeometry",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "parameters",
        "documentation": "",
        "type": "{ radius: number; tube: number; radialSegments: number; tubularSegments: number; p: number; q: nu..."
      }
    ],
    "methods": []
  },
  {
    "name": "TorusKnotGeometry",
    "documentation": "",
    "type": "typeof TorusKnotGeometry",
    "constructors": [
      {
        "parameters": [
          {
            "name": "radius",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "tube",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "radialSegments",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "tubularSegments",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "p",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "q",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "heightScale",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "TorusKnotGeometry",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "parameters",
        "documentation": "",
        "type": "{ radius: number; tube: number; radialSegments: number; tubularSegments: number; p: number; q: nu..."
      }
    ],
    "methods": []
  },
  {
    "name": "TubeGeometry",
    "documentation": "",
    "type": "typeof TubeGeometry",
    "constructors": [
      {
        "parameters": [
          {
            "name": "path",
            "documentation": "",
            "type": "Curve<Vector3>"
          },
          {
            "name": "segments",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "radius",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "radiusSegments",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "closed",
            "documentation": "",
            "type": "boolean"
          },
          {
            "name": "taper",
            "documentation": "",
            "type": "(u: number) => number"
          }
        ],
        "returnType": "TubeGeometry",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "parameters",
        "documentation": "",
        "type": "{ path: Curve<Vector3>; segments: number; radius: number; radialSegments: number; closed: boolean..."
      },
      {
        "name": "tangents",
        "documentation": "",
        "type": "Vector3[]"
      },
      {
        "name": "normals",
        "documentation": "",
        "type": "Vector3[]"
      },
      {
        "name": "binormals",
        "documentation": "",
        "type": "Vector3[]"
      }
    ],
    "methods": []
  },
  {
    "name": "TubeBufferGeometry",
    "documentation": "",
    "type": "typeof TubeBufferGeometry",
    "constructors": [
      {
        "parameters": [
          {
            "name": "path",
            "documentation": "",
            "type": "Curve<Vector3>"
          },
          {
            "name": "segments",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "radius",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "radiusSegments",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "closed",
            "documentation": "",
            "type": "boolean"
          }
        ],
        "returnType": "TubeBufferGeometry",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "parameters",
        "documentation": "",
        "type": "{ path: Curve<Vector3>; segments: number; radius: number; radialSegments: number; closed: boolean..."
      },
      {
        "name": "tangents",
        "documentation": "",
        "type": "Vector3[]"
      },
      {
        "name": "normals",
        "documentation": "",
        "type": "Vector3[]"
      },
      {
        "name": "binormals",
        "documentation": "",
        "type": "Vector3[]"
      }
    ],
    "methods": []
  },
  {
    "name": "WireframeGeometry",
    "documentation": "",
    "type": "typeof WireframeGeometry",
    "constructors": [
      {
        "parameters": [
          {
            "name": "geometry",
            "documentation": "",
            "type": "BufferGeometry | Geometry"
          }
        ],
        "returnType": "WireframeGeometry",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": []
  },
  {
    "name": "ArrowHelper",
    "documentation": "",
    "type": "typeof ArrowHelper",
    "constructors": [
      {
        "parameters": [
          {
            "name": "dir",
            "documentation": "",
            "type": "Vector3"
          },
          {
            "name": "origin",
            "documentation": "",
            "type": "Vector3"
          },
          {
            "name": "length",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "hex",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "headLength",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "headWidth",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "ArrowHelper",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "line",
        "documentation": "",
        "type": "Line"
      },
      {
        "name": "cone",
        "documentation": "",
        "type": "Mesh"
      }
    ],
    "methods": [
      {
        "name": "setDirection",
        "documentation": "",
        "type": "(dir: Vector3) => void"
      },
      {
        "name": "setLength",
        "documentation": "",
        "type": "(length: number, headLength?: number, headWidth?: number) => void"
      },
      {
        "name": "setColor",
        "documentation": "",
        "type": "(hex: number) => void"
      }
    ]
  },
  {
    "name": "AxisHelper",
    "documentation": "",
    "type": "typeof AxisHelper",
    "constructors": [
      {
        "parameters": [
          {
            "name": "size",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "AxisHelper",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": []
  },
  {
    "name": "BoundingBoxHelper",
    "documentation": "",
    "type": "typeof BoundingBoxHelper",
    "constructors": [
      {
        "parameters": [
          {
            "name": "object",
            "documentation": "",
            "type": "Object3D"
          },
          {
            "name": "hex",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "BoundingBoxHelper",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "object",
        "documentation": "",
        "type": "Object3D"
      },
      {
        "name": "box",
        "documentation": "",
        "type": "Box3"
      }
    ],
    "methods": [
      {
        "name": "update",
        "documentation": "",
        "type": "() => void"
      }
    ]
  },
  {
    "name": "BoxHelper",
    "documentation": "",
    "type": "typeof BoxHelper",
    "constructors": [
      {
        "parameters": [
          {
            "name": "object",
            "documentation": "",
            "type": "Object3D"
          },
          {
            "name": "color",
            "documentation": "",
            "type": "Color"
          }
        ],
        "returnType": "BoxHelper",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": [
      {
        "name": "update",
        "documentation": "",
        "type": "(object?: Object3D) => void"
      }
    ]
  },
  {
    "name": "CameraHelper",
    "documentation": "",
    "type": "typeof CameraHelper",
    "constructors": [
      {
        "parameters": [
          {
            "name": "camera",
            "documentation": "",
            "type": "Camera"
          }
        ],
        "returnType": "CameraHelper",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "camera",
        "documentation": "",
        "type": "Camera"
      },
      {
        "name": "pointMap",
        "documentation": "",
        "type": "{ [id: string]: number[]; }"
      }
    ],
    "methods": [
      {
        "name": "update",
        "documentation": "",
        "type": "() => void"
      }
    ]
  },
  {
    "name": "DirectionalLightHelper",
    "documentation": "",
    "type": "typeof DirectionalLightHelper",
    "constructors": [
      {
        "parameters": [
          {
            "name": "light",
            "documentation": "",
            "type": "Light"
          },
          {
            "name": "size",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "DirectionalLightHelper",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "light",
        "documentation": "",
        "type": "Light"
      },
      {
        "name": "lightPlane",
        "documentation": "",
        "type": "Line"
      }
    ],
    "methods": [
      {
        "name": "dispose",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "update",
        "documentation": "",
        "type": "() => void"
      }
    ]
  },
  {
    "name": "EdgesHelper",
    "documentation": "",
    "type": "typeof EdgesHelper",
    "constructors": [
      {
        "parameters": [
          {
            "name": "object",
            "documentation": "",
            "type": "Object3D"
          },
          {
            "name": "hex",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "thresholdAngle",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "EdgesHelper",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": []
  },
  {
    "name": "FaceNormalsHelper",
    "documentation": "",
    "type": "typeof FaceNormalsHelper",
    "constructors": [
      {
        "parameters": [
          {
            "name": "object",
            "documentation": "",
            "type": "Object3D"
          },
          {
            "name": "size",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "hex",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "linewidth",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "FaceNormalsHelper",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "object",
        "documentation": "",
        "type": "Object3D"
      },
      {
        "name": "size",
        "documentation": "",
        "type": "number"
      }
    ],
    "methods": [
      {
        "name": "update",
        "documentation": "",
        "type": "(object?: Object3D) => void"
      }
    ]
  },
  {
    "name": "GridHelper",
    "documentation": "",
    "type": "typeof GridHelper",
    "constructors": [
      {
        "parameters": [
          {
            "name": "size",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "divisions",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "color1",
            "documentation": "",
            "type": "number | Color"
          },
          {
            "name": "color2",
            "documentation": "",
            "type": "number | Color"
          }
        ],
        "returnType": "GridHelper",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": [
      {
        "name": "setColors",
        "documentation": "",
        "type": "(color1?: number | Color, color2?: number | Color) => void"
      }
    ]
  },
  {
    "name": "HemisphereLightHelper",
    "documentation": "",
    "type": "typeof HemisphereLightHelper",
    "constructors": [
      {
        "parameters": [
          {
            "name": "light",
            "documentation": "",
            "type": "Light"
          },
          {
            "name": "sphereSize",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "HemisphereLightHelper",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "light",
        "documentation": "",
        "type": "Light"
      },
      {
        "name": "colors",
        "documentation": "",
        "type": "Color[]"
      },
      {
        "name": "lightSphere",
        "documentation": "",
        "type": "Mesh"
      }
    ],
    "methods": [
      {
        "name": "dispose",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "update",
        "documentation": "",
        "type": "() => void"
      }
    ]
  },
  {
    "name": "PointLightHelper",
    "documentation": "",
    "type": "typeof PointLightHelper",
    "constructors": [
      {
        "parameters": [
          {
            "name": "light",
            "documentation": "",
            "type": "Light"
          },
          {
            "name": "sphereSize",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "PointLightHelper",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "light",
        "documentation": "",
        "type": "Light"
      }
    ],
    "methods": [
      {
        "name": "dispose",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "update",
        "documentation": "",
        "type": "() => void"
      }
    ]
  },
  {
    "name": "SkeletonHelper",
    "documentation": "",
    "type": "typeof SkeletonHelper",
    "constructors": [
      {
        "parameters": [
          {
            "name": "bone",
            "documentation": "",
            "type": "Object3D"
          }
        ],
        "returnType": "SkeletonHelper",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "bones",
        "documentation": "",
        "type": "Bone[]"
      },
      {
        "name": "root",
        "documentation": "",
        "type": "Object3D"
      }
    ],
    "methods": [
      {
        "name": "getBoneList",
        "documentation": "",
        "type": "(object: Object3D) => Bone[]"
      },
      {
        "name": "update",
        "documentation": "",
        "type": "() => void"
      }
    ]
  },
  {
    "name": "SpotLightHelper",
    "documentation": "",
    "type": "typeof SpotLightHelper",
    "constructors": [
      {
        "parameters": [
          {
            "name": "light",
            "documentation": "",
            "type": "Light"
          }
        ],
        "returnType": "SpotLightHelper",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "light",
        "documentation": "",
        "type": "Light"
      }
    ],
    "methods": [
      {
        "name": "dispose",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "update",
        "documentation": "",
        "type": "() => void"
      }
    ]
  },
  {
    "name": "VertexNormalsHelper",
    "documentation": "",
    "type": "typeof VertexNormalsHelper",
    "constructors": [
      {
        "parameters": [
          {
            "name": "object",
            "documentation": "",
            "type": "Object3D"
          },
          {
            "name": "size",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "hex",
            "documentation": "",
            "type": "number"
          },
          {
            "name": "linewidth",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "VertexNormalsHelper",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "object",
        "documentation": "",
        "type": "Object3D"
      },
      {
        "name": "size",
        "documentation": "",
        "type": "number"
      }
    ],
    "methods": [
      {
        "name": "update",
        "documentation": "",
        "type": "(object?: Object3D) => void"
      }
    ]
  },
  {
    "name": "WireframeHelper",
    "documentation": "",
    "type": "typeof WireframeHelper",
    "constructors": [
      {
        "parameters": [
          {
            "name": "object",
            "documentation": "",
            "type": "Object3D"
          },
          {
            "name": "hex",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "WireframeHelper",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": []
  },
  {
    "name": "ImmediateRenderObject",
    "documentation": "",
    "type": "typeof ImmediateRenderObject",
    "constructors": [
      {
        "parameters": [
          {
            "name": "material",
            "documentation": "",
            "type": "Material"
          }
        ],
        "returnType": "ImmediateRenderObject",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "material",
        "documentation": "",
        "type": "Material"
      }
    ],
    "methods": [
      {
        "name": "render",
        "documentation": "",
        "type": "(renderCallback: Function) => void"
      }
    ]
  },
  {
    "name": "MorphBlendMesh",
    "documentation": "",
    "type": "typeof MorphBlendMesh",
    "constructors": [
      {
        "parameters": [
          {
            "name": "geometry",
            "documentation": "",
            "type": "Geometry"
          },
          {
            "name": "material",
            "documentation": "",
            "type": "Material"
          }
        ],
        "returnType": "MorphBlendMesh",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "animationsMap",
        "documentation": "",
        "type": "{ [name: string]: MorphBlendMeshAnimation; }"
      },
      {
        "name": "animationsList",
        "documentation": "",
        "type": "MorphBlendMeshAnimation[]"
      }
    ],
    "methods": [
      {
        "name": "createAnimation",
        "documentation": "",
        "type": "(name: string, start: number, end: number, fps: number) => void"
      },
      {
        "name": "autoCreateAnimations",
        "documentation": "",
        "type": "(fps: number) => void"
      },
      {
        "name": "setAnimationDirectionForward",
        "documentation": "",
        "type": "(name: string) => void"
      },
      {
        "name": "setAnimationDirectionBackward",
        "documentation": "",
        "type": "(name: string) => void"
      },
      {
        "name": "setAnimationFPS",
        "documentation": "",
        "type": "(name: string, fps: number) => void"
      },
      {
        "name": "setAnimationDuration",
        "documentation": "",
        "type": "(name: string, duration: number) => void"
      },
      {
        "name": "setAnimationWeight",
        "documentation": "",
        "type": "(name: string, weight: number) => void"
      },
      {
        "name": "setAnimationTime",
        "documentation": "",
        "type": "(name: string, time: number) => void"
      },
      {
        "name": "getAnimationTime",
        "documentation": "",
        "type": "(name: string) => number"
      },
      {
        "name": "getAnimationDuration",
        "documentation": "",
        "type": "(name: string) => number"
      },
      {
        "name": "playAnimation",
        "documentation": "",
        "type": "(name: string) => void"
      },
      {
        "name": "stopAnimation",
        "documentation": "",
        "type": "(name: string) => void"
      },
      {
        "name": "update",
        "documentation": "",
        "type": "(delta: number) => void"
      }
    ]
  },
  {
    "name": "SpriteCanvasMaterial",
    "documentation": "",
    "type": "typeof SpriteCanvasMaterial",
    "constructors": [
      {
        "parameters": [
          {
            "name": "parameters",
            "documentation": "",
            "type": "SpriteCanvasMaterialParameters"
          }
        ],
        "returnType": "SpriteCanvasMaterial",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "color",
        "documentation": "",
        "type": "Color"
      }
    ],
    "methods": [
      {
        "name": "program",
        "documentation": "",
        "type": "(context: CanvasRenderingContext2D, color: Color) => void"
      }
    ]
  },
  {
    "name": "CanvasRenderer",
    "documentation": "",
    "type": "typeof CanvasRenderer",
    "constructors": [
      {
        "parameters": [
          {
            "name": "parameters",
            "documentation": "",
            "type": "CanvasRendererParameters"
          }
        ],
        "returnType": "CanvasRenderer",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "domElement",
        "documentation": "",
        "type": "HTMLCanvasElement"
      },
      {
        "name": "autoClear",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "sortObjects",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "sortElements",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "info",
        "documentation": "",
        "type": "{ render: { vertices: number; faces: number; }; }"
      }
    ],
    "methods": [
      {
        "name": "supportsVertexTextures",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "setFaceCulling",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "getPixelRatio",
        "documentation": "",
        "type": "() => number"
      },
      {
        "name": "setPixelRatio",
        "documentation": "",
        "type": "(value: number) => void"
      },
      {
        "name": "setSize",
        "documentation": "",
        "type": "(width: number, height: number, updateStyle?: boolean) => void"
      },
      {
        "name": "setViewport",
        "documentation": "",
        "type": "(x: number, y: number, width: number, height: number) => void"
      },
      {
        "name": "setScissor",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "enableScissorTest",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "setClearColor",
        "documentation": "",
        "type": "(color: string | number | Color, opacity?: number) => void"
      },
      {
        "name": "setClearColorHex",
        "documentation": "",
        "type": "(hex: number, alpha?: number) => void"
      },
      {
        "name": "getClearColor",
        "documentation": "",
        "type": "() => Color"
      },
      {
        "name": "getClearAlpha",
        "documentation": "",
        "type": "() => number"
      },
      {
        "name": "getMaxAnisotropy",
        "documentation": "",
        "type": "() => number"
      },
      {
        "name": "clear",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "clearColor",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "clearDepth",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "clearStencil",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "render",
        "documentation": "",
        "type": "(scene: Scene, camera: Camera) => void"
      }
    ]
  },
  {
    "name": "ColladaModel",
    "documentation": "",
    "type": "typeof ColladaModel",
    "constructors": [
      {
        "parameters": [],
        "returnType": "ColladaModel",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "kinematics",
        "documentation": "",
        "type": "any"
      },
      {
        "name": "scene",
        "documentation": "",
        "type": "Scene"
      },
      {
        "name": "library",
        "documentation": "",
        "type": "any"
      }
    ],
    "methods": []
  },
  {
    "name": "ColladaLoader",
    "documentation": "",
    "type": "typeof ColladaLoader",
    "constructors": [
      {
        "parameters": [],
        "returnType": "ColladaLoader",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": [
      {
        "name": "load",
        "documentation": "",
        "type": "(url: string, onLoad: (model: ColladaModel) => void, onProgress?: (request: ProgressEvent) => voi..."
      },
      {
        "name": "setCrossOrigin",
        "documentation": "",
        "type": "(value: any) => void"
      },
      {
        "name": "parse",
        "documentation": "",
        "type": "(text: string) => ColladaModel"
      }
    ]
  },
  {
    "name": "CSS3DObject",
    "documentation": "",
    "type": "typeof CSS3DObject",
    "constructors": [
      {
        "parameters": [
          {
            "name": "element",
            "documentation": "",
            "type": "any"
          }
        ],
        "returnType": "CSS3DObject",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "element",
        "documentation": "",
        "type": "any"
      }
    ],
    "methods": []
  },
  {
    "name": "CSS3DSprite",
    "documentation": "",
    "type": "typeof CSS3DSprite",
    "constructors": [
      {
        "parameters": [
          {
            "name": "element",
            "documentation": "",
            "type": "any"
          }
        ],
        "returnType": "CSS3DSprite",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": []
  },
  {
    "name": "CSS3DRenderer",
    "documentation": "",
    "type": "typeof CSS3DRenderer",
    "constructors": [
      {
        "parameters": [],
        "returnType": "CSS3DRenderer",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "domElement",
        "documentation": "",
        "type": "HTMLElement"
      }
    ],
    "methods": [
      {
        "name": "setSize",
        "documentation": "",
        "type": "(width: number, height: number) => void"
      },
      {
        "name": "render",
        "documentation": "",
        "type": "(scene: Scene, camera: Camera) => void"
      }
    ]
  },
  {
    "name": "CTMLoader",
    "documentation": "",
    "type": "typeof CTMLoader",
    "constructors": [
      {
        "parameters": [],
        "returnType": "CTMLoader",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": [
      {
        "name": "loadParts",
        "documentation": "load multiple CTM parts defined in JSON.",
        "type": "(url: string, callback: () => any, parameters?: any) => any"
      },
      {
        "name": "load",
        "documentation": "Load CTMLoader compressed models",
        "type": "(url: string, callback: (geo: any) => any, parameters?: any) => any"
      },
      {
        "name": "createModel",
        "documentation": "create buffergeometry by ctm file.",
        "type": "(file: string, callback: () => any) => any"
      }
    ]
  },
  {
    "name": "DDSLoader",
    "documentation": "",
    "type": "typeof DDSLoader",
    "constructors": [
      {
        "parameters": [],
        "returnType": "DDSLoader",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": [
      {
        "name": "parse",
        "documentation": "",
        "type": "(buffer: string, loadMipmaps: boolean) => Dds"
      }
    ]
  },
  {
    "name": "EditorControls",
    "documentation": "",
    "type": "typeof EditorControls",
    "constructors": [
      {
        "parameters": [
          {
            "name": "object",
            "documentation": "",
            "type": "Camera"
          },
          {
            "name": "domElement",
            "documentation": "",
            "type": "HTMLElement"
          }
        ],
        "returnType": "EditorControls",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "enabled",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "center",
        "documentation": "",
        "type": "Vector3"
      }
    ],
    "methods": [
      {
        "name": "focus",
        "documentation": "",
        "type": "(target: Object3D, frame: boolean) => void"
      },
      {
        "name": "pan",
        "documentation": "",
        "type": "(delta: Vector3) => void"
      },
      {
        "name": "zoom",
        "documentation": "",
        "type": "(delta: Vector3) => void"
      },
      {
        "name": "rotate",
        "documentation": "",
        "type": "(delta: Vector3) => void"
      },
      {
        "name": "dispose",
        "documentation": "",
        "type": "() => void"
      }
    ]
  },
  {
    "name": "ShaderPass",
    "documentation": "",
    "type": "typeof ShaderPass",
    "constructors": [
      {
        "parameters": [
          {
            "name": "shader",
            "documentation": "",
            "type": "Shader"
          },
          {
            "name": "textureID",
            "documentation": "",
            "type": "string"
          }
        ],
        "returnType": "ShaderPass",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "textureID",
        "documentation": "",
        "type": "string"
      },
      {
        "name": "uniforms",
        "documentation": "",
        "type": "any"
      },
      {
        "name": "material",
        "documentation": "",
        "type": "ShaderMaterial"
      },
      {
        "name": "renderToScreen",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "enabled",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "needsSwap",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "clear",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "camera",
        "documentation": "",
        "type": "Camera"
      },
      {
        "name": "scene",
        "documentation": "",
        "type": "Scene"
      },
      {
        "name": "quad",
        "documentation": "",
        "type": "Mesh"
      }
    ],
    "methods": [
      {
        "name": "render",
        "documentation": "",
        "type": "(renderer: WebGLRenderer, writeBuffer: WebGLRenderTarget, readBuffer: WebGLRenderTarget, delta: n..."
      }
    ]
  },
  {
    "name": "EffectComposer",
    "documentation": "",
    "type": "typeof EffectComposer",
    "constructors": [
      {
        "parameters": [
          {
            "name": "renderer",
            "documentation": "",
            "type": "WebGLRenderer"
          },
          {
            "name": "renderTarget",
            "documentation": "",
            "type": "WebGLRenderTarget"
          }
        ],
        "returnType": "EffectComposer",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "renderTarget1",
        "documentation": "",
        "type": "WebGLRenderTarget"
      },
      {
        "name": "renderTarget2",
        "documentation": "",
        "type": "WebGLRenderTarget"
      },
      {
        "name": "writeBuffer",
        "documentation": "",
        "type": "WebGLRenderTarget"
      },
      {
        "name": "readBuffer",
        "documentation": "",
        "type": "WebGLRenderTarget"
      },
      {
        "name": "passes",
        "documentation": "",
        "type": "any[]"
      },
      {
        "name": "copyPass",
        "documentation": "",
        "type": "ShaderPass"
      }
    ],
    "methods": [
      {
        "name": "swapBuffers",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "addPass",
        "documentation": "",
        "type": "(pass: any) => void"
      },
      {
        "name": "insertPass",
        "documentation": "",
        "type": "(pass: any, index: number) => void"
      },
      {
        "name": "render",
        "documentation": "",
        "type": "(delta?: number) => void"
      },
      {
        "name": "reset",
        "documentation": "",
        "type": "(renderTarget?: WebGLRenderTarget) => void"
      },
      {
        "name": "setSize",
        "documentation": "",
        "type": "(width: number, height: number) => void"
      }
    ]
  },
  {
    "name": "FBXLoader",
    "documentation": "",
    "type": "typeof FBXLoader",
    "constructors": [
      {
        "parameters": [
          {
            "name": "manager",
            "documentation": "",
            "type": "LoadingManager"
          }
        ],
        "returnType": "FBXLoader",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "manager",
        "documentation": "",
        "type": "LoadingManager"
      }
    ],
    "methods": [
      {
        "name": "load",
        "documentation": "",
        "type": "(url: string, onLoad: (group: Group) => void, onProgress?: (event: ProgressEvent) => void, onErro..."
      },
      {
        "name": "parse",
        "documentation": "",
        "type": "(FBXText: string, resourceDirectory: string) => Group"
      }
    ]
  },
  {
    "name": "FirstPersonControls",
    "documentation": "",
    "type": "typeof FirstPersonControls",
    "constructors": [
      {
        "parameters": [
          {
            "name": "object",
            "documentation": "",
            "type": "Camera"
          },
          {
            "name": "domElement",
            "documentation": "",
            "type": "HTMLElement"
          }
        ],
        "returnType": "FirstPersonControls",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "object",
        "documentation": "",
        "type": "Object3D"
      },
      {
        "name": "target",
        "documentation": "",
        "type": "Vector3"
      },
      {
        "name": "domElement",
        "documentation": "",
        "type": "HTMLCanvasElement | HTMLDocument"
      },
      {
        "name": "enabled",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "movementSpeed",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "lookSpeed",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "noFly",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "lookVertical",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "autoForward",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "activeLook",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "heightSpeed",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "heightCoef",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "heightMin",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "heightMax",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "constrainVertical",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "verticalMin",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "verticalMax",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "autoSpeedFactor",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "mouseX",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "mouseY",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "lat",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "lon",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "phi",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "theta",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "moveForward",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "moveBackward",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "moveLeft",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "moveRight",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "freeze",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "mouseDragOn",
        "documentation": "",
        "type": "boolean"
      }
    ],
    "methods": [
      {
        "name": "update",
        "documentation": "",
        "type": "(delta: number) => void"
      },
      {
        "name": "dispose",
        "documentation": "",
        "type": "() => void"
      }
    ]
  },
  {
    "name": "MaskPass",
    "documentation": "",
    "type": "typeof MaskPass",
    "constructors": [
      {
        "parameters": [
          {
            "name": "scene",
            "documentation": "",
            "type": "Scene"
          },
          {
            "name": "camera",
            "documentation": "",
            "type": "Camera"
          }
        ],
        "returnType": "MaskPass",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "scene",
        "documentation": "",
        "type": "Scene"
      },
      {
        "name": "camera",
        "documentation": "",
        "type": "Camera"
      },
      {
        "name": "enabled",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "clear",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "needsSwap",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "inverse",
        "documentation": "",
        "type": "boolean"
      }
    ],
    "methods": [
      {
        "name": "render",
        "documentation": "",
        "type": "(renderer: WebGLRenderer, writeBuffer: WebGLRenderTarget, readBuffer: WebGLRenderTarget, delta: n..."
      }
    ]
  },
  {
    "name": "ClearMaskPass",
    "documentation": "",
    "type": "typeof ClearMaskPass",
    "constructors": [
      {
        "parameters": [],
        "returnType": "ClearMaskPass",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "enabled",
        "documentation": "",
        "type": "boolean"
      }
    ],
    "methods": [
      {
        "name": "render",
        "documentation": "",
        "type": "(renderer: WebGLRenderer, writeBuffer: WebGLRenderTarget, readBuffer: WebGLRenderTarget, delta: n..."
      }
    ]
  },
  {
    "name": "MTLLoader",
    "documentation": "",
    "type": "typeof MTLLoader",
    "constructors": [
      {
        "parameters": [
          {
            "name": "manager",
            "documentation": "",
            "type": "LoadingManager"
          }
        ],
        "returnType": "MTLLoader",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "manager",
        "documentation": "",
        "type": "LoadingManager"
      },
      {
        "name": "materialOptions",
        "documentation": "",
        "type": "{}"
      },
      {
        "name": "materials",
        "documentation": "",
        "type": "Material[]"
      },
      {
        "name": "path",
        "documentation": "",
        "type": "string"
      },
      {
        "name": "texturePath",
        "documentation": "",
        "type": "string"
      },
      {
        "name": "crossOrigin",
        "documentation": "",
        "type": "boolean"
      }
    ],
    "methods": [
      {
        "name": "load",
        "documentation": "",
        "type": "(url: string, onLoad: (materialCreator: MaterialCreator) => void, onProgress?: (event: ProgressEv..."
      },
      {
        "name": "parse",
        "documentation": "",
        "type": "(text: string) => MaterialCreator"
      },
      {
        "name": "setPath",
        "documentation": "",
        "type": "(path: string) => void"
      },
      {
        "name": "setTexturePath",
        "documentation": "",
        "type": "(path: string) => void"
      },
      {
        "name": "setBaseUrl",
        "documentation": "",
        "type": "(path: string) => void"
      },
      {
        "name": "setCrossOrigin",
        "documentation": "",
        "type": "(value: boolean) => void"
      },
      {
        "name": "setMaterialOptions",
        "documentation": "",
        "type": "(value: any) => void"
      }
    ]
  },
  {
    "name": "MaterialCreator",
    "documentation": "",
    "type": "typeof MaterialCreator",
    "constructors": [
      {
        "parameters": [
          {
            "name": "baseUrl",
            "documentation": "",
            "type": "string"
          },
          {
            "name": "options",
            "documentation": "",
            "type": "any"
          }
        ],
        "returnType": "MaterialCreator",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "baseUrl",
        "documentation": "",
        "type": "string"
      },
      {
        "name": "options",
        "documentation": "",
        "type": "any"
      },
      {
        "name": "materialsInfo",
        "documentation": "",
        "type": "any"
      },
      {
        "name": "materials",
        "documentation": "",
        "type": "any"
      },
      {
        "name": "materialsArray",
        "documentation": "",
        "type": "Material[]"
      },
      {
        "name": "nameLookup",
        "documentation": "",
        "type": "any"
      },
      {
        "name": "side",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "wrap",
        "documentation": "",
        "type": "number"
      }
    ],
    "methods": [
      {
        "name": "setCrossOrigin",
        "documentation": "",
        "type": "(value: boolean) => void"
      },
      {
        "name": "setManager",
        "documentation": "",
        "type": "(value: any) => void"
      },
      {
        "name": "setMaterials",
        "documentation": "",
        "type": "(materialsInfo: any) => void"
      },
      {
        "name": "convert",
        "documentation": "",
        "type": "(materialsInfo: any) => any"
      },
      {
        "name": "preload",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "getIndex",
        "documentation": "",
        "type": "(materialName: string) => Material"
      },
      {
        "name": "getAsArray",
        "documentation": "",
        "type": "() => Material[]"
      },
      {
        "name": "create",
        "documentation": "",
        "type": "(materialName: string) => Material"
      },
      {
        "name": "createMaterial_",
        "documentation": "",
        "type": "(materialName: string) => Material"
      },
      {
        "name": "getTextureParams",
        "documentation": "",
        "type": "(value: string, matParams: any) => any"
      },
      {
        "name": "loadTexture",
        "documentation": "",
        "type": "(url: string, mapping: any, onLoad: (bufferGeometry: BufferGeometry) => void, onProgress?: (event..."
      }
    ]
  },
  {
    "name": "OBJLoader",
    "documentation": "",
    "type": "typeof OBJLoader",
    "constructors": [
      {
        "parameters": [
          {
            "name": "manager",
            "documentation": "",
            "type": "LoadingManager"
          }
        ],
        "returnType": "OBJLoader",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "manager",
        "documentation": "",
        "type": "LoadingManager"
      },
      {
        "name": "regexp",
        "documentation": "",
        "type": "any"
      },
      {
        "name": "materials",
        "documentation": "",
        "type": "Material[]"
      },
      {
        "name": "path",
        "documentation": "",
        "type": "string"
      }
    ],
    "methods": [
      {
        "name": "load",
        "documentation": "",
        "type": "(url: string, onLoad: (group: Group) => void, onProgress?: (event: ProgressEvent) => void, onErro..."
      },
      {
        "name": "parse",
        "documentation": "",
        "type": "(data: string) => Group"
      },
      {
        "name": "setPath",
        "documentation": "",
        "type": "(value: string) => void"
      },
      {
        "name": "setMaterials",
        "documentation": "",
        "type": "(materials: MaterialCreator) => void"
      },
      {
        "name": "_createParserState",
        "documentation": "",
        "type": "() => any"
      }
    ]
  },
  {
    "name": "Octree",
    "documentation": "",
    "type": "typeof Octree",
    "constructors": [
      {
        "parameters": [
          {
            "name": "parameters",
            "documentation": "",
            "type": "any"
          }
        ],
        "returnType": "Octree",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": [
      {
        "name": "update",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "add",
        "documentation": "",
        "type": "(object: any, options?: any) => any"
      },
      {
        "name": "addDeferred",
        "documentation": "",
        "type": "(object: any, options?: any) => any"
      },
      {
        "name": "addObjectData",
        "documentation": "",
        "type": "(object: any, part: any) => any"
      },
      {
        "name": "remove",
        "documentation": "",
        "type": "(object: any) => any"
      },
      {
        "name": "extend",
        "documentation": "",
        "type": "(octree: Octree) => any"
      },
      {
        "name": "rebuild",
        "documentation": "",
        "type": "() => any"
      },
      {
        "name": "updateObject",
        "documentation": "",
        "type": "(object: any) => any"
      },
      {
        "name": "search",
        "documentation": "",
        "type": "(position: Vector3, radius: number, organizeByObject: boolean, direction: Vector3) => any"
      },
      {
        "name": "setRoot",
        "documentation": "",
        "type": "(root: any) => any"
      },
      {
        "name": "getDepthEnd",
        "documentation": "",
        "type": "() => number"
      },
      {
        "name": "getNodeCountEnd",
        "documentation": "",
        "type": "() => number"
      },
      {
        "name": "getObjectCountEnd",
        "documentation": "",
        "type": "() => number"
      },
      {
        "name": "toConsole",
        "documentation": "",
        "type": "() => any"
      }
    ]
  },
  {
    "name": "OrbitControls",
    "documentation": "",
    "type": "typeof OrbitControls",
    "constructors": [
      {
        "parameters": [
          {
            "name": "object",
            "documentation": "",
            "type": "Camera"
          },
          {
            "name": "domElement",
            "documentation": "",
            "type": "HTMLElement"
          }
        ],
        "returnType": "OrbitControls",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "object",
        "documentation": "",
        "type": "Camera"
      },
      {
        "name": "domElement",
        "documentation": "",
        "type": "HTMLElement | HTMLDocument"
      },
      {
        "name": "enabled",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "target",
        "documentation": "",
        "type": "Vector3"
      },
      {
        "name": "center",
        "documentation": "",
        "type": "Vector3"
      },
      {
        "name": "enableZoom",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "zoomSpeed",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "minDistance",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "maxDistance",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "enableRotate",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "rotateSpeed",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "enablePan",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "keyPanSpeed",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "autoRotate",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "autoRotateSpeed",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "minPolarAngle",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "maxPolarAngle",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "minAzimuthAngle",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "maxAzimuthAngle",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "enableKeys",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "keys",
        "documentation": "",
        "type": "{ LEFT: number; UP: number; RIGHT: number; BOTTOM: number; }"
      },
      {
        "name": "mouseButtons",
        "documentation": "",
        "type": "{ ORBIT: MOUSE; ZOOM: MOUSE; PAN: MOUSE; }"
      },
      {
        "name": "enableDamping",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "dampingFactor",
        "documentation": "",
        "type": "number"
      }
    ],
    "methods": [
      {
        "name": "rotateLeft",
        "documentation": "",
        "type": "(angle?: number) => void"
      },
      {
        "name": "rotateUp",
        "documentation": "",
        "type": "(angle?: number) => void"
      },
      {
        "name": "panLeft",
        "documentation": "",
        "type": "(distance?: number) => void"
      },
      {
        "name": "panUp",
        "documentation": "",
        "type": "(distance?: number) => void"
      },
      {
        "name": "pan",
        "documentation": "",
        "type": "(deltaX: number, deltaY: number) => void"
      },
      {
        "name": "dollyIn",
        "documentation": "",
        "type": "(dollyScale: number) => void"
      },
      {
        "name": "dollyOut",
        "documentation": "",
        "type": "(dollyScale: number) => void"
      },
      {
        "name": "update",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "reset",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "dispose",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "getPolarAngle",
        "documentation": "",
        "type": "() => number"
      },
      {
        "name": "getAzimuthalAngle",
        "documentation": "",
        "type": "() => number"
      },
      {
        "name": "addEventListener",
        "documentation": "",
        "type": "(type: string, listener: (event: any) => void) => void"
      },
      {
        "name": "hasEventListener",
        "documentation": "",
        "type": "(type: string, listener: (event: any) => void) => void"
      },
      {
        "name": "removeEventListener",
        "documentation": "",
        "type": "(type: string, listener: (event: any) => void) => void"
      },
      {
        "name": "dispatchEvent",
        "documentation": "",
        "type": "(event: { type: string; target: any; }) => void"
      }
    ]
  },
  {
    "name": "OrthographicTrackballControls",
    "documentation": "",
    "type": "typeof OrthographicTrackballControls",
    "constructors": [
      {
        "parameters": [
          {
            "name": "object",
            "documentation": "",
            "type": "Camera"
          },
          {
            "name": "domElement",
            "documentation": "",
            "type": "HTMLElement"
          }
        ],
        "returnType": "OrthographicTrackballControls",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "object",
        "documentation": "",
        "type": "Camera"
      },
      {
        "name": "domElement",
        "documentation": "",
        "type": "HTMLElement"
      },
      {
        "name": "enabled",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "screen",
        "documentation": "",
        "type": "{ left: number; top: number; width: number; height: number; }"
      },
      {
        "name": "radius",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "rotateSpeed",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "zoomSpeed",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "panSpeed",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "noRotate",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "noZoom",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "noPan",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "noRoll",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "staticMoving",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "dynamicDampingFactor",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "keys",
        "documentation": "",
        "type": "number[]"
      },
      {
        "name": "target",
        "documentation": "",
        "type": "Vector3"
      },
      {
        "name": "position0",
        "documentation": "",
        "type": "Vector3"
      },
      {
        "name": "target0",
        "documentation": "",
        "type": "Vector3"
      },
      {
        "name": "up0",
        "documentation": "",
        "type": "Vector3"
      },
      {
        "name": "left0",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "right0",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "top0",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "bottom0",
        "documentation": "",
        "type": "number"
      }
    ],
    "methods": [
      {
        "name": "update",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "reset",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "checkDistances",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "zoomCamera",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "panCamera",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "rotateCamera",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "handleResize",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "handleEvent",
        "documentation": "",
        "type": "(event: any) => void"
      }
    ]
  },
  {
    "name": "RenderableObject",
    "documentation": "",
    "type": "typeof RenderableObject",
    "constructors": [
      {
        "parameters": [],
        "returnType": "RenderableObject",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "id",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "object",
        "documentation": "",
        "type": "any"
      },
      {
        "name": "z",
        "documentation": "",
        "type": "number"
      }
    ],
    "methods": []
  },
  {
    "name": "RenderableFace",
    "documentation": "",
    "type": "typeof RenderableFace",
    "constructors": [
      {
        "parameters": [],
        "returnType": "RenderableFace",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "id",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "v1",
        "documentation": "",
        "type": "RenderableVertex"
      },
      {
        "name": "v2",
        "documentation": "",
        "type": "RenderableVertex"
      },
      {
        "name": "v3",
        "documentation": "",
        "type": "RenderableVertex"
      },
      {
        "name": "normalModel",
        "documentation": "",
        "type": "Vector3"
      },
      {
        "name": "vertexNormalsModel",
        "documentation": "",
        "type": "Vector3[]"
      },
      {
        "name": "vertexNormalsLength",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "color",
        "documentation": "",
        "type": "Color"
      },
      {
        "name": "material",
        "documentation": "",
        "type": "Material"
      },
      {
        "name": "uvs",
        "documentation": "",
        "type": "Vector2[][]"
      },
      {
        "name": "z",
        "documentation": "",
        "type": "number"
      }
    ],
    "methods": []
  },
  {
    "name": "RenderableVertex",
    "documentation": "",
    "type": "typeof RenderableVertex",
    "constructors": [
      {
        "parameters": [],
        "returnType": "RenderableVertex",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "position",
        "documentation": "",
        "type": "Vector3"
      },
      {
        "name": "positionWorld",
        "documentation": "",
        "type": "Vector3"
      },
      {
        "name": "positionScreen",
        "documentation": "",
        "type": "Vector4"
      },
      {
        "name": "visible",
        "documentation": "",
        "type": "boolean"
      }
    ],
    "methods": [
      {
        "name": "copy",
        "documentation": "",
        "type": "(vertex: RenderableVertex) => void"
      }
    ]
  },
  {
    "name": "RenderableLine",
    "documentation": "",
    "type": "typeof RenderableLine",
    "constructors": [
      {
        "parameters": [],
        "returnType": "RenderableLine",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "id",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "v1",
        "documentation": "",
        "type": "RenderableVertex"
      },
      {
        "name": "v2",
        "documentation": "",
        "type": "RenderableVertex"
      },
      {
        "name": "vertexColors",
        "documentation": "",
        "type": "Color[]"
      },
      {
        "name": "material",
        "documentation": "",
        "type": "Material"
      },
      {
        "name": "z",
        "documentation": "",
        "type": "number"
      }
    ],
    "methods": []
  },
  {
    "name": "RenderableSprite",
    "documentation": "",
    "type": "typeof RenderableSprite",
    "constructors": [
      {
        "parameters": [],
        "returnType": "RenderableSprite",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "id",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "object",
        "documentation": "",
        "type": "any"
      },
      {
        "name": "x",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "y",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "z",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "rotation",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "scale",
        "documentation": "",
        "type": "Vector2"
      },
      {
        "name": "material",
        "documentation": "",
        "type": "Material"
      }
    ],
    "methods": []
  },
  {
    "name": "Projector",
    "documentation": "Projects points between spaces.",
    "type": "typeof Projector",
    "constructors": [
      {
        "parameters": [],
        "returnType": "Projector",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": [
      {
        "name": "projectVector",
        "documentation": "",
        "type": "(vector: Vector3, camera: Camera) => Vector3"
      },
      {
        "name": "unprojectVector",
        "documentation": "",
        "type": "(vector: Vector3, camera: Camera) => Vector3"
      },
      {
        "name": "projectScene",
        "documentation": "Transforms a 3D scene object into 2D render data that can be rendered in a screen with your renderer of choice, projecting and clipping things out according to the used camera.\r\nIf the scene were a real scene, this method would be the equivalent of taking a picture with the camera (and developing the film would be the next step, using a Renderer).",
        "type": "(scene: Scene, camera: Camera, sortObjects: boolean, sortElements?: boolean) => { objects: Object..."
      }
    ]
  },
  {
    "name": "RenderPass",
    "documentation": "",
    "type": "typeof RenderPass",
    "constructors": [
      {
        "parameters": [
          {
            "name": "scene",
            "documentation": "",
            "type": "Scene"
          },
          {
            "name": "camera",
            "documentation": "",
            "type": "Camera"
          },
          {
            "name": "overrideMaterial",
            "documentation": "",
            "type": "Material"
          },
          {
            "name": "clearColor",
            "documentation": "",
            "type": "string | number | Color"
          },
          {
            "name": "clearAlpha",
            "documentation": "",
            "type": "number"
          }
        ],
        "returnType": "RenderPass",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "scene",
        "documentation": "",
        "type": "Scene"
      },
      {
        "name": "camera",
        "documentation": "",
        "type": "Camera"
      },
      {
        "name": "overrideMaterial",
        "documentation": "",
        "type": "Material"
      },
      {
        "name": "clearColor",
        "documentation": "",
        "type": "string | number | Color"
      },
      {
        "name": "clearAlpha",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "oldClearColor",
        "documentation": "",
        "type": "Color"
      },
      {
        "name": "oldClearAlpha",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "enabled",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "clear",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "needsSwap",
        "documentation": "",
        "type": "boolean"
      }
    ],
    "methods": [
      {
        "name": "render",
        "documentation": "",
        "type": "(renderer: WebGLRenderer, writeBuffer: WebGLRenderTarget, readBuffer: WebGLRenderTarget, delta: n..."
      }
    ]
  },
  {
    "name": "TrackballControls",
    "documentation": "",
    "type": "typeof TrackballControls",
    "constructors": [
      {
        "parameters": [
          {
            "name": "object",
            "documentation": "",
            "type": "Camera"
          },
          {
            "name": "domElement",
            "documentation": "",
            "type": "HTMLElement"
          }
        ],
        "returnType": "TrackballControls",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "object",
        "documentation": "",
        "type": "Camera"
      },
      {
        "name": "domElement",
        "documentation": "",
        "type": "HTMLElement"
      },
      {
        "name": "enabled",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "screen",
        "documentation": "",
        "type": "{ left: number; top: number; width: number; height: number; }"
      },
      {
        "name": "rotateSpeed",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "zoomSpeed",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "panSpeed",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "noRotate",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "noZoom",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "noPan",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "noRoll",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "staticMoving",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "dynamicDampingFactor",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "minDistance",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "maxDistance",
        "documentation": "",
        "type": "number"
      },
      {
        "name": "keys",
        "documentation": "",
        "type": "number[]"
      },
      {
        "name": "target",
        "documentation": "",
        "type": "Vector3"
      },
      {
        "name": "position0",
        "documentation": "",
        "type": "Vector3"
      },
      {
        "name": "target0",
        "documentation": "",
        "type": "Vector3"
      },
      {
        "name": "up0",
        "documentation": "",
        "type": "Vector3"
      }
    ],
    "methods": [
      {
        "name": "update",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "reset",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "checkDistances",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "zoomCamera",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "panCamera",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "rotateCamera",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "handleResize",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "handleEvent",
        "documentation": "",
        "type": "(event: any) => void"
      }
    ]
  },
  {
    "name": "TransformControls",
    "documentation": "",
    "type": "typeof TransformControls",
    "constructors": [
      {
        "parameters": [
          {
            "name": "object",
            "documentation": "",
            "type": "Camera"
          },
          {
            "name": "domElement",
            "documentation": "",
            "type": "HTMLElement"
          }
        ],
        "returnType": "TransformControls",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "object",
        "documentation": "",
        "type": "Object3D"
      }
    ],
    "methods": [
      {
        "name": "update",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "detach",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "attach",
        "documentation": "",
        "type": "(object: Object3D) => void"
      },
      {
        "name": "getMode",
        "documentation": "",
        "type": "() => string"
      },
      {
        "name": "setMode",
        "documentation": "",
        "type": "(mode: string) => void"
      },
      {
        "name": "setSnap",
        "documentation": "",
        "type": "(snap: any) => void"
      },
      {
        "name": "setSize",
        "documentation": "",
        "type": "(size: number) => void"
      },
      {
        "name": "setSpace",
        "documentation": "",
        "type": "(space: string) => void"
      }
    ]
  },
  {
    "name": "VRDisplay",
    "documentation": "",
    "type": "typeof VRDisplay",
    "constructors": [
      {
        "parameters": [],
        "returnType": "VRDisplay",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "isPresenting",
        "documentation": "",
        "type": "boolean"
      },
      {
        "name": "capabilities",
        "documentation": "Dictionary of capabilities describing the VRDisplay.",
        "type": "VRDisplayCapabilities"
      },
      {
        "name": "stageParameters",
        "documentation": "If this VRDisplay supports room-scale experiences, the optional\r\nstage attribute contains details on the room-scale parameters.",
        "type": "VRStageParameters"
      },
      {
        "name": "displayId",
        "documentation": "An identifier for this distinct VRDisplay. Used as an\r\nassociation point in the Gamepad API.",
        "type": "number"
      },
      {
        "name": "displayName",
        "documentation": "A display name, a user-readable name identifying it.",
        "type": "string"
      },
      {
        "name": "depthNear",
        "documentation": "z-depth defining the near plane of the eye view frustum\r\nenables mapping of values in the render target depth\r\nattachment to scene coordinates. Initially set to 0.01.",
        "type": "number"
      },
      {
        "name": "depthFar",
        "documentation": "z-depth defining the far plane of the eye view frustum\r\nenables mapping of values in the render target depth\r\nattachment to scene coordinates. Initially set to 10000.0.",
        "type": "number"
      }
    ],
    "methods": [
      {
        "name": "getEyeParameters",
        "documentation": "",
        "type": "(whichEye: VREye) => VREyeParameters"
      },
      {
        "name": "getFrameData",
        "documentation": "Populates the passed VRFrameData with the information required to render\r\nthe current frame.",
        "type": "(frameData: VRFrameData) => boolean"
      },
      {
        "name": "getPose",
        "documentation": "Return a VRPose containing the future predicted pose of the VRDisplay\r\nwhen the current frame will be presented. The value returned will not\r\nchange until JavaScript has returned control to the browser.\r\n\r\nThe VRPose will contain the position, orientation, velocity,\r\nand acceleration of each of these properties.",
        "type": "() => VRPose"
      },
      {
        "name": "getImmediatePose",
        "documentation": "Return the current instantaneous pose of the VRDisplay, with no\r\nprediction applied.",
        "type": "() => VRPose"
      },
      {
        "name": "resetPose",
        "documentation": "Reset the pose for this display, treating its current position and\r\norientation as the \"origin/zero\" values. VRPose.position,\r\nVRPose.orientation, and VRStageParameters.sittingToStandingTransform may be\r\nupdated when calling resetPose(). This should be called in only\r\nsitting-space experiences.",
        "type": "() => void"
      },
      {
        "name": "requestAnimationFrame",
        "documentation": "The callback passed to `requestAnimationFrame` will be called\r\nany time a new frame should be rendered. When the VRDisplay is\r\npresenting the callback will be called at the native refresh\r\nrate of the HMD. When not presenting this function acts\r\nidentically to how window.requestAnimationFrame acts. Content should\r\nmake no assumptions of frame rate or vsync behavior as the HMD runs\r\nasynchronously from other displays and at differing refresh rates.",
        "type": "(callback: FrameRequestCallback) => number"
      },
      {
        "name": "cancelAnimationFrame",
        "documentation": "Passing the value returned by `requestAnimationFrame` to\r\n`cancelAnimationFrame` will unregister the callback.",
        "type": "(handle: number) => void"
      },
      {
        "name": "requestPresent",
        "documentation": "Begin presenting to the VRDisplay. Must be called in response to a user gesture.\r\nRepeat calls while already presenting will update the VRLayers being displayed.",
        "type": "(layers: VRLayer[]) => Promise<void>"
      },
      {
        "name": "exitPresent",
        "documentation": "Stops presenting to the VRDisplay.",
        "type": "() => Promise<void>"
      },
      {
        "name": "getLayers",
        "documentation": "Get the layers currently being presented.",
        "type": "() => VRLayer[]"
      },
      {
        "name": "submitFrame",
        "documentation": "The VRLayer provided to the VRDisplay will be captured and presented\r\nin the HMD. Calling this function has the same effect on the source\r\ncanvas as any other operation that uses its source image, and canvases\r\ncreated without preserveDrawingBuffer set to true will be cleared.",
        "type": "(pose?: VRPose) => void"
      }
    ]
  },
  {
    "name": "VRFrameData",
    "documentation": "",
    "type": "typeof VRFrameData",
    "constructors": [
      {
        "parameters": [],
        "returnType": "VRFrameData",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "leftProjectionMatrix",
        "documentation": "",
        "type": "Float32Array"
      },
      {
        "name": "leftViewMatrix",
        "documentation": "",
        "type": "Float32Array"
      },
      {
        "name": "rightProjectionMatrix",
        "documentation": "",
        "type": "Float32Array"
      },
      {
        "name": "rightViewMatrix",
        "documentation": "",
        "type": "Float32Array"
      },
      {
        "name": "pose",
        "documentation": "",
        "type": "VRPose"
      }
    ],
    "methods": []
  },
  {
    "name": "VRControls",
    "documentation": "",
    "type": "typeof VRControls",
    "constructors": [
      {
        "parameters": [
          {
            "name": "camera",
            "documentation": "",
            "type": "Camera"
          },
          {
            "name": "callback",
            "documentation": "",
            "type": "(param: string) => void"
          }
        ],
        "returnType": "VRControls",
        "documentation": ""
      }
    ],
    "properties": [
      {
        "name": "scale",
        "documentation": "",
        "type": "number"
      }
    ],
    "methods": [
      {
        "name": "update",
        "documentation": "Update VR Instance Tracking",
        "type": "() => void"
      },
      {
        "name": "zeroSensor",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "setVRDisplay",
        "documentation": "",
        "type": "(display: VRDisplay) => void"
      }
    ]
  },
  {
    "name": "VREffect",
    "documentation": "",
    "type": "typeof VREffect",
    "constructors": [
      {
        "parameters": [
          {
            "name": "renderer",
            "documentation": "",
            "type": "Renderer"
          },
          {
            "name": "callback",
            "documentation": "",
            "type": "(params: string) => void"
          }
        ],
        "returnType": "VREffect",
        "documentation": ""
      }
    ],
    "properties": [],
    "methods": [
      {
        "name": "render",
        "documentation": "",
        "type": "(scene: Scene, camera: Camera) => void"
      },
      {
        "name": "setSize",
        "documentation": "",
        "type": "(width: number, height: number) => void"
      },
      {
        "name": "setFullScreen",
        "documentation": "",
        "type": "(flag: boolean) => void"
      },
      {
        "name": "startFullscreen",
        "documentation": "",
        "type": "() => void"
      },
      {
        "name": "FovToNDCScaleOffset",
        "documentation": "",
        "type": "(fov: VRFov) => VREffectOffset"
      },
      {
        "name": "FovPortToProjection",
        "documentation": "",
        "type": "(fov: VRFov, rightHanded: boolean, zNear: number, zFar: number) => Matrix4"
      },
      {
        "name": "FovToProjection",
        "documentation": "",
        "type": "(fov: VRFov, rightHanded: boolean, zNear: number, zFar: number) => Matrix4"
      },
      {
        "name": "setVRDisplay",
        "documentation": "",
        "type": "(display: VRDisplay) => void"
      }
    ]
  }
]